#:mute

    #:include 'common.fypp'
    #:include 'with_real.fypp'


    #:set MODULE_NAME = PARAMETER_INV_FACTORIAL('') + REAL_KIND

#:endmute
module ${MODULE_NAME}$

    use, intrinsic :: iso_fortran_env, only: ${REAL_KIND}$


    implicit none


    private


    real(${REAL_KIND}$), parameter, public :: @{PARAMETER_INV_FACTORIAL(0)}@ = 1.0_${REAL_KIND}$
    #:for I in range(1, MAXVAL_DEGREE_EXP)
    real(${REAL_KIND}$), parameter, public :: @{PARAMETER_INV_FACTORIAL(${I}$)}@ = @{PARAMETER_INV_FACTORIAL(${I - 1}$)}@ / ${str(I).rjust(DIGITS_DEGREE)}$
    #:endfor

end module ${MODULE_NAME}$
