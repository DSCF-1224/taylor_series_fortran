#:mute

    #:include 'common.fypp'
    #:include 'with_real.fypp'

    #:set SUBMODULE_NAME = 'imp_' + INTERFACE_TAYLOR_SERIES_EXP('') + '_' + REAL_KIND

    #:set SUBMODULE_DESCRIPTION = 'Implementation of `' + INTERFACE_TAYLOR_SERIES_EXP("*" * 3) + '` for `' + REAL_KIND + '`.'

#:endmute
!> ${SUBMODULE_DESCRIPTION}$
!! @note
!! [main_submodule_exp_${REAL_KIND}$.f90](https://github.com/DSCF-1224/taylor_series_fortran/blob/github-pages/src/main_submodule_exp_${REAL_KIND}$.f90)
!! [demo_exp_error_${REAL_KIND}$.svg](https://github.com/DSCF-1224/taylor_series_fortran/blob/github-pages/example/demo_exp_error_${REAL_KIND}$.svg)
!! [demo_exp_series_${REAL_KIND}$.svg](https://github.com/DSCF-1224/taylor_series_fortran/blob/github-pages/example/demo_exp_series_${REAL_KIND}$.svg)
!! @endnote
submodule (${MODULE_NAME}$) ${SUBMODULE_NAME}$

    #:set REQUIRED_MODULE_NAME = PARAMETER_INV_FACTORIAL('') + REAL_KIND
    use, non_intrinsic :: ${REQUIRED_MODULE_NAME}$ , only: &! 
    #:del REQUIRED_MODULE_NAME
    #:for DEGREE in range(MAXVAL_DEGREE_EXP)
        @{COEFFICIENT_NAME(${DEGREE}$)}@ => @{PARAMETER_INV_FACTORIAL(${DEGREE}$)}@ , &!
    #:endfor
        @{COEFFICIENT_NAME(${MAXVAL_DEGREE_EXP}$)}@ => @{PARAMETER_INV_FACTORIAL(${MAXVAL_DEGREE_EXP}$)}@


    implicit none


    contains

    #:for DEGREE in range(RANGE_STOP_DEGREE_EXP)

    #:set PROCEDURE_NAME = FUNCTION_TAYLOR_SERIES_EXP(DEGREE, REAL_KIND)
    module procedure ${PROCEDURE_NAME}$

    #:if DEGREE > 0
        res = @{FUNCTION_HORNER(${DEGREE - 1}$)}@( x = x, pre_step = @{COEFFICIENT_NAME(${DEGREE}$)}@ )
    #:else
        res = @{FUNCTION_HORNER(0)}@( x = x, pre_step = 0.0_${REAL_KIND}$ )
    #:endif

    end procedure ${PROCEDURE_NAME}$
    #:del PROCEDURE_NAME

    #:endfor

    #:for DEGREE in range(MAXVAL_DEGREE_EXP)

    #:block BLOCK_DECLARE_HORNER('', REAL_KIND, DEGREE)
    #:endblock BLOCK_DECLARE_HORNER

    #:endfor
end submodule ${SUBMODULE_NAME}$
