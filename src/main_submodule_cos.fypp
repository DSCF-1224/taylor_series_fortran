#:mute

    #:include 'common.fypp'
    #:include 'with_real.fypp'

    #:set SUBMODULE_NAME = 'imp_' + INTERFACE_TAYLOR_SERIES_COS('') + '_' + REAL_KIND

    #:set SUBMODULE_DESCRIPTION = 'Implementation of `' + INTERFACE_TAYLOR_SERIES_COS("*" * 3) + '` for `' + REAL_KIND + '`.'

#:endmute
!! ${SUBMODULE_DESCRIPTION}$
!! @note
!! [main_submodule_cos_${REAL_KIND}$.f90](https://github.com/DSCF-1224/taylor_series_fortran/blob/github-pages/src/main_submodule_cos_${REAL_KIND}$.f90)<br>
!! [demo_cos_error_${REAL_KIND}$.svg](https://github.com/DSCF-1224/taylor_series_fortran/blob/github-pages/example/demo_cos_error_${REAL_KIND}$.svg)<br>
!! [demo_cos_series_${REAL_KIND}$.svg](https://github.com/DSCF-1224/taylor_series_fortran/blob/github-pages/example/demo_cos_series_${REAL_KIND}$.svg)
!! @endnote
submodule (${MODULE_NAME}$) ${SUBMODULE_NAME}$

    #:set REQUIRED_MODULE_NAME = PARAMETER_INV_FACTORIAL('') + REAL_KIND
    use, non_intrinsic :: ${REQUIRED_MODULE_NAME}$ , only: &! 
    #:del REQUIRED_MODULE_NAME
    #:for DEGREE in range(2, RANGE_STOP_DEGREE_COS, 2)
        #:mute

            #:set RES = COEFFICIENT_NAME(DEGREE) + ' => '

            #:if ( (DEGREE / 2) % 2 ) != 0
                #:set RES = ' ' * len(RES)
            #:endif

            #:set RES = RES + PARAMETER_INV_FACTORIAL(DEGREE)

            #:if DEGREE < MAXVAL_DEGREE_COS
                #:set RES = RES + ' , &!'
            #:endif

        #:endmute
        ${RES}$
        #:del RES
    #:endfor


    implicit none


    #:for DEGREE in range(RANGE_STOP_DEGREE_COS)
        #:mute

            #:set LHS = 'real(' + REAL_KIND + '), parameter :: ' + COEFFICIENT_NAME(DEGREE)
            #:set RHS = ''
            #:set RES = ''

            #:if (DEGREE % 2) == 0

                #:if DEGREE == 0
                    #:set RHS = '  1.0_' + REAL_KIND
                #:else

                    #:if ( (DEGREE / 2) % 2 ) == 0
                        #:set RHS = ''
                    #:else
                        #:set RHS = '- ' + PARAMETER_INV_FACTORIAL(DEGREE)
                    #:endif

                #:endif

            #:else
                #:set RHS = '  0.0_' + REAL_KIND
            #:endif

            #:if RHS != ''
                #:set RES = LHS + ' = ' + RHS
            #:endif

        #:endmute
    #:if RES != ''
    ${RES}$
    #:endif
    #:del LHS
    #:del RHS
    #:del RES
    #:endfor


    contains

    #:for DEGREE in range(RANGE_STOP_DEGREE_COS)

    #:set PROCEDURE_NAME = FUNCTION_TAYLOR_SERIES_COS(DEGREE, REAL_KIND)
    module procedure ${PROCEDURE_NAME}$

    #:if (DEGREE % 2) == 0
    #:if DEGREE > 0
        res = @{FUNCTION_HORNER(${DEGREE - 1}$)}@( x = x, pre_step = @{COEFFICIENT_NAME(${DEGREE}$)}@ )
    #:else
        res = @{FUNCTION_HORNER(0)}@( x = x, pre_step = 0.0_${REAL_KIND}$ )
    #:endif
    #:else
        res = @{FUNCTION_TAYLOR_SERIES_COS(${DEGREE - 1}$, ${REAL_KIND}$)}@(x)
    #:endif

    end procedure ${PROCEDURE_NAME}$
    #:del PROCEDURE_NAME

    #:endfor

    #:for DEGREE in range(MAXVAL_DEGREE_COS)

    #:block BLOCK_DECLARE_HORNER('', REAL_KIND, DEGREE)
    #:endblock BLOCK_DECLARE_HORNER

    #:endfor
end submodule ${SUBMODULE_NAME}$
