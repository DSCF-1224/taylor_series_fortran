#:mute

    #:include 'common.fypp'

#:endmute
module ${MODULE_NAME}$

    #:for KIND in REAL_KINDS
    use, intrinsic :: iso_fortran_env, only: ${KIND}$
    #:endfor


    implicit none


    private


    #:for DEGREE in range(MAXVAL_DEGREE_COS)
    #:set INTERFACE_NAME = INTERFACE_TAYLOR_SERIES_COS(DEGREE)
    public :: ${INTERFACE_NAME}$
    #:endfor
    #:del INTERFACE_NAME


    #:for DEGREE in range(MAXVAL_DEGREE_EXP)
    #:set INTERFACE_NAME = INTERFACE_TAYLOR_SERIES_EXP(DEGREE)
    public :: ${INTERFACE_NAME}$
    #:endfor
    #:del INTERFACE_NAME


    #:for DEGREE in range(MAXVAL_DEGREE_SIN)
    #:set INTERFACE_NAME = INTERFACE_TAYLOR_SERIES_SIN(DEGREE)
    public :: ${INTERFACE_NAME}$
    #:endfor
    #:del INTERFACE_NAME




    #:for DEGREE in range(MAXVAL_DEGREE_COS)
    #:set INTERFACE_NAME = INTERFACE_TAYLOR_SERIES_COS(DEGREE)
    !> `cos(x)` approximation by a @{TO_ORDINAL(${DEGREE}$)}@ order Taylor series
    interface ${INTERFACE_NAME}$
    #:for KIND in REAL_KINDS
        #:set FUNCTION_NAME = FUNCTION_TAYLOR_SERIES_COS(DEGREE, KIND)
        #:set STATEMENT = 'real( ' + KIND.ljust(7) + ' ) module elemental function ' + FUNCTION_NAME.ljust(29) + ' (x) result(res); real( ' + KIND.ljust(7) + ' ), intent(in) :: x; end function'
        #:if (KIND == 'real32') and (DEGREE >= MAXVAL_DEGREE_COS_REAL32)
            #:set STATEMENT = ''
        #:elif (KIND == 'real64') and (DEGREE >= MAXVAL_DEGREE_COS_REAL64)
            #:set STATEMENT = ''
        #:endif
        #:if STATEMENT != ''
        ${STATEMENT}$
        #:endif
        #:del FUNCTION_NAME
        #:del STATEMENT
    #:endfor
    end interface
    #:del INTERFACE_NAME


    #:endfor


    #:for DEGREE in range(MAXVAL_DEGREE_EXP)
    #:set INTERFACE_NAME = INTERFACE_TAYLOR_SERIES_EXP(DEGREE)
    !> `exp(x)` approximation by a @{TO_ORDINAL(${DEGREE}$)}@ order Taylor series
    interface ${INTERFACE_NAME}$
    #:for KIND in REAL_KINDS
        #:set FUNCTION_NAME = FUNCTION_TAYLOR_SERIES_EXP(DEGREE, KIND)
        #:set STATEMENT = 'real( ' + KIND.ljust(7) + ' ) module elemental function ' + FUNCTION_NAME.ljust(29) + ' (x) result(res); real( ' + KIND.ljust(7) + ' ), intent(in) :: x; end function'
        #:if (KIND == 'real32') and (DEGREE >= MAXVAL_DEGREE_EXP_REAL32)
            #:set STATEMENT = ''
        #:elif (KIND == 'real64') and (DEGREE >= MAXVAL_DEGREE_EXP_REAL64)
            #:set STATEMENT = ''
        #:endif
        #:if STATEMENT != ''
        ${STATEMENT}$
        #:endif
        #:del FUNCTION_NAME
        #:del STATEMENT
    #:endfor
    end interface
    #:del INTERFACE_NAME


    #:endfor


    #:for DEGREE in range(MAXVAL_DEGREE_SIN)
    #:set INTERFACE_NAME = INTERFACE_TAYLOR_SERIES_SIN(DEGREE)
    !> `sin(x)` approximation by a @{TO_ORDINAL(${DEGREE}$)}@ order Taylor series
    interface ${INTERFACE_NAME}$
    #:for KIND in REAL_KINDS
        #:set FUNCTION_NAME = FUNCTION_TAYLOR_SERIES_SIN(DEGREE, KIND)
        #:set STATEMENT = 'real( ' + KIND.ljust(7) + ' ) module elemental function ' + FUNCTION_NAME.ljust(29) + ' (x) result(res); real( ' + KIND.ljust(7) + ' ), intent(in) :: x; end function'
        #:if (KIND == 'real32') and (DEGREE >= MAXVAL_DEGREE_SIN_REAL32)
            #:set STATEMENT = ''
        #:elif (KIND == 'real64') and (DEGREE >= MAXVAL_DEGREE_SIN_REAL64)
            #:set STATEMENT = ''
        #:endif
        #:if STATEMENT != ''
        ${STATEMENT}$
        #:endif
        #:del FUNCTION_NAME
        #:del STATEMENT
    #:endfor
    end interface
    #:del INTERFACE_NAME


    #:endfor
end module ${MODULE_NAME}$
