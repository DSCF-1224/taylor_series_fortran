#:mute

    #:include 'common.fypp'
    #:include 'with_real.fypp'

    #:set SUBMODULE_NAME = 'imp_' + INTERFACE_TAYLOR_SERIES_EXP('') + '_' + REAL_KIND
    
#:endmute
submodule (${MODULE_NAME}$) ${SUBMODULE_NAME}$

    implicit none


    #:for DEGREE in range(MAXVAL_DEGREE_EXP)
        #:mute

            #:set LHS = 'real(' + REAL_KIND + '), parameter :: ' + COEFFICIENT_NAME(DEGREE)
            #:set RHS = ''
            #:set RES = ''

            #:if DEGREE < 2
                #:set RHS = '1.0_' + REAL_KIND
            #:else
                #:set RHS = COEFFICIENT_NAME(DEGREE - 1) + ' / ' + str(DEGREE).rjust(DIGITS_DEGREE)
            #:endif

            #:if RHS != ''
                #:set RES = LHS + ' = ' + RHS
            #:endif

        #:endmute
    #:if RES != ''
    ${RES}$
    #:endif
    #:del LHS
    #:del RHS
    #:del RES
    #:endfor


    contains

    #:for DEGREE in range(MAXVAL_DEGREE_EXP)

    #:set PROCEDURE_NAME = FUNCTION_TAYLOR_SERIES_EXP(DEGREE, REAL_KIND)
    module procedure ${PROCEDURE_NAME}$

    #:if DEGREE > 0
        res = @{FUNCTION_HORNER(${DEGREE - 1}$)}@( x = x, pre_step = (@{COEFFICIENT_NAME(${DEGREE - 1}$)}@ + x * @{COEFFICIENT_NAME(${DEGREE}$)}@) )
    #:else
        res = @{FUNCTION_HORNER(0)}@( x = x, pre_step = 0.0_${REAL_KIND}$ )
    #:endif

    end procedure ${PROCEDURE_NAME}$
    #:del PROCEDURE_NAME

    #:endfor

    #:for DEGREE in range(MAXVAL_DEGREE_EXP - 1)

    #:block BLOCK_DECLARE_HORNER('', REAL_KIND, DEGREE)
    #:endblock BLOCK_DECLARE_HORNER

    #:endfor
end submodule ${SUBMODULE_NAME}$
