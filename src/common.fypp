#:mute

    #:set REAL_KINDS = ['real32', 'real64', 'real128']



    #! ././src/inv_factorial_real32.f90:51:76:
    #! 
    #!    51 |     real(real32), parameter, public :: inv_factorial_039 = inv_factorial_038 /  39
    #!       |                                                                            1
    #! Error: Arithmetic underflow at (1) [-Werror=underflow]
    #! f951: all warnings being treated as errors

    #! ././src/inv_factorial_real64.f90:190:76:
    #! 
    #!   190 |     real(real64), parameter, public :: inv_factorial_178 = inv_factorial_177 / 178
    #!       |                                                                            1
    #! Error: Arithmetic underflow at (1) [-Werror=underflow]
    #! f951: all warnings being treated as errors

    #:set RANGE_STOP_DEGREE_EXP_REAL32 =  39
    #:set RANGE_STOP_DEGREE_EXP_REAL64 = 178
    #:set RANGE_STOP_DEGREE_EXP        = RANGE_STOP_DEGREE_EXP_REAL64
    #:set RANGE_STOP_DEGREE            = RANGE_STOP_DEGREE_EXP_REAL64



    #:if (RANGE_STOP_DEGREE_EXP_REAL32 % 2) != 0
        #:set RANGE_STOP_DEGREE_COS_REAL32 = RANGE_STOP_DEGREE_EXP_REAL32
    #:else
        #:set RANGE_STOP_DEGREE_COS_REAL32 = RANGE_STOP_DEGREE_EXP_REAL32 - 1
    #:endif

    #:if (RANGE_STOP_DEGREE_EXP_REAL64 % 2) != 0
        #:set RANGE_STOP_DEGREE_COS_REAL64 = RANGE_STOP_DEGREE_EXP_REAL64
    #:else
        #:set RANGE_STOP_DEGREE_COS_REAL64 = RANGE_STOP_DEGREE_EXP_REAL64 - 1
    #:endif

    #:set RANGE_STOP_DEGREE_COS =                        RANGE_STOP_DEGREE_COS_REAL64
    #:set RANGE_STOP_DEGREE     = max(RANGE_STOP_DEGREE, RANGE_STOP_DEGREE_COS_REAL64)



    #:if (RANGE_STOP_DEGREE_EXP_REAL32 % 2) != 0
        #:set RANGE_STOP_DEGREE_SIN_REAL32 = RANGE_STOP_DEGREE_EXP_REAL32 - 1
    #:else
        #:set RANGE_STOP_DEGREE_SIN_REAL32 = RANGE_STOP_DEGREE_EXP_REAL32
    #:endif

    #:if (RANGE_STOP_DEGREE_EXP_REAL64 % 2) != 0
        #:set RANGE_STOP_DEGREE_SIN_REAL64 = RANGE_STOP_DEGREE_EXP_REAL64 - 1
    #:else
        #:set RANGE_STOP_DEGREE_SIN_REAL64 = RANGE_STOP_DEGREE_EXP_REAL64
    #:endif

    #:set RANGE_STOP_DEGREE_SIN =                        RANGE_STOP_DEGREE_SIN_REAL64
    #:set RANGE_STOP_DEGREE     = max(RANGE_STOP_DEGREE, RANGE_STOP_DEGREE_SIN_REAL64)



    #:if RANGE_STOP_DEGREE < 1
        #:stop '`RANGE_STOP_DEGREE` must be greater than zero !'
    #:endif



    #:set DIGITS_DEGREE = 3



    #:set MODULE_NAME     = 'taylor_series_fortran'
    #:set FUNCTION_PREFIX = MODULE_NAME.replace('_fortran', '')



    #:def INTERFACE_TAYLOR_SERIES_BASE(name, degree)
        #:if degree == ''
            #:set RES = FUNCTION_PREFIX + '_' + name
            $:RES
            #:del RES
        #:else
            #:set RES = INTERFACE_TAYLOR_SERIES_BASE(name, '') + '_' + str(degree).zfill(DIGITS_DEGREE)
            $:RES
            #:del RES
        #:endif
    #:enddef



    #:def INTERFACE_TAYLOR_SERIES_COS(degree)
        #:set RES = INTERFACE_TAYLOR_SERIES_BASE('cos', degree)
        $:RES
        #:del RES
    #:enddef



    #:def INTERFACE_TAYLOR_SERIES_EXP(degree)
        #:set RES = INTERFACE_TAYLOR_SERIES_BASE('exp', degree)
        $:RES
        #:del RES
    #:enddef



    #:def INTERFACE_TAYLOR_SERIES_SIN(degree)
        #:set RES = INTERFACE_TAYLOR_SERIES_BASE('sin', degree)
        $:RES
        #:del RES
    #:enddef



    #:def FUNCTION_TAYLOR_SERIES_COS(degree, kind)
        #:set RES = INTERFACE_TAYLOR_SERIES_COS(degree) + '_' + kind
        $:RES
        #:del RES
    #:enddef



    #:def FUNCTION_TAYLOR_SERIES_EXP(degree, kind)
        #:set RES = INTERFACE_TAYLOR_SERIES_EXP(degree) + '_' + kind
        $:RES
        #:del RES
    #:enddef



    #:def FUNCTION_TAYLOR_SERIES_SIN(degree, kind)
        #:set RES = INTERFACE_TAYLOR_SERIES_SIN(degree) + '_' + kind
        $:RES
        #:del RES
    #:enddef



    #:def COEFFICIENT_NAME(degree)
        #:set RES = 'coefficient_' + str(degree).zfill(DIGITS_DEGREE)
        $:RES
    #:enddef



    #:def FUNCTION_HORNER(degree)
        #:set RES = 'horner_' + str(degree).zfill(DIGITS_DEGREE)
        $:RES
    #:enddef



    #:def PARAMETER_INV_FACTORIAL(degree)
        #:set RES = 'inv_factorial_'
        #:if degree != ''
            #:set RES = RES + str(degree).zfill(DIGITS_DEGREE)
        #:endif
        $:RES
        #:del RES
    #:enddef



    #:def TO_ORDINAL(n)
    #:if 10 <= ( int(n) % 100 ) and ( int(n) % 100 ) <= 20
        #:set SUFFIX = 'th'
    #:else
        #:set SUFFIX = {1: 'st', 2: 'nd', 3: 'rd'}.get( int(n) % 10, 'th' )
    #:endif
    #:set RES = str(n) + SUFFIX
    $:RES
    #:del RES
    #:del SUFFIX
    #:enddef



    #:def BLOCK_DECLARE_HORNER(code, kind, degree)
    #:set FUNCTION_NAME = FUNCTION_HORNER(degree)
    real(${kind}$) elemental function ${FUNCTION_NAME}$(x, pre_step)

        real(${kind}$), intent(in) :: x, pre_step

        #:if degree > 0
        ${FUNCTION_NAME}$ = @{FUNCTION_HORNER(${degree - 1}$)}@( x = x, pre_step = (pre_step * x + @{COEFFICIENT_NAME(${degree}$)}@) )
        #:else
        ${FUNCTION_NAME}$ = pre_step * x + @{COEFFICIENT_NAME(${degree}$)}@
        #:endif

    end function
    #:del FUNCTION_NAME
    #:enddef
#:endmute
