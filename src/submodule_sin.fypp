#:mute

    #:include 'common.fypp'
    #:include 'with_real.fypp'

    #:set SUBMODULE_NAME = 'imp_' + INTERFACE_TAYLOR_SERIES_SIN('') + '_' + REAL_KIND

    #:def COEFFICIENT_NAME(degree)
    #:set RES = 'coefficient' + str(degree).zfill(DIGITS_DEGREE)
    $:RES
    #:enddef
    
#:endmute
submodule (${MODULE_NAME}$) ${SUBMODULE_NAME}$

    implicit none


    #:for DEGREE in range(MAXVAL_DEGREE_SIN)
        #:mute

            #:set LHS = 'real(' + REAL_KIND + '), parameter :: ' + COEFFICIENT_NAME(DEGREE)
            #:set RHS = ''
            #:set RES = ''

            #:if (DEGREE % 2) == 1
                #:if DEGREE == 1
                    #:set RHS = '  1.0_' + REAL_KIND
                #:else
                    #:set RHS = '- ' + COEFFICIENT_NAME(DEGREE - 2) + ' / (' + str(DEGREE - 1).rjust(DIGITS_DEGREE) + ' * ' + str(DEGREE).rjust(DIGITS_DEGREE) + ')'
                #:endif
            #:else
                #:set RHS = '  0.0_' + REAL_KIND
            #:endif

            #:if RHS != ''
                #:set RES = LHS + ' = ' + RHS
            #:endif

        #:endmute
    #:if RES != ''
    ${RES}$
    #:endif
    #:del LHS
    #:del RHS
    #:del RES
    #:endfor


    contains

    #:for DEGREE in range(MAXVAL_DEGREE_SIN)

    #:set PROCEDURE_NAME = FUNCTION_TAYLOR_SERIES_SIN(DEGREE, REAL_KIND)
    module procedure ${PROCEDURE_NAME}$

    #:if DEGREE == 0
        res = ieee_value( x = x, class = ieee_positive_zero )
    #:else
        res = @{COEFFICIENT_NAME(${DEGREE - 1}$)}@ + x * @{COEFFICIENT_NAME(${DEGREE}$)}@
        #:for I in reversed(range(DEGREE - 1))
        res = @{COEFFICIENT_NAME(${I}$)}@ + x * res
        #:endfor
    #:endif

    end procedure ${PROCEDURE_NAME}$
    #:del PROCEDURE_NAME

    #:endfor
end submodule ${SUBMODULE_NAME}$
