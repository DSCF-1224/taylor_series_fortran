var tipuesearch = {"pages":[{"title":" taylor_series_fortran ","text":"taylor_series_fortran","tags":"home","url":"index.html"},{"title":"taylor_series_cos_000 – taylor_series_fortran","text":"public interface taylor_series_cos_000 cos(x) approximation by a 0th order Taylor series Functions private elemental module function taylor_series_cos_000_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_000_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_000_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_000.html"},{"title":"taylor_series_cos_001 – taylor_series_fortran","text":"public interface taylor_series_cos_001 cos(x) approximation by a 1st order Taylor series Functions private elemental module function taylor_series_cos_001_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_001_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_001_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_001.html"},{"title":"taylor_series_cos_002 – taylor_series_fortran","text":"public interface taylor_series_cos_002 cos(x) approximation by a 2nd order Taylor series Functions private elemental module function taylor_series_cos_002_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_002_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_002_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_002.html"},{"title":"taylor_series_cos_003 – taylor_series_fortran","text":"public interface taylor_series_cos_003 cos(x) approximation by a 3rd order Taylor series Functions private elemental module function taylor_series_cos_003_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_003_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_003_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_003.html"},{"title":"taylor_series_cos_004 – taylor_series_fortran","text":"public interface taylor_series_cos_004 cos(x) approximation by a 4th order Taylor series Functions private elemental module function taylor_series_cos_004_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_004_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_004_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_004.html"},{"title":"taylor_series_cos_005 – taylor_series_fortran","text":"public interface taylor_series_cos_005 cos(x) approximation by a 5th order Taylor series Functions private elemental module function taylor_series_cos_005_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_005_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_005_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_005.html"},{"title":"taylor_series_cos_006 – taylor_series_fortran","text":"public interface taylor_series_cos_006 cos(x) approximation by a 6th order Taylor series Functions private elemental module function taylor_series_cos_006_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_006_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_006_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_006.html"},{"title":"taylor_series_cos_007 – taylor_series_fortran","text":"public interface taylor_series_cos_007 cos(x) approximation by a 7th order Taylor series Functions private elemental module function taylor_series_cos_007_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_007_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_007_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_007.html"},{"title":"taylor_series_cos_008 – taylor_series_fortran","text":"public interface taylor_series_cos_008 cos(x) approximation by a 8th order Taylor series Functions private elemental module function taylor_series_cos_008_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_008_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_008_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_008.html"},{"title":"taylor_series_cos_009 – taylor_series_fortran","text":"public interface taylor_series_cos_009 cos(x) approximation by a 9th order Taylor series Functions private elemental module function taylor_series_cos_009_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_009_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_009_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_009.html"},{"title":"taylor_series_cos_010 – taylor_series_fortran","text":"public interface taylor_series_cos_010 cos(x) approximation by a 10th order Taylor series Functions private elemental module function taylor_series_cos_010_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_010_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_010_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_010.html"},{"title":"taylor_series_cos_011 – taylor_series_fortran","text":"public interface taylor_series_cos_011 cos(x) approximation by a 11th order Taylor series Functions private elemental module function taylor_series_cos_011_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_011_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_011_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_011.html"},{"title":"taylor_series_cos_012 – taylor_series_fortran","text":"public interface taylor_series_cos_012 cos(x) approximation by a 12th order Taylor series Functions private elemental module function taylor_series_cos_012_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_012_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_012_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_012.html"},{"title":"taylor_series_cos_013 – taylor_series_fortran","text":"public interface taylor_series_cos_013 cos(x) approximation by a 13th order Taylor series Functions private elemental module function taylor_series_cos_013_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_013_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_013_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_013.html"},{"title":"taylor_series_cos_014 – taylor_series_fortran","text":"public interface taylor_series_cos_014 cos(x) approximation by a 14th order Taylor series Functions private elemental module function taylor_series_cos_014_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_014_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_014_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_014.html"},{"title":"taylor_series_cos_015 – taylor_series_fortran","text":"public interface taylor_series_cos_015 cos(x) approximation by a 15th order Taylor series Functions private elemental module function taylor_series_cos_015_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_015_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_015_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_015.html"},{"title":"taylor_series_cos_016 – taylor_series_fortran","text":"public interface taylor_series_cos_016 cos(x) approximation by a 16th order Taylor series Functions private elemental module function taylor_series_cos_016_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_016_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_016_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_016.html"},{"title":"taylor_series_cos_017 – taylor_series_fortran","text":"public interface taylor_series_cos_017 cos(x) approximation by a 17th order Taylor series Functions private elemental module function taylor_series_cos_017_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_017_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_017_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_017.html"},{"title":"taylor_series_cos_018 – taylor_series_fortran","text":"public interface taylor_series_cos_018 cos(x) approximation by a 18th order Taylor series Functions private elemental module function taylor_series_cos_018_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_018_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_018_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_018.html"},{"title":"taylor_series_cos_019 – taylor_series_fortran","text":"public interface taylor_series_cos_019 cos(x) approximation by a 19th order Taylor series Functions private elemental module function taylor_series_cos_019_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_019_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_019_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_019.html"},{"title":"taylor_series_cos_020 – taylor_series_fortran","text":"public interface taylor_series_cos_020 cos(x) approximation by a 20th order Taylor series Functions private elemental module function taylor_series_cos_020_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_020_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_020_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_020.html"},{"title":"taylor_series_cos_021 – taylor_series_fortran","text":"public interface taylor_series_cos_021 cos(x) approximation by a 21st order Taylor series Functions private elemental module function taylor_series_cos_021_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_021_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_021_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_021.html"},{"title":"taylor_series_cos_022 – taylor_series_fortran","text":"public interface taylor_series_cos_022 cos(x) approximation by a 22nd order Taylor series Functions private elemental module function taylor_series_cos_022_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_022_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_022_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_022.html"},{"title":"taylor_series_cos_023 – taylor_series_fortran","text":"public interface taylor_series_cos_023 cos(x) approximation by a 23rd order Taylor series Functions private elemental module function taylor_series_cos_023_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_023_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_023_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_023.html"},{"title":"taylor_series_cos_024 – taylor_series_fortran","text":"public interface taylor_series_cos_024 cos(x) approximation by a 24th order Taylor series Functions private elemental module function taylor_series_cos_024_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_024_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_024_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_024.html"},{"title":"taylor_series_cos_025 – taylor_series_fortran","text":"public interface taylor_series_cos_025 cos(x) approximation by a 25th order Taylor series Functions private elemental module function taylor_series_cos_025_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_025_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_025_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_025.html"},{"title":"taylor_series_cos_026 – taylor_series_fortran","text":"public interface taylor_series_cos_026 cos(x) approximation by a 26th order Taylor series Functions private elemental module function taylor_series_cos_026_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_026_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_026_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_026.html"},{"title":"taylor_series_cos_027 – taylor_series_fortran","text":"public interface taylor_series_cos_027 cos(x) approximation by a 27th order Taylor series Functions private elemental module function taylor_series_cos_027_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_027_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_027_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_027.html"},{"title":"taylor_series_cos_028 – taylor_series_fortran","text":"public interface taylor_series_cos_028 cos(x) approximation by a 28th order Taylor series Functions private elemental module function taylor_series_cos_028_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_028_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_028_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_028.html"},{"title":"taylor_series_cos_029 – taylor_series_fortran","text":"public interface taylor_series_cos_029 cos(x) approximation by a 29th order Taylor series Functions private elemental module function taylor_series_cos_029_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_029_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_029_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_029.html"},{"title":"taylor_series_cos_030 – taylor_series_fortran","text":"public interface taylor_series_cos_030 cos(x) approximation by a 30th order Taylor series Functions private elemental module function taylor_series_cos_030_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_030_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_030_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_030.html"},{"title":"taylor_series_cos_031 – taylor_series_fortran","text":"public interface taylor_series_cos_031 cos(x) approximation by a 31st order Taylor series Functions private elemental module function taylor_series_cos_031_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_031_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_031_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_031.html"},{"title":"taylor_series_cos_032 – taylor_series_fortran","text":"public interface taylor_series_cos_032 cos(x) approximation by a 32nd order Taylor series Functions private elemental module function taylor_series_cos_032_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_032_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_032_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_032.html"},{"title":"taylor_series_cos_033 – taylor_series_fortran","text":"public interface taylor_series_cos_033 cos(x) approximation by a 33rd order Taylor series Functions private elemental module function taylor_series_cos_033_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_033_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_033_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_033.html"},{"title":"taylor_series_cos_034 – taylor_series_fortran","text":"public interface taylor_series_cos_034 cos(x) approximation by a 34th order Taylor series Functions private elemental module function taylor_series_cos_034_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_034_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_034_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_034.html"},{"title":"taylor_series_cos_035 – taylor_series_fortran","text":"public interface taylor_series_cos_035 cos(x) approximation by a 35th order Taylor series Functions private elemental module function taylor_series_cos_035_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_035_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_035_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_035.html"},{"title":"taylor_series_cos_036 – taylor_series_fortran","text":"public interface taylor_series_cos_036 cos(x) approximation by a 36th order Taylor series Functions private elemental module function taylor_series_cos_036_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_036_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_036_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_036.html"},{"title":"taylor_series_cos_037 – taylor_series_fortran","text":"public interface taylor_series_cos_037 cos(x) approximation by a 37th order Taylor series Functions private elemental module function taylor_series_cos_037_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_037_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_037_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_037.html"},{"title":"taylor_series_cos_038 – taylor_series_fortran","text":"public interface taylor_series_cos_038 cos(x) approximation by a 38th order Taylor series Functions private elemental module function taylor_series_cos_038_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_038_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_038_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_038.html"},{"title":"taylor_series_cos_039 – taylor_series_fortran","text":"public interface taylor_series_cos_039 cos(x) approximation by a 39th order Taylor series Functions private elemental module function taylor_series_cos_039_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_039_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_039.html"},{"title":"taylor_series_cos_040 – taylor_series_fortran","text":"public interface taylor_series_cos_040 cos(x) approximation by a 40th order Taylor series Functions private elemental module function taylor_series_cos_040_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_040_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_040.html"},{"title":"taylor_series_cos_041 – taylor_series_fortran","text":"public interface taylor_series_cos_041 cos(x) approximation by a 41st order Taylor series Functions private elemental module function taylor_series_cos_041_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_041_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_041.html"},{"title":"taylor_series_cos_042 – taylor_series_fortran","text":"public interface taylor_series_cos_042 cos(x) approximation by a 42nd order Taylor series Functions private elemental module function taylor_series_cos_042_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_042_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_042.html"},{"title":"taylor_series_cos_043 – taylor_series_fortran","text":"public interface taylor_series_cos_043 cos(x) approximation by a 43rd order Taylor series Functions private elemental module function taylor_series_cos_043_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_043_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_043.html"},{"title":"taylor_series_cos_044 – taylor_series_fortran","text":"public interface taylor_series_cos_044 cos(x) approximation by a 44th order Taylor series Functions private elemental module function taylor_series_cos_044_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_044_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_044.html"},{"title":"taylor_series_cos_045 – taylor_series_fortran","text":"public interface taylor_series_cos_045 cos(x) approximation by a 45th order Taylor series Functions private elemental module function taylor_series_cos_045_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_045_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_045.html"},{"title":"taylor_series_cos_046 – taylor_series_fortran","text":"public interface taylor_series_cos_046 cos(x) approximation by a 46th order Taylor series Functions private elemental module function taylor_series_cos_046_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_046_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_046.html"},{"title":"taylor_series_cos_047 – taylor_series_fortran","text":"public interface taylor_series_cos_047 cos(x) approximation by a 47th order Taylor series Functions private elemental module function taylor_series_cos_047_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_047_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_047.html"},{"title":"taylor_series_cos_048 – taylor_series_fortran","text":"public interface taylor_series_cos_048 cos(x) approximation by a 48th order Taylor series Functions private elemental module function taylor_series_cos_048_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_048_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_048.html"},{"title":"taylor_series_cos_049 – taylor_series_fortran","text":"public interface taylor_series_cos_049 cos(x) approximation by a 49th order Taylor series Functions private elemental module function taylor_series_cos_049_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_049_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_049.html"},{"title":"taylor_series_cos_050 – taylor_series_fortran","text":"public interface taylor_series_cos_050 cos(x) approximation by a 50th order Taylor series Functions private elemental module function taylor_series_cos_050_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_050_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_050.html"},{"title":"taylor_series_cos_051 – taylor_series_fortran","text":"public interface taylor_series_cos_051 cos(x) approximation by a 51st order Taylor series Functions private elemental module function taylor_series_cos_051_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_051_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_051.html"},{"title":"taylor_series_cos_052 – taylor_series_fortran","text":"public interface taylor_series_cos_052 cos(x) approximation by a 52nd order Taylor series Functions private elemental module function taylor_series_cos_052_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_052_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_052.html"},{"title":"taylor_series_cos_053 – taylor_series_fortran","text":"public interface taylor_series_cos_053 cos(x) approximation by a 53rd order Taylor series Functions private elemental module function taylor_series_cos_053_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_053_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_053.html"},{"title":"taylor_series_cos_054 – taylor_series_fortran","text":"public interface taylor_series_cos_054 cos(x) approximation by a 54th order Taylor series Functions private elemental module function taylor_series_cos_054_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_054_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_054.html"},{"title":"taylor_series_cos_055 – taylor_series_fortran","text":"public interface taylor_series_cos_055 cos(x) approximation by a 55th order Taylor series Functions private elemental module function taylor_series_cos_055_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_055_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_055.html"},{"title":"taylor_series_cos_056 – taylor_series_fortran","text":"public interface taylor_series_cos_056 cos(x) approximation by a 56th order Taylor series Functions private elemental module function taylor_series_cos_056_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_056_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_056.html"},{"title":"taylor_series_cos_057 – taylor_series_fortran","text":"public interface taylor_series_cos_057 cos(x) approximation by a 57th order Taylor series Functions private elemental module function taylor_series_cos_057_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_057_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_057.html"},{"title":"taylor_series_cos_058 – taylor_series_fortran","text":"public interface taylor_series_cos_058 cos(x) approximation by a 58th order Taylor series Functions private elemental module function taylor_series_cos_058_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_058_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_058.html"},{"title":"taylor_series_cos_059 – taylor_series_fortran","text":"public interface taylor_series_cos_059 cos(x) approximation by a 59th order Taylor series Functions private elemental module function taylor_series_cos_059_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_059_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_059.html"},{"title":"taylor_series_cos_060 – taylor_series_fortran","text":"public interface taylor_series_cos_060 cos(x) approximation by a 60th order Taylor series Functions private elemental module function taylor_series_cos_060_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_060_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_060.html"},{"title":"taylor_series_cos_061 – taylor_series_fortran","text":"public interface taylor_series_cos_061 cos(x) approximation by a 61st order Taylor series Functions private elemental module function taylor_series_cos_061_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_061_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_061.html"},{"title":"taylor_series_cos_062 – taylor_series_fortran","text":"public interface taylor_series_cos_062 cos(x) approximation by a 62nd order Taylor series Functions private elemental module function taylor_series_cos_062_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_062_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_062.html"},{"title":"taylor_series_cos_063 – taylor_series_fortran","text":"public interface taylor_series_cos_063 cos(x) approximation by a 63rd order Taylor series Functions private elemental module function taylor_series_cos_063_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_063_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_063.html"},{"title":"taylor_series_cos_064 – taylor_series_fortran","text":"public interface taylor_series_cos_064 cos(x) approximation by a 64th order Taylor series Functions private elemental module function taylor_series_cos_064_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_064_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_064.html"},{"title":"taylor_series_cos_065 – taylor_series_fortran","text":"public interface taylor_series_cos_065 cos(x) approximation by a 65th order Taylor series Functions private elemental module function taylor_series_cos_065_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_065_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_065.html"},{"title":"taylor_series_cos_066 – taylor_series_fortran","text":"public interface taylor_series_cos_066 cos(x) approximation by a 66th order Taylor series Functions private elemental module function taylor_series_cos_066_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_066_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_066.html"},{"title":"taylor_series_cos_067 – taylor_series_fortran","text":"public interface taylor_series_cos_067 cos(x) approximation by a 67th order Taylor series Functions private elemental module function taylor_series_cos_067_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_067_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_067.html"},{"title":"taylor_series_cos_068 – taylor_series_fortran","text":"public interface taylor_series_cos_068 cos(x) approximation by a 68th order Taylor series Functions private elemental module function taylor_series_cos_068_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_068_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_068.html"},{"title":"taylor_series_cos_069 – taylor_series_fortran","text":"public interface taylor_series_cos_069 cos(x) approximation by a 69th order Taylor series Functions private elemental module function taylor_series_cos_069_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_069_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_069.html"},{"title":"taylor_series_cos_070 – taylor_series_fortran","text":"public interface taylor_series_cos_070 cos(x) approximation by a 70th order Taylor series Functions private elemental module function taylor_series_cos_070_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_070_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_070.html"},{"title":"taylor_series_cos_071 – taylor_series_fortran","text":"public interface taylor_series_cos_071 cos(x) approximation by a 71st order Taylor series Functions private elemental module function taylor_series_cos_071_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_071_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_071.html"},{"title":"taylor_series_cos_072 – taylor_series_fortran","text":"public interface taylor_series_cos_072 cos(x) approximation by a 72nd order Taylor series Functions private elemental module function taylor_series_cos_072_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_072_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_072.html"},{"title":"taylor_series_cos_073 – taylor_series_fortran","text":"public interface taylor_series_cos_073 cos(x) approximation by a 73rd order Taylor series Functions private elemental module function taylor_series_cos_073_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_073_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_073.html"},{"title":"taylor_series_cos_074 – taylor_series_fortran","text":"public interface taylor_series_cos_074 cos(x) approximation by a 74th order Taylor series Functions private elemental module function taylor_series_cos_074_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_074_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_074.html"},{"title":"taylor_series_cos_075 – taylor_series_fortran","text":"public interface taylor_series_cos_075 cos(x) approximation by a 75th order Taylor series Functions private elemental module function taylor_series_cos_075_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_075_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_075.html"},{"title":"taylor_series_cos_076 – taylor_series_fortran","text":"public interface taylor_series_cos_076 cos(x) approximation by a 76th order Taylor series Functions private elemental module function taylor_series_cos_076_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_076_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_076.html"},{"title":"taylor_series_cos_077 – taylor_series_fortran","text":"public interface taylor_series_cos_077 cos(x) approximation by a 77th order Taylor series Functions private elemental module function taylor_series_cos_077_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_077_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_077.html"},{"title":"taylor_series_cos_078 – taylor_series_fortran","text":"public interface taylor_series_cos_078 cos(x) approximation by a 78th order Taylor series Functions private elemental module function taylor_series_cos_078_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_078_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_078.html"},{"title":"taylor_series_cos_079 – taylor_series_fortran","text":"public interface taylor_series_cos_079 cos(x) approximation by a 79th order Taylor series Functions private elemental module function taylor_series_cos_079_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_079_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_079.html"},{"title":"taylor_series_cos_080 – taylor_series_fortran","text":"public interface taylor_series_cos_080 cos(x) approximation by a 80th order Taylor series Functions private elemental module function taylor_series_cos_080_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_080_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_080.html"},{"title":"taylor_series_cos_081 – taylor_series_fortran","text":"public interface taylor_series_cos_081 cos(x) approximation by a 81st order Taylor series Functions private elemental module function taylor_series_cos_081_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_081_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_081.html"},{"title":"taylor_series_cos_082 – taylor_series_fortran","text":"public interface taylor_series_cos_082 cos(x) approximation by a 82nd order Taylor series Functions private elemental module function taylor_series_cos_082_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_082_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_082.html"},{"title":"taylor_series_cos_083 – taylor_series_fortran","text":"public interface taylor_series_cos_083 cos(x) approximation by a 83rd order Taylor series Functions private elemental module function taylor_series_cos_083_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_083_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_083.html"},{"title":"taylor_series_cos_084 – taylor_series_fortran","text":"public interface taylor_series_cos_084 cos(x) approximation by a 84th order Taylor series Functions private elemental module function taylor_series_cos_084_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_084_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_084.html"},{"title":"taylor_series_cos_085 – taylor_series_fortran","text":"public interface taylor_series_cos_085 cos(x) approximation by a 85th order Taylor series Functions private elemental module function taylor_series_cos_085_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_085_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_085.html"},{"title":"taylor_series_cos_086 – taylor_series_fortran","text":"public interface taylor_series_cos_086 cos(x) approximation by a 86th order Taylor series Functions private elemental module function taylor_series_cos_086_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_086_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_086.html"},{"title":"taylor_series_cos_087 – taylor_series_fortran","text":"public interface taylor_series_cos_087 cos(x) approximation by a 87th order Taylor series Functions private elemental module function taylor_series_cos_087_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_087_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_087.html"},{"title":"taylor_series_cos_088 – taylor_series_fortran","text":"public interface taylor_series_cos_088 cos(x) approximation by a 88th order Taylor series Functions private elemental module function taylor_series_cos_088_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_088_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_088.html"},{"title":"taylor_series_cos_089 – taylor_series_fortran","text":"public interface taylor_series_cos_089 cos(x) approximation by a 89th order Taylor series Functions private elemental module function taylor_series_cos_089_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_089_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_089.html"},{"title":"taylor_series_cos_090 – taylor_series_fortran","text":"public interface taylor_series_cos_090 cos(x) approximation by a 90th order Taylor series Functions private elemental module function taylor_series_cos_090_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_090_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_090.html"},{"title":"taylor_series_cos_091 – taylor_series_fortran","text":"public interface taylor_series_cos_091 cos(x) approximation by a 91st order Taylor series Functions private elemental module function taylor_series_cos_091_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_091_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_091.html"},{"title":"taylor_series_cos_092 – taylor_series_fortran","text":"public interface taylor_series_cos_092 cos(x) approximation by a 92nd order Taylor series Functions private elemental module function taylor_series_cos_092_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_092_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_092.html"},{"title":"taylor_series_cos_093 – taylor_series_fortran","text":"public interface taylor_series_cos_093 cos(x) approximation by a 93rd order Taylor series Functions private elemental module function taylor_series_cos_093_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_093_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_093.html"},{"title":"taylor_series_cos_094 – taylor_series_fortran","text":"public interface taylor_series_cos_094 cos(x) approximation by a 94th order Taylor series Functions private elemental module function taylor_series_cos_094_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_094_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_094.html"},{"title":"taylor_series_cos_095 – taylor_series_fortran","text":"public interface taylor_series_cos_095 cos(x) approximation by a 95th order Taylor series Functions private elemental module function taylor_series_cos_095_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_095_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_095.html"},{"title":"taylor_series_cos_096 – taylor_series_fortran","text":"public interface taylor_series_cos_096 cos(x) approximation by a 96th order Taylor series Functions private elemental module function taylor_series_cos_096_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_096_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_096.html"},{"title":"taylor_series_cos_097 – taylor_series_fortran","text":"public interface taylor_series_cos_097 cos(x) approximation by a 97th order Taylor series Functions private elemental module function taylor_series_cos_097_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_097_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_097.html"},{"title":"taylor_series_cos_098 – taylor_series_fortran","text":"public interface taylor_series_cos_098 cos(x) approximation by a 98th order Taylor series Functions private elemental module function taylor_series_cos_098_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_098_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_098.html"},{"title":"taylor_series_cos_099 – taylor_series_fortran","text":"public interface taylor_series_cos_099 cos(x) approximation by a 99th order Taylor series Functions private elemental module function taylor_series_cos_099_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_099_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_099.html"},{"title":"taylor_series_cos_100 – taylor_series_fortran","text":"public interface taylor_series_cos_100 cos(x) approximation by a 100th order Taylor series Functions private elemental module function taylor_series_cos_100_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_100_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_100.html"},{"title":"taylor_series_cos_101 – taylor_series_fortran","text":"public interface taylor_series_cos_101 cos(x) approximation by a 101st order Taylor series Functions private elemental module function taylor_series_cos_101_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_101_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_101.html"},{"title":"taylor_series_cos_102 – taylor_series_fortran","text":"public interface taylor_series_cos_102 cos(x) approximation by a 102nd order Taylor series Functions private elemental module function taylor_series_cos_102_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_102_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_102.html"},{"title":"taylor_series_cos_103 – taylor_series_fortran","text":"public interface taylor_series_cos_103 cos(x) approximation by a 103rd order Taylor series Functions private elemental module function taylor_series_cos_103_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_103_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_103.html"},{"title":"taylor_series_cos_104 – taylor_series_fortran","text":"public interface taylor_series_cos_104 cos(x) approximation by a 104th order Taylor series Functions private elemental module function taylor_series_cos_104_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_104_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_104.html"},{"title":"taylor_series_cos_105 – taylor_series_fortran","text":"public interface taylor_series_cos_105 cos(x) approximation by a 105th order Taylor series Functions private elemental module function taylor_series_cos_105_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_105_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_105.html"},{"title":"taylor_series_cos_106 – taylor_series_fortran","text":"public interface taylor_series_cos_106 cos(x) approximation by a 106th order Taylor series Functions private elemental module function taylor_series_cos_106_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_106_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_106.html"},{"title":"taylor_series_cos_107 – taylor_series_fortran","text":"public interface taylor_series_cos_107 cos(x) approximation by a 107th order Taylor series Functions private elemental module function taylor_series_cos_107_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_107_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_107.html"},{"title":"taylor_series_cos_108 – taylor_series_fortran","text":"public interface taylor_series_cos_108 cos(x) approximation by a 108th order Taylor series Functions private elemental module function taylor_series_cos_108_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_108_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_108.html"},{"title":"taylor_series_cos_109 – taylor_series_fortran","text":"public interface taylor_series_cos_109 cos(x) approximation by a 109th order Taylor series Functions private elemental module function taylor_series_cos_109_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_109_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_109.html"},{"title":"taylor_series_cos_110 – taylor_series_fortran","text":"public interface taylor_series_cos_110 cos(x) approximation by a 110th order Taylor series Functions private elemental module function taylor_series_cos_110_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_110_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_110.html"},{"title":"taylor_series_cos_111 – taylor_series_fortran","text":"public interface taylor_series_cos_111 cos(x) approximation by a 111th order Taylor series Functions private elemental module function taylor_series_cos_111_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_111_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_111.html"},{"title":"taylor_series_cos_112 – taylor_series_fortran","text":"public interface taylor_series_cos_112 cos(x) approximation by a 112th order Taylor series Functions private elemental module function taylor_series_cos_112_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_112_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_112.html"},{"title":"taylor_series_cos_113 – taylor_series_fortran","text":"public interface taylor_series_cos_113 cos(x) approximation by a 113th order Taylor series Functions private elemental module function taylor_series_cos_113_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_113_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_113.html"},{"title":"taylor_series_cos_114 – taylor_series_fortran","text":"public interface taylor_series_cos_114 cos(x) approximation by a 114th order Taylor series Functions private elemental module function taylor_series_cos_114_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_114_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_114.html"},{"title":"taylor_series_cos_115 – taylor_series_fortran","text":"public interface taylor_series_cos_115 cos(x) approximation by a 115th order Taylor series Functions private elemental module function taylor_series_cos_115_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_115_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_115.html"},{"title":"taylor_series_cos_116 – taylor_series_fortran","text":"public interface taylor_series_cos_116 cos(x) approximation by a 116th order Taylor series Functions private elemental module function taylor_series_cos_116_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_116_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_116.html"},{"title":"taylor_series_cos_117 – taylor_series_fortran","text":"public interface taylor_series_cos_117 cos(x) approximation by a 117th order Taylor series Functions private elemental module function taylor_series_cos_117_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_117_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_117.html"},{"title":"taylor_series_cos_118 – taylor_series_fortran","text":"public interface taylor_series_cos_118 cos(x) approximation by a 118th order Taylor series Functions private elemental module function taylor_series_cos_118_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_118_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_118.html"},{"title":"taylor_series_cos_119 – taylor_series_fortran","text":"public interface taylor_series_cos_119 cos(x) approximation by a 119th order Taylor series Functions private elemental module function taylor_series_cos_119_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_119_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_119.html"},{"title":"taylor_series_cos_120 – taylor_series_fortran","text":"public interface taylor_series_cos_120 cos(x) approximation by a 120th order Taylor series Functions private elemental module function taylor_series_cos_120_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_120_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_120.html"},{"title":"taylor_series_cos_121 – taylor_series_fortran","text":"public interface taylor_series_cos_121 cos(x) approximation by a 121st order Taylor series Functions private elemental module function taylor_series_cos_121_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_121_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_121.html"},{"title":"taylor_series_cos_122 – taylor_series_fortran","text":"public interface taylor_series_cos_122 cos(x) approximation by a 122nd order Taylor series Functions private elemental module function taylor_series_cos_122_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_122_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_122.html"},{"title":"taylor_series_cos_123 – taylor_series_fortran","text":"public interface taylor_series_cos_123 cos(x) approximation by a 123rd order Taylor series Functions private elemental module function taylor_series_cos_123_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_123_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_123.html"},{"title":"taylor_series_cos_124 – taylor_series_fortran","text":"public interface taylor_series_cos_124 cos(x) approximation by a 124th order Taylor series Functions private elemental module function taylor_series_cos_124_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_124_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_124.html"},{"title":"taylor_series_cos_125 – taylor_series_fortran","text":"public interface taylor_series_cos_125 cos(x) approximation by a 125th order Taylor series Functions private elemental module function taylor_series_cos_125_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_125_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_125.html"},{"title":"taylor_series_cos_126 – taylor_series_fortran","text":"public interface taylor_series_cos_126 cos(x) approximation by a 126th order Taylor series Functions private elemental module function taylor_series_cos_126_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_126_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_126.html"},{"title":"taylor_series_cos_127 – taylor_series_fortran","text":"public interface taylor_series_cos_127 cos(x) approximation by a 127th order Taylor series Functions private elemental module function taylor_series_cos_127_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_127_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_127.html"},{"title":"taylor_series_cos_128 – taylor_series_fortran","text":"public interface taylor_series_cos_128 cos(x) approximation by a 128th order Taylor series Functions private elemental module function taylor_series_cos_128_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_128_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_128.html"},{"title":"taylor_series_cos_129 – taylor_series_fortran","text":"public interface taylor_series_cos_129 cos(x) approximation by a 129th order Taylor series Functions private elemental module function taylor_series_cos_129_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_129_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_129.html"},{"title":"taylor_series_cos_130 – taylor_series_fortran","text":"public interface taylor_series_cos_130 cos(x) approximation by a 130th order Taylor series Functions private elemental module function taylor_series_cos_130_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_130_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_130.html"},{"title":"taylor_series_cos_131 – taylor_series_fortran","text":"public interface taylor_series_cos_131 cos(x) approximation by a 131st order Taylor series Functions private elemental module function taylor_series_cos_131_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_131_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_131.html"},{"title":"taylor_series_cos_132 – taylor_series_fortran","text":"public interface taylor_series_cos_132 cos(x) approximation by a 132nd order Taylor series Functions private elemental module function taylor_series_cos_132_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_132_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_132.html"},{"title":"taylor_series_cos_133 – taylor_series_fortran","text":"public interface taylor_series_cos_133 cos(x) approximation by a 133rd order Taylor series Functions private elemental module function taylor_series_cos_133_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_133_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_133.html"},{"title":"taylor_series_cos_134 – taylor_series_fortran","text":"public interface taylor_series_cos_134 cos(x) approximation by a 134th order Taylor series Functions private elemental module function taylor_series_cos_134_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_134_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_134.html"},{"title":"taylor_series_cos_135 – taylor_series_fortran","text":"public interface taylor_series_cos_135 cos(x) approximation by a 135th order Taylor series Functions private elemental module function taylor_series_cos_135_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_135_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_135.html"},{"title":"taylor_series_cos_136 – taylor_series_fortran","text":"public interface taylor_series_cos_136 cos(x) approximation by a 136th order Taylor series Functions private elemental module function taylor_series_cos_136_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_136_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_136.html"},{"title":"taylor_series_cos_137 – taylor_series_fortran","text":"public interface taylor_series_cos_137 cos(x) approximation by a 137th order Taylor series Functions private elemental module function taylor_series_cos_137_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_137_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_137.html"},{"title":"taylor_series_cos_138 – taylor_series_fortran","text":"public interface taylor_series_cos_138 cos(x) approximation by a 138th order Taylor series Functions private elemental module function taylor_series_cos_138_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_138_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_138.html"},{"title":"taylor_series_cos_139 – taylor_series_fortran","text":"public interface taylor_series_cos_139 cos(x) approximation by a 139th order Taylor series Functions private elemental module function taylor_series_cos_139_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_139_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_139.html"},{"title":"taylor_series_cos_140 – taylor_series_fortran","text":"public interface taylor_series_cos_140 cos(x) approximation by a 140th order Taylor series Functions private elemental module function taylor_series_cos_140_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_140_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_140.html"},{"title":"taylor_series_cos_141 – taylor_series_fortran","text":"public interface taylor_series_cos_141 cos(x) approximation by a 141st order Taylor series Functions private elemental module function taylor_series_cos_141_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_141_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_141.html"},{"title":"taylor_series_cos_142 – taylor_series_fortran","text":"public interface taylor_series_cos_142 cos(x) approximation by a 142nd order Taylor series Functions private elemental module function taylor_series_cos_142_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_142_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_142.html"},{"title":"taylor_series_cos_143 – taylor_series_fortran","text":"public interface taylor_series_cos_143 cos(x) approximation by a 143rd order Taylor series Functions private elemental module function taylor_series_cos_143_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_143_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_143.html"},{"title":"taylor_series_cos_144 – taylor_series_fortran","text":"public interface taylor_series_cos_144 cos(x) approximation by a 144th order Taylor series Functions private elemental module function taylor_series_cos_144_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_144_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_144.html"},{"title":"taylor_series_cos_145 – taylor_series_fortran","text":"public interface taylor_series_cos_145 cos(x) approximation by a 145th order Taylor series Functions private elemental module function taylor_series_cos_145_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_145_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_145.html"},{"title":"taylor_series_cos_146 – taylor_series_fortran","text":"public interface taylor_series_cos_146 cos(x) approximation by a 146th order Taylor series Functions private elemental module function taylor_series_cos_146_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_146_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_146.html"},{"title":"taylor_series_cos_147 – taylor_series_fortran","text":"public interface taylor_series_cos_147 cos(x) approximation by a 147th order Taylor series Functions private elemental module function taylor_series_cos_147_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_147_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_147.html"},{"title":"taylor_series_cos_148 – taylor_series_fortran","text":"public interface taylor_series_cos_148 cos(x) approximation by a 148th order Taylor series Functions private elemental module function taylor_series_cos_148_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_148_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_148.html"},{"title":"taylor_series_cos_149 – taylor_series_fortran","text":"public interface taylor_series_cos_149 cos(x) approximation by a 149th order Taylor series Functions private elemental module function taylor_series_cos_149_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_149_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_149.html"},{"title":"taylor_series_cos_150 – taylor_series_fortran","text":"public interface taylor_series_cos_150 cos(x) approximation by a 150th order Taylor series Functions private elemental module function taylor_series_cos_150_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_150_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_150.html"},{"title":"taylor_series_cos_151 – taylor_series_fortran","text":"public interface taylor_series_cos_151 cos(x) approximation by a 151st order Taylor series Functions private elemental module function taylor_series_cos_151_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_151_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_151.html"},{"title":"taylor_series_cos_152 – taylor_series_fortran","text":"public interface taylor_series_cos_152 cos(x) approximation by a 152nd order Taylor series Functions private elemental module function taylor_series_cos_152_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_152_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_152.html"},{"title":"taylor_series_cos_153 – taylor_series_fortran","text":"public interface taylor_series_cos_153 cos(x) approximation by a 153rd order Taylor series Functions private elemental module function taylor_series_cos_153_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_153_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_153.html"},{"title":"taylor_series_cos_154 – taylor_series_fortran","text":"public interface taylor_series_cos_154 cos(x) approximation by a 154th order Taylor series Functions private elemental module function taylor_series_cos_154_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_154_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_154.html"},{"title":"taylor_series_cos_155 – taylor_series_fortran","text":"public interface taylor_series_cos_155 cos(x) approximation by a 155th order Taylor series Functions private elemental module function taylor_series_cos_155_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_155_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_155.html"},{"title":"taylor_series_cos_156 – taylor_series_fortran","text":"public interface taylor_series_cos_156 cos(x) approximation by a 156th order Taylor series Functions private elemental module function taylor_series_cos_156_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_156_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_156.html"},{"title":"taylor_series_cos_157 – taylor_series_fortran","text":"public interface taylor_series_cos_157 cos(x) approximation by a 157th order Taylor series Functions private elemental module function taylor_series_cos_157_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_157_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_157.html"},{"title":"taylor_series_cos_158 – taylor_series_fortran","text":"public interface taylor_series_cos_158 cos(x) approximation by a 158th order Taylor series Functions private elemental module function taylor_series_cos_158_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_158_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_158.html"},{"title":"taylor_series_cos_159 – taylor_series_fortran","text":"public interface taylor_series_cos_159 cos(x) approximation by a 159th order Taylor series Functions private elemental module function taylor_series_cos_159_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_159_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_159.html"},{"title":"taylor_series_cos_160 – taylor_series_fortran","text":"public interface taylor_series_cos_160 cos(x) approximation by a 160th order Taylor series Functions private elemental module function taylor_series_cos_160_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_160_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_160.html"},{"title":"taylor_series_cos_161 – taylor_series_fortran","text":"public interface taylor_series_cos_161 cos(x) approximation by a 161st order Taylor series Functions private elemental module function taylor_series_cos_161_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_161_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_161.html"},{"title":"taylor_series_cos_162 – taylor_series_fortran","text":"public interface taylor_series_cos_162 cos(x) approximation by a 162nd order Taylor series Functions private elemental module function taylor_series_cos_162_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_162_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_162.html"},{"title":"taylor_series_cos_163 – taylor_series_fortran","text":"public interface taylor_series_cos_163 cos(x) approximation by a 163rd order Taylor series Functions private elemental module function taylor_series_cos_163_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_163_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_163.html"},{"title":"taylor_series_cos_164 – taylor_series_fortran","text":"public interface taylor_series_cos_164 cos(x) approximation by a 164th order Taylor series Functions private elemental module function taylor_series_cos_164_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_164_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_164.html"},{"title":"taylor_series_cos_165 – taylor_series_fortran","text":"public interface taylor_series_cos_165 cos(x) approximation by a 165th order Taylor series Functions private elemental module function taylor_series_cos_165_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_165_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_165.html"},{"title":"taylor_series_cos_166 – taylor_series_fortran","text":"public interface taylor_series_cos_166 cos(x) approximation by a 166th order Taylor series Functions private elemental module function taylor_series_cos_166_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_166_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_166.html"},{"title":"taylor_series_cos_167 – taylor_series_fortran","text":"public interface taylor_series_cos_167 cos(x) approximation by a 167th order Taylor series Functions private elemental module function taylor_series_cos_167_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_167_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_167.html"},{"title":"taylor_series_cos_168 – taylor_series_fortran","text":"public interface taylor_series_cos_168 cos(x) approximation by a 168th order Taylor series Functions private elemental module function taylor_series_cos_168_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_168_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_168.html"},{"title":"taylor_series_cos_169 – taylor_series_fortran","text":"public interface taylor_series_cos_169 cos(x) approximation by a 169th order Taylor series Functions private elemental module function taylor_series_cos_169_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_169_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_169.html"},{"title":"taylor_series_cos_170 – taylor_series_fortran","text":"public interface taylor_series_cos_170 cos(x) approximation by a 170th order Taylor series Functions private elemental module function taylor_series_cos_170_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_170_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_170.html"},{"title":"taylor_series_cos_171 – taylor_series_fortran","text":"public interface taylor_series_cos_171 cos(x) approximation by a 171st order Taylor series Functions private elemental module function taylor_series_cos_171_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_171_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_171.html"},{"title":"taylor_series_cos_172 – taylor_series_fortran","text":"public interface taylor_series_cos_172 cos(x) approximation by a 172nd order Taylor series Functions private elemental module function taylor_series_cos_172_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_172_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_172.html"},{"title":"taylor_series_cos_173 – taylor_series_fortran","text":"public interface taylor_series_cos_173 cos(x) approximation by a 173rd order Taylor series Functions private elemental module function taylor_series_cos_173_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_173_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_173.html"},{"title":"taylor_series_cos_174 – taylor_series_fortran","text":"public interface taylor_series_cos_174 cos(x) approximation by a 174th order Taylor series Functions private elemental module function taylor_series_cos_174_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_174_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_174.html"},{"title":"taylor_series_cos_175 – taylor_series_fortran","text":"public interface taylor_series_cos_175 cos(x) approximation by a 175th order Taylor series Functions private elemental module function taylor_series_cos_175_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_175_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_175.html"},{"title":"taylor_series_cos_176 – taylor_series_fortran","text":"public interface taylor_series_cos_176 cos(x) approximation by a 176th order Taylor series Functions private elemental module function taylor_series_cos_176_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_176_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_cos_176.html"},{"title":"taylor_series_exp_000 – taylor_series_fortran","text":"public interface taylor_series_exp_000 exp(x) approximation by a 0th order Taylor series Functions private elemental module function taylor_series_exp_000_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_000_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_000_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_000.html"},{"title":"taylor_series_exp_001 – taylor_series_fortran","text":"public interface taylor_series_exp_001 exp(x) approximation by a 1st order Taylor series Functions private elemental module function taylor_series_exp_001_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_001_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_001_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_001.html"},{"title":"taylor_series_exp_002 – taylor_series_fortran","text":"public interface taylor_series_exp_002 exp(x) approximation by a 2nd order Taylor series Functions private elemental module function taylor_series_exp_002_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_002_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_002_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_002.html"},{"title":"taylor_series_exp_003 – taylor_series_fortran","text":"public interface taylor_series_exp_003 exp(x) approximation by a 3rd order Taylor series Functions private elemental module function taylor_series_exp_003_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_003_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_003_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_003.html"},{"title":"taylor_series_exp_004 – taylor_series_fortran","text":"public interface taylor_series_exp_004 exp(x) approximation by a 4th order Taylor series Functions private elemental module function taylor_series_exp_004_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_004_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_004_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_004.html"},{"title":"taylor_series_exp_005 – taylor_series_fortran","text":"public interface taylor_series_exp_005 exp(x) approximation by a 5th order Taylor series Functions private elemental module function taylor_series_exp_005_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_005_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_005_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_005.html"},{"title":"taylor_series_exp_006 – taylor_series_fortran","text":"public interface taylor_series_exp_006 exp(x) approximation by a 6th order Taylor series Functions private elemental module function taylor_series_exp_006_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_006_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_006_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_006.html"},{"title":"taylor_series_exp_007 – taylor_series_fortran","text":"public interface taylor_series_exp_007 exp(x) approximation by a 7th order Taylor series Functions private elemental module function taylor_series_exp_007_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_007_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_007_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_007.html"},{"title":"taylor_series_exp_008 – taylor_series_fortran","text":"public interface taylor_series_exp_008 exp(x) approximation by a 8th order Taylor series Functions private elemental module function taylor_series_exp_008_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_008_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_008_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_008.html"},{"title":"taylor_series_exp_009 – taylor_series_fortran","text":"public interface taylor_series_exp_009 exp(x) approximation by a 9th order Taylor series Functions private elemental module function taylor_series_exp_009_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_009_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_009_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_009.html"},{"title":"taylor_series_exp_010 – taylor_series_fortran","text":"public interface taylor_series_exp_010 exp(x) approximation by a 10th order Taylor series Functions private elemental module function taylor_series_exp_010_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_010_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_010_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_010.html"},{"title":"taylor_series_exp_011 – taylor_series_fortran","text":"public interface taylor_series_exp_011 exp(x) approximation by a 11th order Taylor series Functions private elemental module function taylor_series_exp_011_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_011_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_011_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_011.html"},{"title":"taylor_series_exp_012 – taylor_series_fortran","text":"public interface taylor_series_exp_012 exp(x) approximation by a 12th order Taylor series Functions private elemental module function taylor_series_exp_012_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_012_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_012_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_012.html"},{"title":"taylor_series_exp_013 – taylor_series_fortran","text":"public interface taylor_series_exp_013 exp(x) approximation by a 13th order Taylor series Functions private elemental module function taylor_series_exp_013_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_013_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_013_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_013.html"},{"title":"taylor_series_exp_014 – taylor_series_fortran","text":"public interface taylor_series_exp_014 exp(x) approximation by a 14th order Taylor series Functions private elemental module function taylor_series_exp_014_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_014_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_014_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_014.html"},{"title":"taylor_series_exp_015 – taylor_series_fortran","text":"public interface taylor_series_exp_015 exp(x) approximation by a 15th order Taylor series Functions private elemental module function taylor_series_exp_015_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_015_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_015_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_015.html"},{"title":"taylor_series_exp_016 – taylor_series_fortran","text":"public interface taylor_series_exp_016 exp(x) approximation by a 16th order Taylor series Functions private elemental module function taylor_series_exp_016_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_016_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_016_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_016.html"},{"title":"taylor_series_exp_017 – taylor_series_fortran","text":"public interface taylor_series_exp_017 exp(x) approximation by a 17th order Taylor series Functions private elemental module function taylor_series_exp_017_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_017_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_017_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_017.html"},{"title":"taylor_series_exp_018 – taylor_series_fortran","text":"public interface taylor_series_exp_018 exp(x) approximation by a 18th order Taylor series Functions private elemental module function taylor_series_exp_018_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_018_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_018_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_018.html"},{"title":"taylor_series_exp_019 – taylor_series_fortran","text":"public interface taylor_series_exp_019 exp(x) approximation by a 19th order Taylor series Functions private elemental module function taylor_series_exp_019_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_019_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_019_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_019.html"},{"title":"taylor_series_exp_020 – taylor_series_fortran","text":"public interface taylor_series_exp_020 exp(x) approximation by a 20th order Taylor series Functions private elemental module function taylor_series_exp_020_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_020_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_020_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_020.html"},{"title":"taylor_series_exp_021 – taylor_series_fortran","text":"public interface taylor_series_exp_021 exp(x) approximation by a 21st order Taylor series Functions private elemental module function taylor_series_exp_021_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_021_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_021_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_021.html"},{"title":"taylor_series_exp_022 – taylor_series_fortran","text":"public interface taylor_series_exp_022 exp(x) approximation by a 22nd order Taylor series Functions private elemental module function taylor_series_exp_022_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_022_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_022_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_022.html"},{"title":"taylor_series_exp_023 – taylor_series_fortran","text":"public interface taylor_series_exp_023 exp(x) approximation by a 23rd order Taylor series Functions private elemental module function taylor_series_exp_023_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_023_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_023_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_023.html"},{"title":"taylor_series_exp_024 – taylor_series_fortran","text":"public interface taylor_series_exp_024 exp(x) approximation by a 24th order Taylor series Functions private elemental module function taylor_series_exp_024_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_024_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_024_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_024.html"},{"title":"taylor_series_exp_025 – taylor_series_fortran","text":"public interface taylor_series_exp_025 exp(x) approximation by a 25th order Taylor series Functions private elemental module function taylor_series_exp_025_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_025_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_025_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_025.html"},{"title":"taylor_series_exp_026 – taylor_series_fortran","text":"public interface taylor_series_exp_026 exp(x) approximation by a 26th order Taylor series Functions private elemental module function taylor_series_exp_026_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_026_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_026_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_026.html"},{"title":"taylor_series_exp_027 – taylor_series_fortran","text":"public interface taylor_series_exp_027 exp(x) approximation by a 27th order Taylor series Functions private elemental module function taylor_series_exp_027_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_027_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_027_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_027.html"},{"title":"taylor_series_exp_028 – taylor_series_fortran","text":"public interface taylor_series_exp_028 exp(x) approximation by a 28th order Taylor series Functions private elemental module function taylor_series_exp_028_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_028_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_028_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_028.html"},{"title":"taylor_series_exp_029 – taylor_series_fortran","text":"public interface taylor_series_exp_029 exp(x) approximation by a 29th order Taylor series Functions private elemental module function taylor_series_exp_029_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_029_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_029_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_029.html"},{"title":"taylor_series_exp_030 – taylor_series_fortran","text":"public interface taylor_series_exp_030 exp(x) approximation by a 30th order Taylor series Functions private elemental module function taylor_series_exp_030_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_030_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_030_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_030.html"},{"title":"taylor_series_exp_031 – taylor_series_fortran","text":"public interface taylor_series_exp_031 exp(x) approximation by a 31st order Taylor series Functions private elemental module function taylor_series_exp_031_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_031_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_031_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_031.html"},{"title":"taylor_series_exp_032 – taylor_series_fortran","text":"public interface taylor_series_exp_032 exp(x) approximation by a 32nd order Taylor series Functions private elemental module function taylor_series_exp_032_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_032_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_032_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_032.html"},{"title":"taylor_series_exp_033 – taylor_series_fortran","text":"public interface taylor_series_exp_033 exp(x) approximation by a 33rd order Taylor series Functions private elemental module function taylor_series_exp_033_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_033_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_033_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_033.html"},{"title":"taylor_series_exp_034 – taylor_series_fortran","text":"public interface taylor_series_exp_034 exp(x) approximation by a 34th order Taylor series Functions private elemental module function taylor_series_exp_034_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_034_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_034_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_034.html"},{"title":"taylor_series_exp_035 – taylor_series_fortran","text":"public interface taylor_series_exp_035 exp(x) approximation by a 35th order Taylor series Functions private elemental module function taylor_series_exp_035_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_035_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_035_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_035.html"},{"title":"taylor_series_exp_036 – taylor_series_fortran","text":"public interface taylor_series_exp_036 exp(x) approximation by a 36th order Taylor series Functions private elemental module function taylor_series_exp_036_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_036_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_036_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_036.html"},{"title":"taylor_series_exp_037 – taylor_series_fortran","text":"public interface taylor_series_exp_037 exp(x) approximation by a 37th order Taylor series Functions private elemental module function taylor_series_exp_037_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_037_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_037_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_037.html"},{"title":"taylor_series_exp_038 – taylor_series_fortran","text":"public interface taylor_series_exp_038 exp(x) approximation by a 38th order Taylor series Functions private elemental module function taylor_series_exp_038_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_038_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_038_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_038.html"},{"title":"taylor_series_exp_039 – taylor_series_fortran","text":"public interface taylor_series_exp_039 exp(x) approximation by a 39th order Taylor series Functions private elemental module function taylor_series_exp_039_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_039_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_039.html"},{"title":"taylor_series_exp_040 – taylor_series_fortran","text":"public interface taylor_series_exp_040 exp(x) approximation by a 40th order Taylor series Functions private elemental module function taylor_series_exp_040_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_040_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_040.html"},{"title":"taylor_series_exp_041 – taylor_series_fortran","text":"public interface taylor_series_exp_041 exp(x) approximation by a 41st order Taylor series Functions private elemental module function taylor_series_exp_041_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_041_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_041.html"},{"title":"taylor_series_exp_042 – taylor_series_fortran","text":"public interface taylor_series_exp_042 exp(x) approximation by a 42nd order Taylor series Functions private elemental module function taylor_series_exp_042_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_042_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_042.html"},{"title":"taylor_series_exp_043 – taylor_series_fortran","text":"public interface taylor_series_exp_043 exp(x) approximation by a 43rd order Taylor series Functions private elemental module function taylor_series_exp_043_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_043_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_043.html"},{"title":"taylor_series_exp_044 – taylor_series_fortran","text":"public interface taylor_series_exp_044 exp(x) approximation by a 44th order Taylor series Functions private elemental module function taylor_series_exp_044_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_044_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_044.html"},{"title":"taylor_series_exp_045 – taylor_series_fortran","text":"public interface taylor_series_exp_045 exp(x) approximation by a 45th order Taylor series Functions private elemental module function taylor_series_exp_045_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_045_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_045.html"},{"title":"taylor_series_exp_046 – taylor_series_fortran","text":"public interface taylor_series_exp_046 exp(x) approximation by a 46th order Taylor series Functions private elemental module function taylor_series_exp_046_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_046_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_046.html"},{"title":"taylor_series_exp_047 – taylor_series_fortran","text":"public interface taylor_series_exp_047 exp(x) approximation by a 47th order Taylor series Functions private elemental module function taylor_series_exp_047_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_047_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_047.html"},{"title":"taylor_series_exp_048 – taylor_series_fortran","text":"public interface taylor_series_exp_048 exp(x) approximation by a 48th order Taylor series Functions private elemental module function taylor_series_exp_048_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_048_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_048.html"},{"title":"taylor_series_exp_049 – taylor_series_fortran","text":"public interface taylor_series_exp_049 exp(x) approximation by a 49th order Taylor series Functions private elemental module function taylor_series_exp_049_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_049_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_049.html"},{"title":"taylor_series_exp_050 – taylor_series_fortran","text":"public interface taylor_series_exp_050 exp(x) approximation by a 50th order Taylor series Functions private elemental module function taylor_series_exp_050_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_050_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_050.html"},{"title":"taylor_series_exp_051 – taylor_series_fortran","text":"public interface taylor_series_exp_051 exp(x) approximation by a 51st order Taylor series Functions private elemental module function taylor_series_exp_051_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_051_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_051.html"},{"title":"taylor_series_exp_052 – taylor_series_fortran","text":"public interface taylor_series_exp_052 exp(x) approximation by a 52nd order Taylor series Functions private elemental module function taylor_series_exp_052_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_052_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_052.html"},{"title":"taylor_series_exp_053 – taylor_series_fortran","text":"public interface taylor_series_exp_053 exp(x) approximation by a 53rd order Taylor series Functions private elemental module function taylor_series_exp_053_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_053_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_053.html"},{"title":"taylor_series_exp_054 – taylor_series_fortran","text":"public interface taylor_series_exp_054 exp(x) approximation by a 54th order Taylor series Functions private elemental module function taylor_series_exp_054_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_054_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_054.html"},{"title":"taylor_series_exp_055 – taylor_series_fortran","text":"public interface taylor_series_exp_055 exp(x) approximation by a 55th order Taylor series Functions private elemental module function taylor_series_exp_055_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_055_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_055.html"},{"title":"taylor_series_exp_056 – taylor_series_fortran","text":"public interface taylor_series_exp_056 exp(x) approximation by a 56th order Taylor series Functions private elemental module function taylor_series_exp_056_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_056_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_056.html"},{"title":"taylor_series_exp_057 – taylor_series_fortran","text":"public interface taylor_series_exp_057 exp(x) approximation by a 57th order Taylor series Functions private elemental module function taylor_series_exp_057_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_057_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_057.html"},{"title":"taylor_series_exp_058 – taylor_series_fortran","text":"public interface taylor_series_exp_058 exp(x) approximation by a 58th order Taylor series Functions private elemental module function taylor_series_exp_058_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_058_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_058.html"},{"title":"taylor_series_exp_059 – taylor_series_fortran","text":"public interface taylor_series_exp_059 exp(x) approximation by a 59th order Taylor series Functions private elemental module function taylor_series_exp_059_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_059_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_059.html"},{"title":"taylor_series_exp_060 – taylor_series_fortran","text":"public interface taylor_series_exp_060 exp(x) approximation by a 60th order Taylor series Functions private elemental module function taylor_series_exp_060_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_060_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_060.html"},{"title":"taylor_series_exp_061 – taylor_series_fortran","text":"public interface taylor_series_exp_061 exp(x) approximation by a 61st order Taylor series Functions private elemental module function taylor_series_exp_061_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_061_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_061.html"},{"title":"taylor_series_exp_062 – taylor_series_fortran","text":"public interface taylor_series_exp_062 exp(x) approximation by a 62nd order Taylor series Functions private elemental module function taylor_series_exp_062_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_062_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_062.html"},{"title":"taylor_series_exp_063 – taylor_series_fortran","text":"public interface taylor_series_exp_063 exp(x) approximation by a 63rd order Taylor series Functions private elemental module function taylor_series_exp_063_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_063_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_063.html"},{"title":"taylor_series_exp_064 – taylor_series_fortran","text":"public interface taylor_series_exp_064 exp(x) approximation by a 64th order Taylor series Functions private elemental module function taylor_series_exp_064_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_064_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_064.html"},{"title":"taylor_series_exp_065 – taylor_series_fortran","text":"public interface taylor_series_exp_065 exp(x) approximation by a 65th order Taylor series Functions private elemental module function taylor_series_exp_065_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_065_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_065.html"},{"title":"taylor_series_exp_066 – taylor_series_fortran","text":"public interface taylor_series_exp_066 exp(x) approximation by a 66th order Taylor series Functions private elemental module function taylor_series_exp_066_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_066_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_066.html"},{"title":"taylor_series_exp_067 – taylor_series_fortran","text":"public interface taylor_series_exp_067 exp(x) approximation by a 67th order Taylor series Functions private elemental module function taylor_series_exp_067_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_067_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_067.html"},{"title":"taylor_series_exp_068 – taylor_series_fortran","text":"public interface taylor_series_exp_068 exp(x) approximation by a 68th order Taylor series Functions private elemental module function taylor_series_exp_068_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_068_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_068.html"},{"title":"taylor_series_exp_069 – taylor_series_fortran","text":"public interface taylor_series_exp_069 exp(x) approximation by a 69th order Taylor series Functions private elemental module function taylor_series_exp_069_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_069_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_069.html"},{"title":"taylor_series_exp_070 – taylor_series_fortran","text":"public interface taylor_series_exp_070 exp(x) approximation by a 70th order Taylor series Functions private elemental module function taylor_series_exp_070_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_070_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_070.html"},{"title":"taylor_series_exp_071 – taylor_series_fortran","text":"public interface taylor_series_exp_071 exp(x) approximation by a 71st order Taylor series Functions private elemental module function taylor_series_exp_071_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_071_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_071.html"},{"title":"taylor_series_exp_072 – taylor_series_fortran","text":"public interface taylor_series_exp_072 exp(x) approximation by a 72nd order Taylor series Functions private elemental module function taylor_series_exp_072_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_072_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_072.html"},{"title":"taylor_series_exp_073 – taylor_series_fortran","text":"public interface taylor_series_exp_073 exp(x) approximation by a 73rd order Taylor series Functions private elemental module function taylor_series_exp_073_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_073_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_073.html"},{"title":"taylor_series_exp_074 – taylor_series_fortran","text":"public interface taylor_series_exp_074 exp(x) approximation by a 74th order Taylor series Functions private elemental module function taylor_series_exp_074_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_074_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_074.html"},{"title":"taylor_series_exp_075 – taylor_series_fortran","text":"public interface taylor_series_exp_075 exp(x) approximation by a 75th order Taylor series Functions private elemental module function taylor_series_exp_075_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_075_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_075.html"},{"title":"taylor_series_exp_076 – taylor_series_fortran","text":"public interface taylor_series_exp_076 exp(x) approximation by a 76th order Taylor series Functions private elemental module function taylor_series_exp_076_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_076_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_076.html"},{"title":"taylor_series_exp_077 – taylor_series_fortran","text":"public interface taylor_series_exp_077 exp(x) approximation by a 77th order Taylor series Functions private elemental module function taylor_series_exp_077_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_077_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_077.html"},{"title":"taylor_series_exp_078 – taylor_series_fortran","text":"public interface taylor_series_exp_078 exp(x) approximation by a 78th order Taylor series Functions private elemental module function taylor_series_exp_078_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_078_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_078.html"},{"title":"taylor_series_exp_079 – taylor_series_fortran","text":"public interface taylor_series_exp_079 exp(x) approximation by a 79th order Taylor series Functions private elemental module function taylor_series_exp_079_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_079_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_079.html"},{"title":"taylor_series_exp_080 – taylor_series_fortran","text":"public interface taylor_series_exp_080 exp(x) approximation by a 80th order Taylor series Functions private elemental module function taylor_series_exp_080_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_080_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_080.html"},{"title":"taylor_series_exp_081 – taylor_series_fortran","text":"public interface taylor_series_exp_081 exp(x) approximation by a 81st order Taylor series Functions private elemental module function taylor_series_exp_081_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_081_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_081.html"},{"title":"taylor_series_exp_082 – taylor_series_fortran","text":"public interface taylor_series_exp_082 exp(x) approximation by a 82nd order Taylor series Functions private elemental module function taylor_series_exp_082_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_082_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_082.html"},{"title":"taylor_series_exp_083 – taylor_series_fortran","text":"public interface taylor_series_exp_083 exp(x) approximation by a 83rd order Taylor series Functions private elemental module function taylor_series_exp_083_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_083_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_083.html"},{"title":"taylor_series_exp_084 – taylor_series_fortran","text":"public interface taylor_series_exp_084 exp(x) approximation by a 84th order Taylor series Functions private elemental module function taylor_series_exp_084_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_084_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_084.html"},{"title":"taylor_series_exp_085 – taylor_series_fortran","text":"public interface taylor_series_exp_085 exp(x) approximation by a 85th order Taylor series Functions private elemental module function taylor_series_exp_085_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_085_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_085.html"},{"title":"taylor_series_exp_086 – taylor_series_fortran","text":"public interface taylor_series_exp_086 exp(x) approximation by a 86th order Taylor series Functions private elemental module function taylor_series_exp_086_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_086_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_086.html"},{"title":"taylor_series_exp_087 – taylor_series_fortran","text":"public interface taylor_series_exp_087 exp(x) approximation by a 87th order Taylor series Functions private elemental module function taylor_series_exp_087_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_087_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_087.html"},{"title":"taylor_series_exp_088 – taylor_series_fortran","text":"public interface taylor_series_exp_088 exp(x) approximation by a 88th order Taylor series Functions private elemental module function taylor_series_exp_088_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_088_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_088.html"},{"title":"taylor_series_exp_089 – taylor_series_fortran","text":"public interface taylor_series_exp_089 exp(x) approximation by a 89th order Taylor series Functions private elemental module function taylor_series_exp_089_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_089_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_089.html"},{"title":"taylor_series_exp_090 – taylor_series_fortran","text":"public interface taylor_series_exp_090 exp(x) approximation by a 90th order Taylor series Functions private elemental module function taylor_series_exp_090_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_090_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_090.html"},{"title":"taylor_series_exp_091 – taylor_series_fortran","text":"public interface taylor_series_exp_091 exp(x) approximation by a 91st order Taylor series Functions private elemental module function taylor_series_exp_091_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_091_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_091.html"},{"title":"taylor_series_exp_092 – taylor_series_fortran","text":"public interface taylor_series_exp_092 exp(x) approximation by a 92nd order Taylor series Functions private elemental module function taylor_series_exp_092_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_092_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_092.html"},{"title":"taylor_series_exp_093 – taylor_series_fortran","text":"public interface taylor_series_exp_093 exp(x) approximation by a 93rd order Taylor series Functions private elemental module function taylor_series_exp_093_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_093_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_093.html"},{"title":"taylor_series_exp_094 – taylor_series_fortran","text":"public interface taylor_series_exp_094 exp(x) approximation by a 94th order Taylor series Functions private elemental module function taylor_series_exp_094_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_094_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_094.html"},{"title":"taylor_series_exp_095 – taylor_series_fortran","text":"public interface taylor_series_exp_095 exp(x) approximation by a 95th order Taylor series Functions private elemental module function taylor_series_exp_095_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_095_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_095.html"},{"title":"taylor_series_exp_096 – taylor_series_fortran","text":"public interface taylor_series_exp_096 exp(x) approximation by a 96th order Taylor series Functions private elemental module function taylor_series_exp_096_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_096_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_096.html"},{"title":"taylor_series_exp_097 – taylor_series_fortran","text":"public interface taylor_series_exp_097 exp(x) approximation by a 97th order Taylor series Functions private elemental module function taylor_series_exp_097_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_097_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_097.html"},{"title":"taylor_series_exp_098 – taylor_series_fortran","text":"public interface taylor_series_exp_098 exp(x) approximation by a 98th order Taylor series Functions private elemental module function taylor_series_exp_098_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_098_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_098.html"},{"title":"taylor_series_exp_099 – taylor_series_fortran","text":"public interface taylor_series_exp_099 exp(x) approximation by a 99th order Taylor series Functions private elemental module function taylor_series_exp_099_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_099_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_099.html"},{"title":"taylor_series_exp_100 – taylor_series_fortran","text":"public interface taylor_series_exp_100 exp(x) approximation by a 100th order Taylor series Functions private elemental module function taylor_series_exp_100_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_100_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_100.html"},{"title":"taylor_series_exp_101 – taylor_series_fortran","text":"public interface taylor_series_exp_101 exp(x) approximation by a 101st order Taylor series Functions private elemental module function taylor_series_exp_101_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_101_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_101.html"},{"title":"taylor_series_exp_102 – taylor_series_fortran","text":"public interface taylor_series_exp_102 exp(x) approximation by a 102nd order Taylor series Functions private elemental module function taylor_series_exp_102_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_102_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_102.html"},{"title":"taylor_series_exp_103 – taylor_series_fortran","text":"public interface taylor_series_exp_103 exp(x) approximation by a 103rd order Taylor series Functions private elemental module function taylor_series_exp_103_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_103_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_103.html"},{"title":"taylor_series_exp_104 – taylor_series_fortran","text":"public interface taylor_series_exp_104 exp(x) approximation by a 104th order Taylor series Functions private elemental module function taylor_series_exp_104_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_104_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_104.html"},{"title":"taylor_series_exp_105 – taylor_series_fortran","text":"public interface taylor_series_exp_105 exp(x) approximation by a 105th order Taylor series Functions private elemental module function taylor_series_exp_105_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_105_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_105.html"},{"title":"taylor_series_exp_106 – taylor_series_fortran","text":"public interface taylor_series_exp_106 exp(x) approximation by a 106th order Taylor series Functions private elemental module function taylor_series_exp_106_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_106_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_106.html"},{"title":"taylor_series_exp_107 – taylor_series_fortran","text":"public interface taylor_series_exp_107 exp(x) approximation by a 107th order Taylor series Functions private elemental module function taylor_series_exp_107_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_107_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_107.html"},{"title":"taylor_series_exp_108 – taylor_series_fortran","text":"public interface taylor_series_exp_108 exp(x) approximation by a 108th order Taylor series Functions private elemental module function taylor_series_exp_108_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_108_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_108.html"},{"title":"taylor_series_exp_109 – taylor_series_fortran","text":"public interface taylor_series_exp_109 exp(x) approximation by a 109th order Taylor series Functions private elemental module function taylor_series_exp_109_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_109_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_109.html"},{"title":"taylor_series_exp_110 – taylor_series_fortran","text":"public interface taylor_series_exp_110 exp(x) approximation by a 110th order Taylor series Functions private elemental module function taylor_series_exp_110_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_110_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_110.html"},{"title":"taylor_series_exp_111 – taylor_series_fortran","text":"public interface taylor_series_exp_111 exp(x) approximation by a 111th order Taylor series Functions private elemental module function taylor_series_exp_111_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_111_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_111.html"},{"title":"taylor_series_exp_112 – taylor_series_fortran","text":"public interface taylor_series_exp_112 exp(x) approximation by a 112th order Taylor series Functions private elemental module function taylor_series_exp_112_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_112_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_112.html"},{"title":"taylor_series_exp_113 – taylor_series_fortran","text":"public interface taylor_series_exp_113 exp(x) approximation by a 113th order Taylor series Functions private elemental module function taylor_series_exp_113_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_113_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_113.html"},{"title":"taylor_series_exp_114 – taylor_series_fortran","text":"public interface taylor_series_exp_114 exp(x) approximation by a 114th order Taylor series Functions private elemental module function taylor_series_exp_114_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_114_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_114.html"},{"title":"taylor_series_exp_115 – taylor_series_fortran","text":"public interface taylor_series_exp_115 exp(x) approximation by a 115th order Taylor series Functions private elemental module function taylor_series_exp_115_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_115_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_115.html"},{"title":"taylor_series_exp_116 – taylor_series_fortran","text":"public interface taylor_series_exp_116 exp(x) approximation by a 116th order Taylor series Functions private elemental module function taylor_series_exp_116_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_116_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_116.html"},{"title":"taylor_series_exp_117 – taylor_series_fortran","text":"public interface taylor_series_exp_117 exp(x) approximation by a 117th order Taylor series Functions private elemental module function taylor_series_exp_117_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_117_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_117.html"},{"title":"taylor_series_exp_118 – taylor_series_fortran","text":"public interface taylor_series_exp_118 exp(x) approximation by a 118th order Taylor series Functions private elemental module function taylor_series_exp_118_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_118_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_118.html"},{"title":"taylor_series_exp_119 – taylor_series_fortran","text":"public interface taylor_series_exp_119 exp(x) approximation by a 119th order Taylor series Functions private elemental module function taylor_series_exp_119_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_119_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_119.html"},{"title":"taylor_series_exp_120 – taylor_series_fortran","text":"public interface taylor_series_exp_120 exp(x) approximation by a 120th order Taylor series Functions private elemental module function taylor_series_exp_120_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_120_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_120.html"},{"title":"taylor_series_exp_121 – taylor_series_fortran","text":"public interface taylor_series_exp_121 exp(x) approximation by a 121st order Taylor series Functions private elemental module function taylor_series_exp_121_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_121_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_121.html"},{"title":"taylor_series_exp_122 – taylor_series_fortran","text":"public interface taylor_series_exp_122 exp(x) approximation by a 122nd order Taylor series Functions private elemental module function taylor_series_exp_122_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_122_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_122.html"},{"title":"taylor_series_exp_123 – taylor_series_fortran","text":"public interface taylor_series_exp_123 exp(x) approximation by a 123rd order Taylor series Functions private elemental module function taylor_series_exp_123_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_123_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_123.html"},{"title":"taylor_series_exp_124 – taylor_series_fortran","text":"public interface taylor_series_exp_124 exp(x) approximation by a 124th order Taylor series Functions private elemental module function taylor_series_exp_124_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_124_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_124.html"},{"title":"taylor_series_exp_125 – taylor_series_fortran","text":"public interface taylor_series_exp_125 exp(x) approximation by a 125th order Taylor series Functions private elemental module function taylor_series_exp_125_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_125_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_125.html"},{"title":"taylor_series_exp_126 – taylor_series_fortran","text":"public interface taylor_series_exp_126 exp(x) approximation by a 126th order Taylor series Functions private elemental module function taylor_series_exp_126_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_126_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_126.html"},{"title":"taylor_series_exp_127 – taylor_series_fortran","text":"public interface taylor_series_exp_127 exp(x) approximation by a 127th order Taylor series Functions private elemental module function taylor_series_exp_127_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_127_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_127.html"},{"title":"taylor_series_exp_128 – taylor_series_fortran","text":"public interface taylor_series_exp_128 exp(x) approximation by a 128th order Taylor series Functions private elemental module function taylor_series_exp_128_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_128_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_128.html"},{"title":"taylor_series_exp_129 – taylor_series_fortran","text":"public interface taylor_series_exp_129 exp(x) approximation by a 129th order Taylor series Functions private elemental module function taylor_series_exp_129_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_129_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_129.html"},{"title":"taylor_series_exp_130 – taylor_series_fortran","text":"public interface taylor_series_exp_130 exp(x) approximation by a 130th order Taylor series Functions private elemental module function taylor_series_exp_130_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_130_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_130.html"},{"title":"taylor_series_exp_131 – taylor_series_fortran","text":"public interface taylor_series_exp_131 exp(x) approximation by a 131st order Taylor series Functions private elemental module function taylor_series_exp_131_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_131_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_131.html"},{"title":"taylor_series_exp_132 – taylor_series_fortran","text":"public interface taylor_series_exp_132 exp(x) approximation by a 132nd order Taylor series Functions private elemental module function taylor_series_exp_132_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_132_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_132.html"},{"title":"taylor_series_exp_133 – taylor_series_fortran","text":"public interface taylor_series_exp_133 exp(x) approximation by a 133rd order Taylor series Functions private elemental module function taylor_series_exp_133_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_133_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_133.html"},{"title":"taylor_series_exp_134 – taylor_series_fortran","text":"public interface taylor_series_exp_134 exp(x) approximation by a 134th order Taylor series Functions private elemental module function taylor_series_exp_134_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_134_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_134.html"},{"title":"taylor_series_exp_135 – taylor_series_fortran","text":"public interface taylor_series_exp_135 exp(x) approximation by a 135th order Taylor series Functions private elemental module function taylor_series_exp_135_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_135_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_135.html"},{"title":"taylor_series_exp_136 – taylor_series_fortran","text":"public interface taylor_series_exp_136 exp(x) approximation by a 136th order Taylor series Functions private elemental module function taylor_series_exp_136_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_136_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_136.html"},{"title":"taylor_series_exp_137 – taylor_series_fortran","text":"public interface taylor_series_exp_137 exp(x) approximation by a 137th order Taylor series Functions private elemental module function taylor_series_exp_137_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_137_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_137.html"},{"title":"taylor_series_exp_138 – taylor_series_fortran","text":"public interface taylor_series_exp_138 exp(x) approximation by a 138th order Taylor series Functions private elemental module function taylor_series_exp_138_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_138_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_138.html"},{"title":"taylor_series_exp_139 – taylor_series_fortran","text":"public interface taylor_series_exp_139 exp(x) approximation by a 139th order Taylor series Functions private elemental module function taylor_series_exp_139_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_139_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_139.html"},{"title":"taylor_series_exp_140 – taylor_series_fortran","text":"public interface taylor_series_exp_140 exp(x) approximation by a 140th order Taylor series Functions private elemental module function taylor_series_exp_140_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_140_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_140.html"},{"title":"taylor_series_exp_141 – taylor_series_fortran","text":"public interface taylor_series_exp_141 exp(x) approximation by a 141st order Taylor series Functions private elemental module function taylor_series_exp_141_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_141_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_141.html"},{"title":"taylor_series_exp_142 – taylor_series_fortran","text":"public interface taylor_series_exp_142 exp(x) approximation by a 142nd order Taylor series Functions private elemental module function taylor_series_exp_142_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_142_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_142.html"},{"title":"taylor_series_exp_143 – taylor_series_fortran","text":"public interface taylor_series_exp_143 exp(x) approximation by a 143rd order Taylor series Functions private elemental module function taylor_series_exp_143_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_143_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_143.html"},{"title":"taylor_series_exp_144 – taylor_series_fortran","text":"public interface taylor_series_exp_144 exp(x) approximation by a 144th order Taylor series Functions private elemental module function taylor_series_exp_144_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_144_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_144.html"},{"title":"taylor_series_exp_145 – taylor_series_fortran","text":"public interface taylor_series_exp_145 exp(x) approximation by a 145th order Taylor series Functions private elemental module function taylor_series_exp_145_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_145_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_145.html"},{"title":"taylor_series_exp_146 – taylor_series_fortran","text":"public interface taylor_series_exp_146 exp(x) approximation by a 146th order Taylor series Functions private elemental module function taylor_series_exp_146_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_146_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_146.html"},{"title":"taylor_series_exp_147 – taylor_series_fortran","text":"public interface taylor_series_exp_147 exp(x) approximation by a 147th order Taylor series Functions private elemental module function taylor_series_exp_147_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_147_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_147.html"},{"title":"taylor_series_exp_148 – taylor_series_fortran","text":"public interface taylor_series_exp_148 exp(x) approximation by a 148th order Taylor series Functions private elemental module function taylor_series_exp_148_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_148_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_148.html"},{"title":"taylor_series_exp_149 – taylor_series_fortran","text":"public interface taylor_series_exp_149 exp(x) approximation by a 149th order Taylor series Functions private elemental module function taylor_series_exp_149_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_149_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_149.html"},{"title":"taylor_series_exp_150 – taylor_series_fortran","text":"public interface taylor_series_exp_150 exp(x) approximation by a 150th order Taylor series Functions private elemental module function taylor_series_exp_150_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_150_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_150.html"},{"title":"taylor_series_exp_151 – taylor_series_fortran","text":"public interface taylor_series_exp_151 exp(x) approximation by a 151st order Taylor series Functions private elemental module function taylor_series_exp_151_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_151_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_151.html"},{"title":"taylor_series_exp_152 – taylor_series_fortran","text":"public interface taylor_series_exp_152 exp(x) approximation by a 152nd order Taylor series Functions private elemental module function taylor_series_exp_152_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_152_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_152.html"},{"title":"taylor_series_exp_153 – taylor_series_fortran","text":"public interface taylor_series_exp_153 exp(x) approximation by a 153rd order Taylor series Functions private elemental module function taylor_series_exp_153_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_153_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_153.html"},{"title":"taylor_series_exp_154 – taylor_series_fortran","text":"public interface taylor_series_exp_154 exp(x) approximation by a 154th order Taylor series Functions private elemental module function taylor_series_exp_154_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_154_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_154.html"},{"title":"taylor_series_exp_155 – taylor_series_fortran","text":"public interface taylor_series_exp_155 exp(x) approximation by a 155th order Taylor series Functions private elemental module function taylor_series_exp_155_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_155_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_155.html"},{"title":"taylor_series_exp_156 – taylor_series_fortran","text":"public interface taylor_series_exp_156 exp(x) approximation by a 156th order Taylor series Functions private elemental module function taylor_series_exp_156_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_156_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_156.html"},{"title":"taylor_series_exp_157 – taylor_series_fortran","text":"public interface taylor_series_exp_157 exp(x) approximation by a 157th order Taylor series Functions private elemental module function taylor_series_exp_157_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_157_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_157.html"},{"title":"taylor_series_exp_158 – taylor_series_fortran","text":"public interface taylor_series_exp_158 exp(x) approximation by a 158th order Taylor series Functions private elemental module function taylor_series_exp_158_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_158_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_158.html"},{"title":"taylor_series_exp_159 – taylor_series_fortran","text":"public interface taylor_series_exp_159 exp(x) approximation by a 159th order Taylor series Functions private elemental module function taylor_series_exp_159_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_159_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_159.html"},{"title":"taylor_series_exp_160 – taylor_series_fortran","text":"public interface taylor_series_exp_160 exp(x) approximation by a 160th order Taylor series Functions private elemental module function taylor_series_exp_160_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_160_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_160.html"},{"title":"taylor_series_exp_161 – taylor_series_fortran","text":"public interface taylor_series_exp_161 exp(x) approximation by a 161st order Taylor series Functions private elemental module function taylor_series_exp_161_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_161_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_161.html"},{"title":"taylor_series_exp_162 – taylor_series_fortran","text":"public interface taylor_series_exp_162 exp(x) approximation by a 162nd order Taylor series Functions private elemental module function taylor_series_exp_162_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_162_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_162.html"},{"title":"taylor_series_exp_163 – taylor_series_fortran","text":"public interface taylor_series_exp_163 exp(x) approximation by a 163rd order Taylor series Functions private elemental module function taylor_series_exp_163_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_163_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_163.html"},{"title":"taylor_series_exp_164 – taylor_series_fortran","text":"public interface taylor_series_exp_164 exp(x) approximation by a 164th order Taylor series Functions private elemental module function taylor_series_exp_164_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_164_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_164.html"},{"title":"taylor_series_exp_165 – taylor_series_fortran","text":"public interface taylor_series_exp_165 exp(x) approximation by a 165th order Taylor series Functions private elemental module function taylor_series_exp_165_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_165_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_165.html"},{"title":"taylor_series_exp_166 – taylor_series_fortran","text":"public interface taylor_series_exp_166 exp(x) approximation by a 166th order Taylor series Functions private elemental module function taylor_series_exp_166_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_166_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_166.html"},{"title":"taylor_series_exp_167 – taylor_series_fortran","text":"public interface taylor_series_exp_167 exp(x) approximation by a 167th order Taylor series Functions private elemental module function taylor_series_exp_167_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_167_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_167.html"},{"title":"taylor_series_exp_168 – taylor_series_fortran","text":"public interface taylor_series_exp_168 exp(x) approximation by a 168th order Taylor series Functions private elemental module function taylor_series_exp_168_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_168_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_168.html"},{"title":"taylor_series_exp_169 – taylor_series_fortran","text":"public interface taylor_series_exp_169 exp(x) approximation by a 169th order Taylor series Functions private elemental module function taylor_series_exp_169_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_169_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_169.html"},{"title":"taylor_series_exp_170 – taylor_series_fortran","text":"public interface taylor_series_exp_170 exp(x) approximation by a 170th order Taylor series Functions private elemental module function taylor_series_exp_170_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_170_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_170.html"},{"title":"taylor_series_exp_171 – taylor_series_fortran","text":"public interface taylor_series_exp_171 exp(x) approximation by a 171st order Taylor series Functions private elemental module function taylor_series_exp_171_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_171_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_171.html"},{"title":"taylor_series_exp_172 – taylor_series_fortran","text":"public interface taylor_series_exp_172 exp(x) approximation by a 172nd order Taylor series Functions private elemental module function taylor_series_exp_172_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_172_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_172.html"},{"title":"taylor_series_exp_173 – taylor_series_fortran","text":"public interface taylor_series_exp_173 exp(x) approximation by a 173rd order Taylor series Functions private elemental module function taylor_series_exp_173_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_173_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_173.html"},{"title":"taylor_series_exp_174 – taylor_series_fortran","text":"public interface taylor_series_exp_174 exp(x) approximation by a 174th order Taylor series Functions private elemental module function taylor_series_exp_174_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_174_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_174.html"},{"title":"taylor_series_exp_175 – taylor_series_fortran","text":"public interface taylor_series_exp_175 exp(x) approximation by a 175th order Taylor series Functions private elemental module function taylor_series_exp_175_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_175_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_175.html"},{"title":"taylor_series_exp_176 – taylor_series_fortran","text":"public interface taylor_series_exp_176 exp(x) approximation by a 176th order Taylor series Functions private elemental module function taylor_series_exp_176_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_176_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_176.html"},{"title":"taylor_series_exp_177 – taylor_series_fortran","text":"public interface taylor_series_exp_177 exp(x) approximation by a 177th order Taylor series Functions private elemental module function taylor_series_exp_177_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_177_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_exp_177.html"},{"title":"taylor_series_sin_000 – taylor_series_fortran","text":"public interface taylor_series_sin_000 sin(x) approximation by a 0th order Taylor series Functions private elemental module function taylor_series_sin_000_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_000_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_000_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_000.html"},{"title":"taylor_series_sin_001 – taylor_series_fortran","text":"public interface taylor_series_sin_001 sin(x) approximation by a 1st order Taylor series Functions private elemental module function taylor_series_sin_001_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_001_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_001_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_001.html"},{"title":"taylor_series_sin_002 – taylor_series_fortran","text":"public interface taylor_series_sin_002 sin(x) approximation by a 2nd order Taylor series Functions private elemental module function taylor_series_sin_002_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_002_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_002_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_002.html"},{"title":"taylor_series_sin_003 – taylor_series_fortran","text":"public interface taylor_series_sin_003 sin(x) approximation by a 3rd order Taylor series Functions private elemental module function taylor_series_sin_003_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_003_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_003_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_003.html"},{"title":"taylor_series_sin_004 – taylor_series_fortran","text":"public interface taylor_series_sin_004 sin(x) approximation by a 4th order Taylor series Functions private elemental module function taylor_series_sin_004_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_004_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_004_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_004.html"},{"title":"taylor_series_sin_005 – taylor_series_fortran","text":"public interface taylor_series_sin_005 sin(x) approximation by a 5th order Taylor series Functions private elemental module function taylor_series_sin_005_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_005_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_005_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_005.html"},{"title":"taylor_series_sin_006 – taylor_series_fortran","text":"public interface taylor_series_sin_006 sin(x) approximation by a 6th order Taylor series Functions private elemental module function taylor_series_sin_006_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_006_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_006_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_006.html"},{"title":"taylor_series_sin_007 – taylor_series_fortran","text":"public interface taylor_series_sin_007 sin(x) approximation by a 7th order Taylor series Functions private elemental module function taylor_series_sin_007_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_007_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_007_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_007.html"},{"title":"taylor_series_sin_008 – taylor_series_fortran","text":"public interface taylor_series_sin_008 sin(x) approximation by a 8th order Taylor series Functions private elemental module function taylor_series_sin_008_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_008_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_008_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_008.html"},{"title":"taylor_series_sin_009 – taylor_series_fortran","text":"public interface taylor_series_sin_009 sin(x) approximation by a 9th order Taylor series Functions private elemental module function taylor_series_sin_009_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_009_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_009_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_009.html"},{"title":"taylor_series_sin_010 – taylor_series_fortran","text":"public interface taylor_series_sin_010 sin(x) approximation by a 10th order Taylor series Functions private elemental module function taylor_series_sin_010_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_010_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_010_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_010.html"},{"title":"taylor_series_sin_011 – taylor_series_fortran","text":"public interface taylor_series_sin_011 sin(x) approximation by a 11th order Taylor series Functions private elemental module function taylor_series_sin_011_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_011_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_011_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_011.html"},{"title":"taylor_series_sin_012 – taylor_series_fortran","text":"public interface taylor_series_sin_012 sin(x) approximation by a 12th order Taylor series Functions private elemental module function taylor_series_sin_012_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_012_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_012_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_012.html"},{"title":"taylor_series_sin_013 – taylor_series_fortran","text":"public interface taylor_series_sin_013 sin(x) approximation by a 13th order Taylor series Functions private elemental module function taylor_series_sin_013_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_013_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_013_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_013.html"},{"title":"taylor_series_sin_014 – taylor_series_fortran","text":"public interface taylor_series_sin_014 sin(x) approximation by a 14th order Taylor series Functions private elemental module function taylor_series_sin_014_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_014_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_014_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_014.html"},{"title":"taylor_series_sin_015 – taylor_series_fortran","text":"public interface taylor_series_sin_015 sin(x) approximation by a 15th order Taylor series Functions private elemental module function taylor_series_sin_015_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_015_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_015_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_015.html"},{"title":"taylor_series_sin_016 – taylor_series_fortran","text":"public interface taylor_series_sin_016 sin(x) approximation by a 16th order Taylor series Functions private elemental module function taylor_series_sin_016_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_016_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_016_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_016.html"},{"title":"taylor_series_sin_017 – taylor_series_fortran","text":"public interface taylor_series_sin_017 sin(x) approximation by a 17th order Taylor series Functions private elemental module function taylor_series_sin_017_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_017_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_017_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_017.html"},{"title":"taylor_series_sin_018 – taylor_series_fortran","text":"public interface taylor_series_sin_018 sin(x) approximation by a 18th order Taylor series Functions private elemental module function taylor_series_sin_018_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_018_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_018_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_018.html"},{"title":"taylor_series_sin_019 – taylor_series_fortran","text":"public interface taylor_series_sin_019 sin(x) approximation by a 19th order Taylor series Functions private elemental module function taylor_series_sin_019_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_019_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_019_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_019.html"},{"title":"taylor_series_sin_020 – taylor_series_fortran","text":"public interface taylor_series_sin_020 sin(x) approximation by a 20th order Taylor series Functions private elemental module function taylor_series_sin_020_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_020_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_020_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_020.html"},{"title":"taylor_series_sin_021 – taylor_series_fortran","text":"public interface taylor_series_sin_021 sin(x) approximation by a 21st order Taylor series Functions private elemental module function taylor_series_sin_021_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_021_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_021_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_021.html"},{"title":"taylor_series_sin_022 – taylor_series_fortran","text":"public interface taylor_series_sin_022 sin(x) approximation by a 22nd order Taylor series Functions private elemental module function taylor_series_sin_022_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_022_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_022_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_022.html"},{"title":"taylor_series_sin_023 – taylor_series_fortran","text":"public interface taylor_series_sin_023 sin(x) approximation by a 23rd order Taylor series Functions private elemental module function taylor_series_sin_023_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_023_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_023_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_023.html"},{"title":"taylor_series_sin_024 – taylor_series_fortran","text":"public interface taylor_series_sin_024 sin(x) approximation by a 24th order Taylor series Functions private elemental module function taylor_series_sin_024_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_024_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_024_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_024.html"},{"title":"taylor_series_sin_025 – taylor_series_fortran","text":"public interface taylor_series_sin_025 sin(x) approximation by a 25th order Taylor series Functions private elemental module function taylor_series_sin_025_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_025_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_025_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_025.html"},{"title":"taylor_series_sin_026 – taylor_series_fortran","text":"public interface taylor_series_sin_026 sin(x) approximation by a 26th order Taylor series Functions private elemental module function taylor_series_sin_026_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_026_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_026_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_026.html"},{"title":"taylor_series_sin_027 – taylor_series_fortran","text":"public interface taylor_series_sin_027 sin(x) approximation by a 27th order Taylor series Functions private elemental module function taylor_series_sin_027_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_027_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_027_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_027.html"},{"title":"taylor_series_sin_028 – taylor_series_fortran","text":"public interface taylor_series_sin_028 sin(x) approximation by a 28th order Taylor series Functions private elemental module function taylor_series_sin_028_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_028_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_028_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_028.html"},{"title":"taylor_series_sin_029 – taylor_series_fortran","text":"public interface taylor_series_sin_029 sin(x) approximation by a 29th order Taylor series Functions private elemental module function taylor_series_sin_029_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_029_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_029_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_029.html"},{"title":"taylor_series_sin_030 – taylor_series_fortran","text":"public interface taylor_series_sin_030 sin(x) approximation by a 30th order Taylor series Functions private elemental module function taylor_series_sin_030_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_030_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_030_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_030.html"},{"title":"taylor_series_sin_031 – taylor_series_fortran","text":"public interface taylor_series_sin_031 sin(x) approximation by a 31st order Taylor series Functions private elemental module function taylor_series_sin_031_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_031_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_031_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_031.html"},{"title":"taylor_series_sin_032 – taylor_series_fortran","text":"public interface taylor_series_sin_032 sin(x) approximation by a 32nd order Taylor series Functions private elemental module function taylor_series_sin_032_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_032_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_032_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_032.html"},{"title":"taylor_series_sin_033 – taylor_series_fortran","text":"public interface taylor_series_sin_033 sin(x) approximation by a 33rd order Taylor series Functions private elemental module function taylor_series_sin_033_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_033_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_033_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_033.html"},{"title":"taylor_series_sin_034 – taylor_series_fortran","text":"public interface taylor_series_sin_034 sin(x) approximation by a 34th order Taylor series Functions private elemental module function taylor_series_sin_034_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_034_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_034_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_034.html"},{"title":"taylor_series_sin_035 – taylor_series_fortran","text":"public interface taylor_series_sin_035 sin(x) approximation by a 35th order Taylor series Functions private elemental module function taylor_series_sin_035_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_035_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_035_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_035.html"},{"title":"taylor_series_sin_036 – taylor_series_fortran","text":"public interface taylor_series_sin_036 sin(x) approximation by a 36th order Taylor series Functions private elemental module function taylor_series_sin_036_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_036_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_036_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_036.html"},{"title":"taylor_series_sin_037 – taylor_series_fortran","text":"public interface taylor_series_sin_037 sin(x) approximation by a 37th order Taylor series Functions private elemental module function taylor_series_sin_037_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_037_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_037_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_037.html"},{"title":"taylor_series_sin_038 – taylor_series_fortran","text":"public interface taylor_series_sin_038 sin(x) approximation by a 38th order Taylor series Functions private elemental module function taylor_series_sin_038_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_038_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_038.html"},{"title":"taylor_series_sin_039 – taylor_series_fortran","text":"public interface taylor_series_sin_039 sin(x) approximation by a 39th order Taylor series Functions private elemental module function taylor_series_sin_039_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_039_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_039.html"},{"title":"taylor_series_sin_040 – taylor_series_fortran","text":"public interface taylor_series_sin_040 sin(x) approximation by a 40th order Taylor series Functions private elemental module function taylor_series_sin_040_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_040_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_040.html"},{"title":"taylor_series_sin_041 – taylor_series_fortran","text":"public interface taylor_series_sin_041 sin(x) approximation by a 41st order Taylor series Functions private elemental module function taylor_series_sin_041_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_041_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_041.html"},{"title":"taylor_series_sin_042 – taylor_series_fortran","text":"public interface taylor_series_sin_042 sin(x) approximation by a 42nd order Taylor series Functions private elemental module function taylor_series_sin_042_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_042_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_042.html"},{"title":"taylor_series_sin_043 – taylor_series_fortran","text":"public interface taylor_series_sin_043 sin(x) approximation by a 43rd order Taylor series Functions private elemental module function taylor_series_sin_043_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_043_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_043.html"},{"title":"taylor_series_sin_044 – taylor_series_fortran","text":"public interface taylor_series_sin_044 sin(x) approximation by a 44th order Taylor series Functions private elemental module function taylor_series_sin_044_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_044_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_044.html"},{"title":"taylor_series_sin_045 – taylor_series_fortran","text":"public interface taylor_series_sin_045 sin(x) approximation by a 45th order Taylor series Functions private elemental module function taylor_series_sin_045_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_045_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_045.html"},{"title":"taylor_series_sin_046 – taylor_series_fortran","text":"public interface taylor_series_sin_046 sin(x) approximation by a 46th order Taylor series Functions private elemental module function taylor_series_sin_046_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_046_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_046.html"},{"title":"taylor_series_sin_047 – taylor_series_fortran","text":"public interface taylor_series_sin_047 sin(x) approximation by a 47th order Taylor series Functions private elemental module function taylor_series_sin_047_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_047_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_047.html"},{"title":"taylor_series_sin_048 – taylor_series_fortran","text":"public interface taylor_series_sin_048 sin(x) approximation by a 48th order Taylor series Functions private elemental module function taylor_series_sin_048_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_048_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_048.html"},{"title":"taylor_series_sin_049 – taylor_series_fortran","text":"public interface taylor_series_sin_049 sin(x) approximation by a 49th order Taylor series Functions private elemental module function taylor_series_sin_049_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_049_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_049.html"},{"title":"taylor_series_sin_050 – taylor_series_fortran","text":"public interface taylor_series_sin_050 sin(x) approximation by a 50th order Taylor series Functions private elemental module function taylor_series_sin_050_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_050_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_050.html"},{"title":"taylor_series_sin_051 – taylor_series_fortran","text":"public interface taylor_series_sin_051 sin(x) approximation by a 51st order Taylor series Functions private elemental module function taylor_series_sin_051_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_051_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_051.html"},{"title":"taylor_series_sin_052 – taylor_series_fortran","text":"public interface taylor_series_sin_052 sin(x) approximation by a 52nd order Taylor series Functions private elemental module function taylor_series_sin_052_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_052_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_052.html"},{"title":"taylor_series_sin_053 – taylor_series_fortran","text":"public interface taylor_series_sin_053 sin(x) approximation by a 53rd order Taylor series Functions private elemental module function taylor_series_sin_053_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_053_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_053.html"},{"title":"taylor_series_sin_054 – taylor_series_fortran","text":"public interface taylor_series_sin_054 sin(x) approximation by a 54th order Taylor series Functions private elemental module function taylor_series_sin_054_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_054_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_054.html"},{"title":"taylor_series_sin_055 – taylor_series_fortran","text":"public interface taylor_series_sin_055 sin(x) approximation by a 55th order Taylor series Functions private elemental module function taylor_series_sin_055_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_055_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_055.html"},{"title":"taylor_series_sin_056 – taylor_series_fortran","text":"public interface taylor_series_sin_056 sin(x) approximation by a 56th order Taylor series Functions private elemental module function taylor_series_sin_056_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_056_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_056.html"},{"title":"taylor_series_sin_057 – taylor_series_fortran","text":"public interface taylor_series_sin_057 sin(x) approximation by a 57th order Taylor series Functions private elemental module function taylor_series_sin_057_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_057_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_057.html"},{"title":"taylor_series_sin_058 – taylor_series_fortran","text":"public interface taylor_series_sin_058 sin(x) approximation by a 58th order Taylor series Functions private elemental module function taylor_series_sin_058_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_058_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_058.html"},{"title":"taylor_series_sin_059 – taylor_series_fortran","text":"public interface taylor_series_sin_059 sin(x) approximation by a 59th order Taylor series Functions private elemental module function taylor_series_sin_059_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_059_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_059.html"},{"title":"taylor_series_sin_060 – taylor_series_fortran","text":"public interface taylor_series_sin_060 sin(x) approximation by a 60th order Taylor series Functions private elemental module function taylor_series_sin_060_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_060_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_060.html"},{"title":"taylor_series_sin_061 – taylor_series_fortran","text":"public interface taylor_series_sin_061 sin(x) approximation by a 61st order Taylor series Functions private elemental module function taylor_series_sin_061_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_061_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_061.html"},{"title":"taylor_series_sin_062 – taylor_series_fortran","text":"public interface taylor_series_sin_062 sin(x) approximation by a 62nd order Taylor series Functions private elemental module function taylor_series_sin_062_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_062_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_062.html"},{"title":"taylor_series_sin_063 – taylor_series_fortran","text":"public interface taylor_series_sin_063 sin(x) approximation by a 63rd order Taylor series Functions private elemental module function taylor_series_sin_063_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_063_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_063.html"},{"title":"taylor_series_sin_064 – taylor_series_fortran","text":"public interface taylor_series_sin_064 sin(x) approximation by a 64th order Taylor series Functions private elemental module function taylor_series_sin_064_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_064_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_064.html"},{"title":"taylor_series_sin_065 – taylor_series_fortran","text":"public interface taylor_series_sin_065 sin(x) approximation by a 65th order Taylor series Functions private elemental module function taylor_series_sin_065_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_065_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_065.html"},{"title":"taylor_series_sin_066 – taylor_series_fortran","text":"public interface taylor_series_sin_066 sin(x) approximation by a 66th order Taylor series Functions private elemental module function taylor_series_sin_066_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_066_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_066.html"},{"title":"taylor_series_sin_067 – taylor_series_fortran","text":"public interface taylor_series_sin_067 sin(x) approximation by a 67th order Taylor series Functions private elemental module function taylor_series_sin_067_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_067_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_067.html"},{"title":"taylor_series_sin_068 – taylor_series_fortran","text":"public interface taylor_series_sin_068 sin(x) approximation by a 68th order Taylor series Functions private elemental module function taylor_series_sin_068_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_068_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_068.html"},{"title":"taylor_series_sin_069 – taylor_series_fortran","text":"public interface taylor_series_sin_069 sin(x) approximation by a 69th order Taylor series Functions private elemental module function taylor_series_sin_069_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_069_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_069.html"},{"title":"taylor_series_sin_070 – taylor_series_fortran","text":"public interface taylor_series_sin_070 sin(x) approximation by a 70th order Taylor series Functions private elemental module function taylor_series_sin_070_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_070_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_070.html"},{"title":"taylor_series_sin_071 – taylor_series_fortran","text":"public interface taylor_series_sin_071 sin(x) approximation by a 71st order Taylor series Functions private elemental module function taylor_series_sin_071_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_071_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_071.html"},{"title":"taylor_series_sin_072 – taylor_series_fortran","text":"public interface taylor_series_sin_072 sin(x) approximation by a 72nd order Taylor series Functions private elemental module function taylor_series_sin_072_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_072_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_072.html"},{"title":"taylor_series_sin_073 – taylor_series_fortran","text":"public interface taylor_series_sin_073 sin(x) approximation by a 73rd order Taylor series Functions private elemental module function taylor_series_sin_073_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_073_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_073.html"},{"title":"taylor_series_sin_074 – taylor_series_fortran","text":"public interface taylor_series_sin_074 sin(x) approximation by a 74th order Taylor series Functions private elemental module function taylor_series_sin_074_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_074_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_074.html"},{"title":"taylor_series_sin_075 – taylor_series_fortran","text":"public interface taylor_series_sin_075 sin(x) approximation by a 75th order Taylor series Functions private elemental module function taylor_series_sin_075_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_075_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_075.html"},{"title":"taylor_series_sin_076 – taylor_series_fortran","text":"public interface taylor_series_sin_076 sin(x) approximation by a 76th order Taylor series Functions private elemental module function taylor_series_sin_076_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_076_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_076.html"},{"title":"taylor_series_sin_077 – taylor_series_fortran","text":"public interface taylor_series_sin_077 sin(x) approximation by a 77th order Taylor series Functions private elemental module function taylor_series_sin_077_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_077_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_077.html"},{"title":"taylor_series_sin_078 – taylor_series_fortran","text":"public interface taylor_series_sin_078 sin(x) approximation by a 78th order Taylor series Functions private elemental module function taylor_series_sin_078_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_078_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_078.html"},{"title":"taylor_series_sin_079 – taylor_series_fortran","text":"public interface taylor_series_sin_079 sin(x) approximation by a 79th order Taylor series Functions private elemental module function taylor_series_sin_079_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_079_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_079.html"},{"title":"taylor_series_sin_080 – taylor_series_fortran","text":"public interface taylor_series_sin_080 sin(x) approximation by a 80th order Taylor series Functions private elemental module function taylor_series_sin_080_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_080_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_080.html"},{"title":"taylor_series_sin_081 – taylor_series_fortran","text":"public interface taylor_series_sin_081 sin(x) approximation by a 81st order Taylor series Functions private elemental module function taylor_series_sin_081_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_081_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_081.html"},{"title":"taylor_series_sin_082 – taylor_series_fortran","text":"public interface taylor_series_sin_082 sin(x) approximation by a 82nd order Taylor series Functions private elemental module function taylor_series_sin_082_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_082_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_082.html"},{"title":"taylor_series_sin_083 – taylor_series_fortran","text":"public interface taylor_series_sin_083 sin(x) approximation by a 83rd order Taylor series Functions private elemental module function taylor_series_sin_083_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_083_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_083.html"},{"title":"taylor_series_sin_084 – taylor_series_fortran","text":"public interface taylor_series_sin_084 sin(x) approximation by a 84th order Taylor series Functions private elemental module function taylor_series_sin_084_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_084_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_084.html"},{"title":"taylor_series_sin_085 – taylor_series_fortran","text":"public interface taylor_series_sin_085 sin(x) approximation by a 85th order Taylor series Functions private elemental module function taylor_series_sin_085_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_085_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_085.html"},{"title":"taylor_series_sin_086 – taylor_series_fortran","text":"public interface taylor_series_sin_086 sin(x) approximation by a 86th order Taylor series Functions private elemental module function taylor_series_sin_086_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_086_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_086.html"},{"title":"taylor_series_sin_087 – taylor_series_fortran","text":"public interface taylor_series_sin_087 sin(x) approximation by a 87th order Taylor series Functions private elemental module function taylor_series_sin_087_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_087_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_087.html"},{"title":"taylor_series_sin_088 – taylor_series_fortran","text":"public interface taylor_series_sin_088 sin(x) approximation by a 88th order Taylor series Functions private elemental module function taylor_series_sin_088_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_088_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_088.html"},{"title":"taylor_series_sin_089 – taylor_series_fortran","text":"public interface taylor_series_sin_089 sin(x) approximation by a 89th order Taylor series Functions private elemental module function taylor_series_sin_089_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_089_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_089.html"},{"title":"taylor_series_sin_090 – taylor_series_fortran","text":"public interface taylor_series_sin_090 sin(x) approximation by a 90th order Taylor series Functions private elemental module function taylor_series_sin_090_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_090_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_090.html"},{"title":"taylor_series_sin_091 – taylor_series_fortran","text":"public interface taylor_series_sin_091 sin(x) approximation by a 91st order Taylor series Functions private elemental module function taylor_series_sin_091_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_091_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_091.html"},{"title":"taylor_series_sin_092 – taylor_series_fortran","text":"public interface taylor_series_sin_092 sin(x) approximation by a 92nd order Taylor series Functions private elemental module function taylor_series_sin_092_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_092_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_092.html"},{"title":"taylor_series_sin_093 – taylor_series_fortran","text":"public interface taylor_series_sin_093 sin(x) approximation by a 93rd order Taylor series Functions private elemental module function taylor_series_sin_093_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_093_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_093.html"},{"title":"taylor_series_sin_094 – taylor_series_fortran","text":"public interface taylor_series_sin_094 sin(x) approximation by a 94th order Taylor series Functions private elemental module function taylor_series_sin_094_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_094_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_094.html"},{"title":"taylor_series_sin_095 – taylor_series_fortran","text":"public interface taylor_series_sin_095 sin(x) approximation by a 95th order Taylor series Functions private elemental module function taylor_series_sin_095_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_095_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_095.html"},{"title":"taylor_series_sin_096 – taylor_series_fortran","text":"public interface taylor_series_sin_096 sin(x) approximation by a 96th order Taylor series Functions private elemental module function taylor_series_sin_096_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_096_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_096.html"},{"title":"taylor_series_sin_097 – taylor_series_fortran","text":"public interface taylor_series_sin_097 sin(x) approximation by a 97th order Taylor series Functions private elemental module function taylor_series_sin_097_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_097_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_097.html"},{"title":"taylor_series_sin_098 – taylor_series_fortran","text":"public interface taylor_series_sin_098 sin(x) approximation by a 98th order Taylor series Functions private elemental module function taylor_series_sin_098_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_098_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_098.html"},{"title":"taylor_series_sin_099 – taylor_series_fortran","text":"public interface taylor_series_sin_099 sin(x) approximation by a 99th order Taylor series Functions private elemental module function taylor_series_sin_099_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_099_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_099.html"},{"title":"taylor_series_sin_100 – taylor_series_fortran","text":"public interface taylor_series_sin_100 sin(x) approximation by a 100th order Taylor series Functions private elemental module function taylor_series_sin_100_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_100_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_100.html"},{"title":"taylor_series_sin_101 – taylor_series_fortran","text":"public interface taylor_series_sin_101 sin(x) approximation by a 101st order Taylor series Functions private elemental module function taylor_series_sin_101_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_101_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_101.html"},{"title":"taylor_series_sin_102 – taylor_series_fortran","text":"public interface taylor_series_sin_102 sin(x) approximation by a 102nd order Taylor series Functions private elemental module function taylor_series_sin_102_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_102_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_102.html"},{"title":"taylor_series_sin_103 – taylor_series_fortran","text":"public interface taylor_series_sin_103 sin(x) approximation by a 103rd order Taylor series Functions private elemental module function taylor_series_sin_103_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_103_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_103.html"},{"title":"taylor_series_sin_104 – taylor_series_fortran","text":"public interface taylor_series_sin_104 sin(x) approximation by a 104th order Taylor series Functions private elemental module function taylor_series_sin_104_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_104_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_104.html"},{"title":"taylor_series_sin_105 – taylor_series_fortran","text":"public interface taylor_series_sin_105 sin(x) approximation by a 105th order Taylor series Functions private elemental module function taylor_series_sin_105_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_105_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_105.html"},{"title":"taylor_series_sin_106 – taylor_series_fortran","text":"public interface taylor_series_sin_106 sin(x) approximation by a 106th order Taylor series Functions private elemental module function taylor_series_sin_106_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_106_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_106.html"},{"title":"taylor_series_sin_107 – taylor_series_fortran","text":"public interface taylor_series_sin_107 sin(x) approximation by a 107th order Taylor series Functions private elemental module function taylor_series_sin_107_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_107_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_107.html"},{"title":"taylor_series_sin_108 – taylor_series_fortran","text":"public interface taylor_series_sin_108 sin(x) approximation by a 108th order Taylor series Functions private elemental module function taylor_series_sin_108_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_108_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_108.html"},{"title":"taylor_series_sin_109 – taylor_series_fortran","text":"public interface taylor_series_sin_109 sin(x) approximation by a 109th order Taylor series Functions private elemental module function taylor_series_sin_109_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_109_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_109.html"},{"title":"taylor_series_sin_110 – taylor_series_fortran","text":"public interface taylor_series_sin_110 sin(x) approximation by a 110th order Taylor series Functions private elemental module function taylor_series_sin_110_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_110_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_110.html"},{"title":"taylor_series_sin_111 – taylor_series_fortran","text":"public interface taylor_series_sin_111 sin(x) approximation by a 111th order Taylor series Functions private elemental module function taylor_series_sin_111_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_111_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_111.html"},{"title":"taylor_series_sin_112 – taylor_series_fortran","text":"public interface taylor_series_sin_112 sin(x) approximation by a 112th order Taylor series Functions private elemental module function taylor_series_sin_112_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_112_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_112.html"},{"title":"taylor_series_sin_113 – taylor_series_fortran","text":"public interface taylor_series_sin_113 sin(x) approximation by a 113th order Taylor series Functions private elemental module function taylor_series_sin_113_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_113_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_113.html"},{"title":"taylor_series_sin_114 – taylor_series_fortran","text":"public interface taylor_series_sin_114 sin(x) approximation by a 114th order Taylor series Functions private elemental module function taylor_series_sin_114_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_114_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_114.html"},{"title":"taylor_series_sin_115 – taylor_series_fortran","text":"public interface taylor_series_sin_115 sin(x) approximation by a 115th order Taylor series Functions private elemental module function taylor_series_sin_115_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_115_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_115.html"},{"title":"taylor_series_sin_116 – taylor_series_fortran","text":"public interface taylor_series_sin_116 sin(x) approximation by a 116th order Taylor series Functions private elemental module function taylor_series_sin_116_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_116_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_116.html"},{"title":"taylor_series_sin_117 – taylor_series_fortran","text":"public interface taylor_series_sin_117 sin(x) approximation by a 117th order Taylor series Functions private elemental module function taylor_series_sin_117_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_117_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_117.html"},{"title":"taylor_series_sin_118 – taylor_series_fortran","text":"public interface taylor_series_sin_118 sin(x) approximation by a 118th order Taylor series Functions private elemental module function taylor_series_sin_118_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_118_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_118.html"},{"title":"taylor_series_sin_119 – taylor_series_fortran","text":"public interface taylor_series_sin_119 sin(x) approximation by a 119th order Taylor series Functions private elemental module function taylor_series_sin_119_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_119_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_119.html"},{"title":"taylor_series_sin_120 – taylor_series_fortran","text":"public interface taylor_series_sin_120 sin(x) approximation by a 120th order Taylor series Functions private elemental module function taylor_series_sin_120_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_120_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_120.html"},{"title":"taylor_series_sin_121 – taylor_series_fortran","text":"public interface taylor_series_sin_121 sin(x) approximation by a 121st order Taylor series Functions private elemental module function taylor_series_sin_121_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_121_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_121.html"},{"title":"taylor_series_sin_122 – taylor_series_fortran","text":"public interface taylor_series_sin_122 sin(x) approximation by a 122nd order Taylor series Functions private elemental module function taylor_series_sin_122_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_122_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_122.html"},{"title":"taylor_series_sin_123 – taylor_series_fortran","text":"public interface taylor_series_sin_123 sin(x) approximation by a 123rd order Taylor series Functions private elemental module function taylor_series_sin_123_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_123_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_123.html"},{"title":"taylor_series_sin_124 – taylor_series_fortran","text":"public interface taylor_series_sin_124 sin(x) approximation by a 124th order Taylor series Functions private elemental module function taylor_series_sin_124_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_124_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_124.html"},{"title":"taylor_series_sin_125 – taylor_series_fortran","text":"public interface taylor_series_sin_125 sin(x) approximation by a 125th order Taylor series Functions private elemental module function taylor_series_sin_125_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_125_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_125.html"},{"title":"taylor_series_sin_126 – taylor_series_fortran","text":"public interface taylor_series_sin_126 sin(x) approximation by a 126th order Taylor series Functions private elemental module function taylor_series_sin_126_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_126_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_126.html"},{"title":"taylor_series_sin_127 – taylor_series_fortran","text":"public interface taylor_series_sin_127 sin(x) approximation by a 127th order Taylor series Functions private elemental module function taylor_series_sin_127_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_127_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_127.html"},{"title":"taylor_series_sin_128 – taylor_series_fortran","text":"public interface taylor_series_sin_128 sin(x) approximation by a 128th order Taylor series Functions private elemental module function taylor_series_sin_128_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_128_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_128.html"},{"title":"taylor_series_sin_129 – taylor_series_fortran","text":"public interface taylor_series_sin_129 sin(x) approximation by a 129th order Taylor series Functions private elemental module function taylor_series_sin_129_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_129_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_129.html"},{"title":"taylor_series_sin_130 – taylor_series_fortran","text":"public interface taylor_series_sin_130 sin(x) approximation by a 130th order Taylor series Functions private elemental module function taylor_series_sin_130_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_130_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_130.html"},{"title":"taylor_series_sin_131 – taylor_series_fortran","text":"public interface taylor_series_sin_131 sin(x) approximation by a 131st order Taylor series Functions private elemental module function taylor_series_sin_131_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_131_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_131.html"},{"title":"taylor_series_sin_132 – taylor_series_fortran","text":"public interface taylor_series_sin_132 sin(x) approximation by a 132nd order Taylor series Functions private elemental module function taylor_series_sin_132_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_132_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_132.html"},{"title":"taylor_series_sin_133 – taylor_series_fortran","text":"public interface taylor_series_sin_133 sin(x) approximation by a 133rd order Taylor series Functions private elemental module function taylor_series_sin_133_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_133_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_133.html"},{"title":"taylor_series_sin_134 – taylor_series_fortran","text":"public interface taylor_series_sin_134 sin(x) approximation by a 134th order Taylor series Functions private elemental module function taylor_series_sin_134_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_134_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_134.html"},{"title":"taylor_series_sin_135 – taylor_series_fortran","text":"public interface taylor_series_sin_135 sin(x) approximation by a 135th order Taylor series Functions private elemental module function taylor_series_sin_135_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_135_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_135.html"},{"title":"taylor_series_sin_136 – taylor_series_fortran","text":"public interface taylor_series_sin_136 sin(x) approximation by a 136th order Taylor series Functions private elemental module function taylor_series_sin_136_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_136_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_136.html"},{"title":"taylor_series_sin_137 – taylor_series_fortran","text":"public interface taylor_series_sin_137 sin(x) approximation by a 137th order Taylor series Functions private elemental module function taylor_series_sin_137_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_137_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_137.html"},{"title":"taylor_series_sin_138 – taylor_series_fortran","text":"public interface taylor_series_sin_138 sin(x) approximation by a 138th order Taylor series Functions private elemental module function taylor_series_sin_138_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_138_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_138.html"},{"title":"taylor_series_sin_139 – taylor_series_fortran","text":"public interface taylor_series_sin_139 sin(x) approximation by a 139th order Taylor series Functions private elemental module function taylor_series_sin_139_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_139_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_139.html"},{"title":"taylor_series_sin_140 – taylor_series_fortran","text":"public interface taylor_series_sin_140 sin(x) approximation by a 140th order Taylor series Functions private elemental module function taylor_series_sin_140_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_140_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_140.html"},{"title":"taylor_series_sin_141 – taylor_series_fortran","text":"public interface taylor_series_sin_141 sin(x) approximation by a 141st order Taylor series Functions private elemental module function taylor_series_sin_141_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_141_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_141.html"},{"title":"taylor_series_sin_142 – taylor_series_fortran","text":"public interface taylor_series_sin_142 sin(x) approximation by a 142nd order Taylor series Functions private elemental module function taylor_series_sin_142_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_142_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_142.html"},{"title":"taylor_series_sin_143 – taylor_series_fortran","text":"public interface taylor_series_sin_143 sin(x) approximation by a 143rd order Taylor series Functions private elemental module function taylor_series_sin_143_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_143_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_143.html"},{"title":"taylor_series_sin_144 – taylor_series_fortran","text":"public interface taylor_series_sin_144 sin(x) approximation by a 144th order Taylor series Functions private elemental module function taylor_series_sin_144_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_144_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_144.html"},{"title":"taylor_series_sin_145 – taylor_series_fortran","text":"public interface taylor_series_sin_145 sin(x) approximation by a 145th order Taylor series Functions private elemental module function taylor_series_sin_145_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_145_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_145.html"},{"title":"taylor_series_sin_146 – taylor_series_fortran","text":"public interface taylor_series_sin_146 sin(x) approximation by a 146th order Taylor series Functions private elemental module function taylor_series_sin_146_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_146_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_146.html"},{"title":"taylor_series_sin_147 – taylor_series_fortran","text":"public interface taylor_series_sin_147 sin(x) approximation by a 147th order Taylor series Functions private elemental module function taylor_series_sin_147_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_147_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_147.html"},{"title":"taylor_series_sin_148 – taylor_series_fortran","text":"public interface taylor_series_sin_148 sin(x) approximation by a 148th order Taylor series Functions private elemental module function taylor_series_sin_148_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_148_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_148.html"},{"title":"taylor_series_sin_149 – taylor_series_fortran","text":"public interface taylor_series_sin_149 sin(x) approximation by a 149th order Taylor series Functions private elemental module function taylor_series_sin_149_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_149_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_149.html"},{"title":"taylor_series_sin_150 – taylor_series_fortran","text":"public interface taylor_series_sin_150 sin(x) approximation by a 150th order Taylor series Functions private elemental module function taylor_series_sin_150_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_150_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_150.html"},{"title":"taylor_series_sin_151 – taylor_series_fortran","text":"public interface taylor_series_sin_151 sin(x) approximation by a 151st order Taylor series Functions private elemental module function taylor_series_sin_151_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_151_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_151.html"},{"title":"taylor_series_sin_152 – taylor_series_fortran","text":"public interface taylor_series_sin_152 sin(x) approximation by a 152nd order Taylor series Functions private elemental module function taylor_series_sin_152_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_152_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_152.html"},{"title":"taylor_series_sin_153 – taylor_series_fortran","text":"public interface taylor_series_sin_153 sin(x) approximation by a 153rd order Taylor series Functions private elemental module function taylor_series_sin_153_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_153_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_153.html"},{"title":"taylor_series_sin_154 – taylor_series_fortran","text":"public interface taylor_series_sin_154 sin(x) approximation by a 154th order Taylor series Functions private elemental module function taylor_series_sin_154_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_154_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_154.html"},{"title":"taylor_series_sin_155 – taylor_series_fortran","text":"public interface taylor_series_sin_155 sin(x) approximation by a 155th order Taylor series Functions private elemental module function taylor_series_sin_155_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_155_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_155.html"},{"title":"taylor_series_sin_156 – taylor_series_fortran","text":"public interface taylor_series_sin_156 sin(x) approximation by a 156th order Taylor series Functions private elemental module function taylor_series_sin_156_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_156_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_156.html"},{"title":"taylor_series_sin_157 – taylor_series_fortran","text":"public interface taylor_series_sin_157 sin(x) approximation by a 157th order Taylor series Functions private elemental module function taylor_series_sin_157_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_157_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_157.html"},{"title":"taylor_series_sin_158 – taylor_series_fortran","text":"public interface taylor_series_sin_158 sin(x) approximation by a 158th order Taylor series Functions private elemental module function taylor_series_sin_158_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_158_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_158.html"},{"title":"taylor_series_sin_159 – taylor_series_fortran","text":"public interface taylor_series_sin_159 sin(x) approximation by a 159th order Taylor series Functions private elemental module function taylor_series_sin_159_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_159_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_159.html"},{"title":"taylor_series_sin_160 – taylor_series_fortran","text":"public interface taylor_series_sin_160 sin(x) approximation by a 160th order Taylor series Functions private elemental module function taylor_series_sin_160_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_160_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_160.html"},{"title":"taylor_series_sin_161 – taylor_series_fortran","text":"public interface taylor_series_sin_161 sin(x) approximation by a 161st order Taylor series Functions private elemental module function taylor_series_sin_161_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_161_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_161.html"},{"title":"taylor_series_sin_162 – taylor_series_fortran","text":"public interface taylor_series_sin_162 sin(x) approximation by a 162nd order Taylor series Functions private elemental module function taylor_series_sin_162_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_162_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_162.html"},{"title":"taylor_series_sin_163 – taylor_series_fortran","text":"public interface taylor_series_sin_163 sin(x) approximation by a 163rd order Taylor series Functions private elemental module function taylor_series_sin_163_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_163_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_163.html"},{"title":"taylor_series_sin_164 – taylor_series_fortran","text":"public interface taylor_series_sin_164 sin(x) approximation by a 164th order Taylor series Functions private elemental module function taylor_series_sin_164_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_164_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_164.html"},{"title":"taylor_series_sin_165 – taylor_series_fortran","text":"public interface taylor_series_sin_165 sin(x) approximation by a 165th order Taylor series Functions private elemental module function taylor_series_sin_165_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_165_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_165.html"},{"title":"taylor_series_sin_166 – taylor_series_fortran","text":"public interface taylor_series_sin_166 sin(x) approximation by a 166th order Taylor series Functions private elemental module function taylor_series_sin_166_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_166_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_166.html"},{"title":"taylor_series_sin_167 – taylor_series_fortran","text":"public interface taylor_series_sin_167 sin(x) approximation by a 167th order Taylor series Functions private elemental module function taylor_series_sin_167_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_167_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_167.html"},{"title":"taylor_series_sin_168 – taylor_series_fortran","text":"public interface taylor_series_sin_168 sin(x) approximation by a 168th order Taylor series Functions private elemental module function taylor_series_sin_168_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_168_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_168.html"},{"title":"taylor_series_sin_169 – taylor_series_fortran","text":"public interface taylor_series_sin_169 sin(x) approximation by a 169th order Taylor series Functions private elemental module function taylor_series_sin_169_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_169_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_169.html"},{"title":"taylor_series_sin_170 – taylor_series_fortran","text":"public interface taylor_series_sin_170 sin(x) approximation by a 170th order Taylor series Functions private elemental module function taylor_series_sin_170_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_170_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_170.html"},{"title":"taylor_series_sin_171 – taylor_series_fortran","text":"public interface taylor_series_sin_171 sin(x) approximation by a 171st order Taylor series Functions private elemental module function taylor_series_sin_171_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_171_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_171.html"},{"title":"taylor_series_sin_172 – taylor_series_fortran","text":"public interface taylor_series_sin_172 sin(x) approximation by a 172nd order Taylor series Functions private elemental module function taylor_series_sin_172_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_172_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_172.html"},{"title":"taylor_series_sin_173 – taylor_series_fortran","text":"public interface taylor_series_sin_173 sin(x) approximation by a 173rd order Taylor series Functions private elemental module function taylor_series_sin_173_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_173_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_173.html"},{"title":"taylor_series_sin_174 – taylor_series_fortran","text":"public interface taylor_series_sin_174 sin(x) approximation by a 174th order Taylor series Functions private elemental module function taylor_series_sin_174_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_174_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_174.html"},{"title":"taylor_series_sin_175 – taylor_series_fortran","text":"public interface taylor_series_sin_175 sin(x) approximation by a 175th order Taylor series Functions private elemental module function taylor_series_sin_175_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_175_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_175.html"},{"title":"taylor_series_sin_176 – taylor_series_fortran","text":"public interface taylor_series_sin_176 sin(x) approximation by a 176th order Taylor series Functions private elemental module function taylor_series_sin_176_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_176_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_176.html"},{"title":"taylor_series_sin_177 – taylor_series_fortran","text":"public interface taylor_series_sin_177 sin(x) approximation by a 177th order Taylor series Functions private elemental module function taylor_series_sin_177_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_177_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"interface/taylor_series_sin_177.html"},{"title":"inv_factorial_real128 – taylor_series_fortran","text":"Uses iso_fortran_env Variables Type Visibility Attributes Name Initial real(kind=real128), public, parameter :: inv_factorial_000 = 1.0_real128 real(kind=real128), public, parameter :: inv_factorial_001 = inv_factorial_000/1 real(kind=real128), public, parameter :: inv_factorial_002 = inv_factorial_001/2 real(kind=real128), public, parameter :: inv_factorial_003 = inv_factorial_002/3 real(kind=real128), public, parameter :: inv_factorial_004 = inv_factorial_003/4 real(kind=real128), public, parameter :: inv_factorial_005 = inv_factorial_004/5 real(kind=real128), public, parameter :: inv_factorial_006 = inv_factorial_005/6 real(kind=real128), public, parameter :: inv_factorial_007 = inv_factorial_006/7 real(kind=real128), public, parameter :: inv_factorial_008 = inv_factorial_007/8 real(kind=real128), public, parameter :: inv_factorial_009 = inv_factorial_008/9 real(kind=real128), public, parameter :: inv_factorial_010 = inv_factorial_009/10 real(kind=real128), public, parameter :: inv_factorial_011 = inv_factorial_010/11 real(kind=real128), public, parameter :: inv_factorial_012 = inv_factorial_011/12 real(kind=real128), public, parameter :: inv_factorial_013 = inv_factorial_012/13 real(kind=real128), public, parameter :: inv_factorial_014 = inv_factorial_013/14 real(kind=real128), public, parameter :: inv_factorial_015 = inv_factorial_014/15 real(kind=real128), public, parameter :: inv_factorial_016 = inv_factorial_015/16 real(kind=real128), public, parameter :: inv_factorial_017 = inv_factorial_016/17 real(kind=real128), public, parameter :: inv_factorial_018 = inv_factorial_017/18 real(kind=real128), public, parameter :: inv_factorial_019 = inv_factorial_018/19 real(kind=real128), public, parameter :: inv_factorial_020 = inv_factorial_019/20 real(kind=real128), public, parameter :: inv_factorial_021 = inv_factorial_020/21 real(kind=real128), public, parameter :: inv_factorial_022 = inv_factorial_021/22 real(kind=real128), public, parameter :: inv_factorial_023 = inv_factorial_022/23 real(kind=real128), public, parameter :: inv_factorial_024 = inv_factorial_023/24 real(kind=real128), public, parameter :: inv_factorial_025 = inv_factorial_024/25 real(kind=real128), public, parameter :: inv_factorial_026 = inv_factorial_025/26 real(kind=real128), public, parameter :: inv_factorial_027 = inv_factorial_026/27 real(kind=real128), public, parameter :: inv_factorial_028 = inv_factorial_027/28 real(kind=real128), public, parameter :: inv_factorial_029 = inv_factorial_028/29 real(kind=real128), public, parameter :: inv_factorial_030 = inv_factorial_029/30 real(kind=real128), public, parameter :: inv_factorial_031 = inv_factorial_030/31 real(kind=real128), public, parameter :: inv_factorial_032 = inv_factorial_031/32 real(kind=real128), public, parameter :: inv_factorial_033 = inv_factorial_032/33 real(kind=real128), public, parameter :: inv_factorial_034 = inv_factorial_033/34 real(kind=real128), public, parameter :: inv_factorial_035 = inv_factorial_034/35 real(kind=real128), public, parameter :: inv_factorial_036 = inv_factorial_035/36 real(kind=real128), public, parameter :: inv_factorial_037 = inv_factorial_036/37 real(kind=real128), public, parameter :: inv_factorial_038 = inv_factorial_037/38 real(kind=real128), public, parameter :: inv_factorial_039 = inv_factorial_038/39 real(kind=real128), public, parameter :: inv_factorial_040 = inv_factorial_039/40 real(kind=real128), public, parameter :: inv_factorial_041 = inv_factorial_040/41 real(kind=real128), public, parameter :: inv_factorial_042 = inv_factorial_041/42 real(kind=real128), public, parameter :: inv_factorial_043 = inv_factorial_042/43 real(kind=real128), public, parameter :: inv_factorial_044 = inv_factorial_043/44 real(kind=real128), public, parameter :: inv_factorial_045 = inv_factorial_044/45 real(kind=real128), public, parameter :: inv_factorial_046 = inv_factorial_045/46 real(kind=real128), public, parameter :: inv_factorial_047 = inv_factorial_046/47 real(kind=real128), public, parameter :: inv_factorial_048 = inv_factorial_047/48 real(kind=real128), public, parameter :: inv_factorial_049 = inv_factorial_048/49 real(kind=real128), public, parameter :: inv_factorial_050 = inv_factorial_049/50 real(kind=real128), public, parameter :: inv_factorial_051 = inv_factorial_050/51 real(kind=real128), public, parameter :: inv_factorial_052 = inv_factorial_051/52 real(kind=real128), public, parameter :: inv_factorial_053 = inv_factorial_052/53 real(kind=real128), public, parameter :: inv_factorial_054 = inv_factorial_053/54 real(kind=real128), public, parameter :: inv_factorial_055 = inv_factorial_054/55 real(kind=real128), public, parameter :: inv_factorial_056 = inv_factorial_055/56 real(kind=real128), public, parameter :: inv_factorial_057 = inv_factorial_056/57 real(kind=real128), public, parameter :: inv_factorial_058 = inv_factorial_057/58 real(kind=real128), public, parameter :: inv_factorial_059 = inv_factorial_058/59 real(kind=real128), public, parameter :: inv_factorial_060 = inv_factorial_059/60 real(kind=real128), public, parameter :: inv_factorial_061 = inv_factorial_060/61 real(kind=real128), public, parameter :: inv_factorial_062 = inv_factorial_061/62 real(kind=real128), public, parameter :: inv_factorial_063 = inv_factorial_062/63 real(kind=real128), public, parameter :: inv_factorial_064 = inv_factorial_063/64 real(kind=real128), public, parameter :: inv_factorial_065 = inv_factorial_064/65 real(kind=real128), public, parameter :: inv_factorial_066 = inv_factorial_065/66 real(kind=real128), public, parameter :: inv_factorial_067 = inv_factorial_066/67 real(kind=real128), public, parameter :: inv_factorial_068 = inv_factorial_067/68 real(kind=real128), public, parameter :: inv_factorial_069 = inv_factorial_068/69 real(kind=real128), public, parameter :: inv_factorial_070 = inv_factorial_069/70 real(kind=real128), public, parameter :: inv_factorial_071 = inv_factorial_070/71 real(kind=real128), public, parameter :: inv_factorial_072 = inv_factorial_071/72 real(kind=real128), public, parameter :: inv_factorial_073 = inv_factorial_072/73 real(kind=real128), public, parameter :: inv_factorial_074 = inv_factorial_073/74 real(kind=real128), public, parameter :: inv_factorial_075 = inv_factorial_074/75 real(kind=real128), public, parameter :: inv_factorial_076 = inv_factorial_075/76 real(kind=real128), public, parameter :: inv_factorial_077 = inv_factorial_076/77 real(kind=real128), public, parameter :: inv_factorial_078 = inv_factorial_077/78 real(kind=real128), public, parameter :: inv_factorial_079 = inv_factorial_078/79 real(kind=real128), public, parameter :: inv_factorial_080 = inv_factorial_079/80 real(kind=real128), public, parameter :: inv_factorial_081 = inv_factorial_080/81 real(kind=real128), public, parameter :: inv_factorial_082 = inv_factorial_081/82 real(kind=real128), public, parameter :: inv_factorial_083 = inv_factorial_082/83 real(kind=real128), public, parameter :: inv_factorial_084 = inv_factorial_083/84 real(kind=real128), public, parameter :: inv_factorial_085 = inv_factorial_084/85 real(kind=real128), public, parameter :: inv_factorial_086 = inv_factorial_085/86 real(kind=real128), public, parameter :: inv_factorial_087 = inv_factorial_086/87 real(kind=real128), public, parameter :: inv_factorial_088 = inv_factorial_087/88 real(kind=real128), public, parameter :: inv_factorial_089 = inv_factorial_088/89 real(kind=real128), public, parameter :: inv_factorial_090 = inv_factorial_089/90 real(kind=real128), public, parameter :: inv_factorial_091 = inv_factorial_090/91 real(kind=real128), public, parameter :: inv_factorial_092 = inv_factorial_091/92 real(kind=real128), public, parameter :: inv_factorial_093 = inv_factorial_092/93 real(kind=real128), public, parameter :: inv_factorial_094 = inv_factorial_093/94 real(kind=real128), public, parameter :: inv_factorial_095 = inv_factorial_094/95 real(kind=real128), public, parameter :: inv_factorial_096 = inv_factorial_095/96 real(kind=real128), public, parameter :: inv_factorial_097 = inv_factorial_096/97 real(kind=real128), public, parameter :: inv_factorial_098 = inv_factorial_097/98 real(kind=real128), public, parameter :: inv_factorial_099 = inv_factorial_098/99 real(kind=real128), public, parameter :: inv_factorial_100 = inv_factorial_099/100 real(kind=real128), public, parameter :: inv_factorial_101 = inv_factorial_100/101 real(kind=real128), public, parameter :: inv_factorial_102 = inv_factorial_101/102 real(kind=real128), public, parameter :: inv_factorial_103 = inv_factorial_102/103 real(kind=real128), public, parameter :: inv_factorial_104 = inv_factorial_103/104 real(kind=real128), public, parameter :: inv_factorial_105 = inv_factorial_104/105 real(kind=real128), public, parameter :: inv_factorial_106 = inv_factorial_105/106 real(kind=real128), public, parameter :: inv_factorial_107 = inv_factorial_106/107 real(kind=real128), public, parameter :: inv_factorial_108 = inv_factorial_107/108 real(kind=real128), public, parameter :: inv_factorial_109 = inv_factorial_108/109 real(kind=real128), public, parameter :: inv_factorial_110 = inv_factorial_109/110 real(kind=real128), public, parameter :: inv_factorial_111 = inv_factorial_110/111 real(kind=real128), public, parameter :: inv_factorial_112 = inv_factorial_111/112 real(kind=real128), public, parameter :: inv_factorial_113 = inv_factorial_112/113 real(kind=real128), public, parameter :: inv_factorial_114 = inv_factorial_113/114 real(kind=real128), public, parameter :: inv_factorial_115 = inv_factorial_114/115 real(kind=real128), public, parameter :: inv_factorial_116 = inv_factorial_115/116 real(kind=real128), public, parameter :: inv_factorial_117 = inv_factorial_116/117 real(kind=real128), public, parameter :: inv_factorial_118 = inv_factorial_117/118 real(kind=real128), public, parameter :: inv_factorial_119 = inv_factorial_118/119 real(kind=real128), public, parameter :: inv_factorial_120 = inv_factorial_119/120 real(kind=real128), public, parameter :: inv_factorial_121 = inv_factorial_120/121 real(kind=real128), public, parameter :: inv_factorial_122 = inv_factorial_121/122 real(kind=real128), public, parameter :: inv_factorial_123 = inv_factorial_122/123 real(kind=real128), public, parameter :: inv_factorial_124 = inv_factorial_123/124 real(kind=real128), public, parameter :: inv_factorial_125 = inv_factorial_124/125 real(kind=real128), public, parameter :: inv_factorial_126 = inv_factorial_125/126 real(kind=real128), public, parameter :: inv_factorial_127 = inv_factorial_126/127 real(kind=real128), public, parameter :: inv_factorial_128 = inv_factorial_127/128 real(kind=real128), public, parameter :: inv_factorial_129 = inv_factorial_128/129 real(kind=real128), public, parameter :: inv_factorial_130 = inv_factorial_129/130 real(kind=real128), public, parameter :: inv_factorial_131 = inv_factorial_130/131 real(kind=real128), public, parameter :: inv_factorial_132 = inv_factorial_131/132 real(kind=real128), public, parameter :: inv_factorial_133 = inv_factorial_132/133 real(kind=real128), public, parameter :: inv_factorial_134 = inv_factorial_133/134 real(kind=real128), public, parameter :: inv_factorial_135 = inv_factorial_134/135 real(kind=real128), public, parameter :: inv_factorial_136 = inv_factorial_135/136 real(kind=real128), public, parameter :: inv_factorial_137 = inv_factorial_136/137 real(kind=real128), public, parameter :: inv_factorial_138 = inv_factorial_137/138 real(kind=real128), public, parameter :: inv_factorial_139 = inv_factorial_138/139 real(kind=real128), public, parameter :: inv_factorial_140 = inv_factorial_139/140 real(kind=real128), public, parameter :: inv_factorial_141 = inv_factorial_140/141 real(kind=real128), public, parameter :: inv_factorial_142 = inv_factorial_141/142 real(kind=real128), public, parameter :: inv_factorial_143 = inv_factorial_142/143 real(kind=real128), public, parameter :: inv_factorial_144 = inv_factorial_143/144 real(kind=real128), public, parameter :: inv_factorial_145 = inv_factorial_144/145 real(kind=real128), public, parameter :: inv_factorial_146 = inv_factorial_145/146 real(kind=real128), public, parameter :: inv_factorial_147 = inv_factorial_146/147 real(kind=real128), public, parameter :: inv_factorial_148 = inv_factorial_147/148 real(kind=real128), public, parameter :: inv_factorial_149 = inv_factorial_148/149 real(kind=real128), public, parameter :: inv_factorial_150 = inv_factorial_149/150 real(kind=real128), public, parameter :: inv_factorial_151 = inv_factorial_150/151 real(kind=real128), public, parameter :: inv_factorial_152 = inv_factorial_151/152 real(kind=real128), public, parameter :: inv_factorial_153 = inv_factorial_152/153 real(kind=real128), public, parameter :: inv_factorial_154 = inv_factorial_153/154 real(kind=real128), public, parameter :: inv_factorial_155 = inv_factorial_154/155 real(kind=real128), public, parameter :: inv_factorial_156 = inv_factorial_155/156 real(kind=real128), public, parameter :: inv_factorial_157 = inv_factorial_156/157 real(kind=real128), public, parameter :: inv_factorial_158 = inv_factorial_157/158 real(kind=real128), public, parameter :: inv_factorial_159 = inv_factorial_158/159 real(kind=real128), public, parameter :: inv_factorial_160 = inv_factorial_159/160 real(kind=real128), public, parameter :: inv_factorial_161 = inv_factorial_160/161 real(kind=real128), public, parameter :: inv_factorial_162 = inv_factorial_161/162 real(kind=real128), public, parameter :: inv_factorial_163 = inv_factorial_162/163 real(kind=real128), public, parameter :: inv_factorial_164 = inv_factorial_163/164 real(kind=real128), public, parameter :: inv_factorial_165 = inv_factorial_164/165 real(kind=real128), public, parameter :: inv_factorial_166 = inv_factorial_165/166 real(kind=real128), public, parameter :: inv_factorial_167 = inv_factorial_166/167 real(kind=real128), public, parameter :: inv_factorial_168 = inv_factorial_167/168 real(kind=real128), public, parameter :: inv_factorial_169 = inv_factorial_168/169 real(kind=real128), public, parameter :: inv_factorial_170 = inv_factorial_169/170 real(kind=real128), public, parameter :: inv_factorial_171 = inv_factorial_170/171 real(kind=real128), public, parameter :: inv_factorial_172 = inv_factorial_171/172 real(kind=real128), public, parameter :: inv_factorial_173 = inv_factorial_172/173 real(kind=real128), public, parameter :: inv_factorial_174 = inv_factorial_173/174 real(kind=real128), public, parameter :: inv_factorial_175 = inv_factorial_174/175 real(kind=real128), public, parameter :: inv_factorial_176 = inv_factorial_175/176 real(kind=real128), public, parameter :: inv_factorial_177 = inv_factorial_176/177","tags":"","url":"module/inv_factorial_real128.html"},{"title":"inv_factorial_real64 – taylor_series_fortran","text":"Uses iso_fortran_env Variables Type Visibility Attributes Name Initial real(kind=real64), public, parameter :: inv_factorial_000 = 1.0_real64 real(kind=real64), public, parameter :: inv_factorial_001 = inv_factorial_000/1 real(kind=real64), public, parameter :: inv_factorial_002 = inv_factorial_001/2 real(kind=real64), public, parameter :: inv_factorial_003 = inv_factorial_002/3 real(kind=real64), public, parameter :: inv_factorial_004 = inv_factorial_003/4 real(kind=real64), public, parameter :: inv_factorial_005 = inv_factorial_004/5 real(kind=real64), public, parameter :: inv_factorial_006 = inv_factorial_005/6 real(kind=real64), public, parameter :: inv_factorial_007 = inv_factorial_006/7 real(kind=real64), public, parameter :: inv_factorial_008 = inv_factorial_007/8 real(kind=real64), public, parameter :: inv_factorial_009 = inv_factorial_008/9 real(kind=real64), public, parameter :: inv_factorial_010 = inv_factorial_009/10 real(kind=real64), public, parameter :: inv_factorial_011 = inv_factorial_010/11 real(kind=real64), public, parameter :: inv_factorial_012 = inv_factorial_011/12 real(kind=real64), public, parameter :: inv_factorial_013 = inv_factorial_012/13 real(kind=real64), public, parameter :: inv_factorial_014 = inv_factorial_013/14 real(kind=real64), public, parameter :: inv_factorial_015 = inv_factorial_014/15 real(kind=real64), public, parameter :: inv_factorial_016 = inv_factorial_015/16 real(kind=real64), public, parameter :: inv_factorial_017 = inv_factorial_016/17 real(kind=real64), public, parameter :: inv_factorial_018 = inv_factorial_017/18 real(kind=real64), public, parameter :: inv_factorial_019 = inv_factorial_018/19 real(kind=real64), public, parameter :: inv_factorial_020 = inv_factorial_019/20 real(kind=real64), public, parameter :: inv_factorial_021 = inv_factorial_020/21 real(kind=real64), public, parameter :: inv_factorial_022 = inv_factorial_021/22 real(kind=real64), public, parameter :: inv_factorial_023 = inv_factorial_022/23 real(kind=real64), public, parameter :: inv_factorial_024 = inv_factorial_023/24 real(kind=real64), public, parameter :: inv_factorial_025 = inv_factorial_024/25 real(kind=real64), public, parameter :: inv_factorial_026 = inv_factorial_025/26 real(kind=real64), public, parameter :: inv_factorial_027 = inv_factorial_026/27 real(kind=real64), public, parameter :: inv_factorial_028 = inv_factorial_027/28 real(kind=real64), public, parameter :: inv_factorial_029 = inv_factorial_028/29 real(kind=real64), public, parameter :: inv_factorial_030 = inv_factorial_029/30 real(kind=real64), public, parameter :: inv_factorial_031 = inv_factorial_030/31 real(kind=real64), public, parameter :: inv_factorial_032 = inv_factorial_031/32 real(kind=real64), public, parameter :: inv_factorial_033 = inv_factorial_032/33 real(kind=real64), public, parameter :: inv_factorial_034 = inv_factorial_033/34 real(kind=real64), public, parameter :: inv_factorial_035 = inv_factorial_034/35 real(kind=real64), public, parameter :: inv_factorial_036 = inv_factorial_035/36 real(kind=real64), public, parameter :: inv_factorial_037 = inv_factorial_036/37 real(kind=real64), public, parameter :: inv_factorial_038 = inv_factorial_037/38 real(kind=real64), public, parameter :: inv_factorial_039 = inv_factorial_038/39 real(kind=real64), public, parameter :: inv_factorial_040 = inv_factorial_039/40 real(kind=real64), public, parameter :: inv_factorial_041 = inv_factorial_040/41 real(kind=real64), public, parameter :: inv_factorial_042 = inv_factorial_041/42 real(kind=real64), public, parameter :: inv_factorial_043 = inv_factorial_042/43 real(kind=real64), public, parameter :: inv_factorial_044 = inv_factorial_043/44 real(kind=real64), public, parameter :: inv_factorial_045 = inv_factorial_044/45 real(kind=real64), public, parameter :: inv_factorial_046 = inv_factorial_045/46 real(kind=real64), public, parameter :: inv_factorial_047 = inv_factorial_046/47 real(kind=real64), public, parameter :: inv_factorial_048 = inv_factorial_047/48 real(kind=real64), public, parameter :: inv_factorial_049 = inv_factorial_048/49 real(kind=real64), public, parameter :: inv_factorial_050 = inv_factorial_049/50 real(kind=real64), public, parameter :: inv_factorial_051 = inv_factorial_050/51 real(kind=real64), public, parameter :: inv_factorial_052 = inv_factorial_051/52 real(kind=real64), public, parameter :: inv_factorial_053 = inv_factorial_052/53 real(kind=real64), public, parameter :: inv_factorial_054 = inv_factorial_053/54 real(kind=real64), public, parameter :: inv_factorial_055 = inv_factorial_054/55 real(kind=real64), public, parameter :: inv_factorial_056 = inv_factorial_055/56 real(kind=real64), public, parameter :: inv_factorial_057 = inv_factorial_056/57 real(kind=real64), public, parameter :: inv_factorial_058 = inv_factorial_057/58 real(kind=real64), public, parameter :: inv_factorial_059 = inv_factorial_058/59 real(kind=real64), public, parameter :: inv_factorial_060 = inv_factorial_059/60 real(kind=real64), public, parameter :: inv_factorial_061 = inv_factorial_060/61 real(kind=real64), public, parameter :: inv_factorial_062 = inv_factorial_061/62 real(kind=real64), public, parameter :: inv_factorial_063 = inv_factorial_062/63 real(kind=real64), public, parameter :: inv_factorial_064 = inv_factorial_063/64 real(kind=real64), public, parameter :: inv_factorial_065 = inv_factorial_064/65 real(kind=real64), public, parameter :: inv_factorial_066 = inv_factorial_065/66 real(kind=real64), public, parameter :: inv_factorial_067 = inv_factorial_066/67 real(kind=real64), public, parameter :: inv_factorial_068 = inv_factorial_067/68 real(kind=real64), public, parameter :: inv_factorial_069 = inv_factorial_068/69 real(kind=real64), public, parameter :: inv_factorial_070 = inv_factorial_069/70 real(kind=real64), public, parameter :: inv_factorial_071 = inv_factorial_070/71 real(kind=real64), public, parameter :: inv_factorial_072 = inv_factorial_071/72 real(kind=real64), public, parameter :: inv_factorial_073 = inv_factorial_072/73 real(kind=real64), public, parameter :: inv_factorial_074 = inv_factorial_073/74 real(kind=real64), public, parameter :: inv_factorial_075 = inv_factorial_074/75 real(kind=real64), public, parameter :: inv_factorial_076 = inv_factorial_075/76 real(kind=real64), public, parameter :: inv_factorial_077 = inv_factorial_076/77 real(kind=real64), public, parameter :: inv_factorial_078 = inv_factorial_077/78 real(kind=real64), public, parameter :: inv_factorial_079 = inv_factorial_078/79 real(kind=real64), public, parameter :: inv_factorial_080 = inv_factorial_079/80 real(kind=real64), public, parameter :: inv_factorial_081 = inv_factorial_080/81 real(kind=real64), public, parameter :: inv_factorial_082 = inv_factorial_081/82 real(kind=real64), public, parameter :: inv_factorial_083 = inv_factorial_082/83 real(kind=real64), public, parameter :: inv_factorial_084 = inv_factorial_083/84 real(kind=real64), public, parameter :: inv_factorial_085 = inv_factorial_084/85 real(kind=real64), public, parameter :: inv_factorial_086 = inv_factorial_085/86 real(kind=real64), public, parameter :: inv_factorial_087 = inv_factorial_086/87 real(kind=real64), public, parameter :: inv_factorial_088 = inv_factorial_087/88 real(kind=real64), public, parameter :: inv_factorial_089 = inv_factorial_088/89 real(kind=real64), public, parameter :: inv_factorial_090 = inv_factorial_089/90 real(kind=real64), public, parameter :: inv_factorial_091 = inv_factorial_090/91 real(kind=real64), public, parameter :: inv_factorial_092 = inv_factorial_091/92 real(kind=real64), public, parameter :: inv_factorial_093 = inv_factorial_092/93 real(kind=real64), public, parameter :: inv_factorial_094 = inv_factorial_093/94 real(kind=real64), public, parameter :: inv_factorial_095 = inv_factorial_094/95 real(kind=real64), public, parameter :: inv_factorial_096 = inv_factorial_095/96 real(kind=real64), public, parameter :: inv_factorial_097 = inv_factorial_096/97 real(kind=real64), public, parameter :: inv_factorial_098 = inv_factorial_097/98 real(kind=real64), public, parameter :: inv_factorial_099 = inv_factorial_098/99 real(kind=real64), public, parameter :: inv_factorial_100 = inv_factorial_099/100 real(kind=real64), public, parameter :: inv_factorial_101 = inv_factorial_100/101 real(kind=real64), public, parameter :: inv_factorial_102 = inv_factorial_101/102 real(kind=real64), public, parameter :: inv_factorial_103 = inv_factorial_102/103 real(kind=real64), public, parameter :: inv_factorial_104 = inv_factorial_103/104 real(kind=real64), public, parameter :: inv_factorial_105 = inv_factorial_104/105 real(kind=real64), public, parameter :: inv_factorial_106 = inv_factorial_105/106 real(kind=real64), public, parameter :: inv_factorial_107 = inv_factorial_106/107 real(kind=real64), public, parameter :: inv_factorial_108 = inv_factorial_107/108 real(kind=real64), public, parameter :: inv_factorial_109 = inv_factorial_108/109 real(kind=real64), public, parameter :: inv_factorial_110 = inv_factorial_109/110 real(kind=real64), public, parameter :: inv_factorial_111 = inv_factorial_110/111 real(kind=real64), public, parameter :: inv_factorial_112 = inv_factorial_111/112 real(kind=real64), public, parameter :: inv_factorial_113 = inv_factorial_112/113 real(kind=real64), public, parameter :: inv_factorial_114 = inv_factorial_113/114 real(kind=real64), public, parameter :: inv_factorial_115 = inv_factorial_114/115 real(kind=real64), public, parameter :: inv_factorial_116 = inv_factorial_115/116 real(kind=real64), public, parameter :: inv_factorial_117 = inv_factorial_116/117 real(kind=real64), public, parameter :: inv_factorial_118 = inv_factorial_117/118 real(kind=real64), public, parameter :: inv_factorial_119 = inv_factorial_118/119 real(kind=real64), public, parameter :: inv_factorial_120 = inv_factorial_119/120 real(kind=real64), public, parameter :: inv_factorial_121 = inv_factorial_120/121 real(kind=real64), public, parameter :: inv_factorial_122 = inv_factorial_121/122 real(kind=real64), public, parameter :: inv_factorial_123 = inv_factorial_122/123 real(kind=real64), public, parameter :: inv_factorial_124 = inv_factorial_123/124 real(kind=real64), public, parameter :: inv_factorial_125 = inv_factorial_124/125 real(kind=real64), public, parameter :: inv_factorial_126 = inv_factorial_125/126 real(kind=real64), public, parameter :: inv_factorial_127 = inv_factorial_126/127 real(kind=real64), public, parameter :: inv_factorial_128 = inv_factorial_127/128 real(kind=real64), public, parameter :: inv_factorial_129 = inv_factorial_128/129 real(kind=real64), public, parameter :: inv_factorial_130 = inv_factorial_129/130 real(kind=real64), public, parameter :: inv_factorial_131 = inv_factorial_130/131 real(kind=real64), public, parameter :: inv_factorial_132 = inv_factorial_131/132 real(kind=real64), public, parameter :: inv_factorial_133 = inv_factorial_132/133 real(kind=real64), public, parameter :: inv_factorial_134 = inv_factorial_133/134 real(kind=real64), public, parameter :: inv_factorial_135 = inv_factorial_134/135 real(kind=real64), public, parameter :: inv_factorial_136 = inv_factorial_135/136 real(kind=real64), public, parameter :: inv_factorial_137 = inv_factorial_136/137 real(kind=real64), public, parameter :: inv_factorial_138 = inv_factorial_137/138 real(kind=real64), public, parameter :: inv_factorial_139 = inv_factorial_138/139 real(kind=real64), public, parameter :: inv_factorial_140 = inv_factorial_139/140 real(kind=real64), public, parameter :: inv_factorial_141 = inv_factorial_140/141 real(kind=real64), public, parameter :: inv_factorial_142 = inv_factorial_141/142 real(kind=real64), public, parameter :: inv_factorial_143 = inv_factorial_142/143 real(kind=real64), public, parameter :: inv_factorial_144 = inv_factorial_143/144 real(kind=real64), public, parameter :: inv_factorial_145 = inv_factorial_144/145 real(kind=real64), public, parameter :: inv_factorial_146 = inv_factorial_145/146 real(kind=real64), public, parameter :: inv_factorial_147 = inv_factorial_146/147 real(kind=real64), public, parameter :: inv_factorial_148 = inv_factorial_147/148 real(kind=real64), public, parameter :: inv_factorial_149 = inv_factorial_148/149 real(kind=real64), public, parameter :: inv_factorial_150 = inv_factorial_149/150 real(kind=real64), public, parameter :: inv_factorial_151 = inv_factorial_150/151 real(kind=real64), public, parameter :: inv_factorial_152 = inv_factorial_151/152 real(kind=real64), public, parameter :: inv_factorial_153 = inv_factorial_152/153 real(kind=real64), public, parameter :: inv_factorial_154 = inv_factorial_153/154 real(kind=real64), public, parameter :: inv_factorial_155 = inv_factorial_154/155 real(kind=real64), public, parameter :: inv_factorial_156 = inv_factorial_155/156 real(kind=real64), public, parameter :: inv_factorial_157 = inv_factorial_156/157 real(kind=real64), public, parameter :: inv_factorial_158 = inv_factorial_157/158 real(kind=real64), public, parameter :: inv_factorial_159 = inv_factorial_158/159 real(kind=real64), public, parameter :: inv_factorial_160 = inv_factorial_159/160 real(kind=real64), public, parameter :: inv_factorial_161 = inv_factorial_160/161 real(kind=real64), public, parameter :: inv_factorial_162 = inv_factorial_161/162 real(kind=real64), public, parameter :: inv_factorial_163 = inv_factorial_162/163 real(kind=real64), public, parameter :: inv_factorial_164 = inv_factorial_163/164 real(kind=real64), public, parameter :: inv_factorial_165 = inv_factorial_164/165 real(kind=real64), public, parameter :: inv_factorial_166 = inv_factorial_165/166 real(kind=real64), public, parameter :: inv_factorial_167 = inv_factorial_166/167 real(kind=real64), public, parameter :: inv_factorial_168 = inv_factorial_167/168 real(kind=real64), public, parameter :: inv_factorial_169 = inv_factorial_168/169 real(kind=real64), public, parameter :: inv_factorial_170 = inv_factorial_169/170 real(kind=real64), public, parameter :: inv_factorial_171 = inv_factorial_170/171 real(kind=real64), public, parameter :: inv_factorial_172 = inv_factorial_171/172 real(kind=real64), public, parameter :: inv_factorial_173 = inv_factorial_172/173 real(kind=real64), public, parameter :: inv_factorial_174 = inv_factorial_173/174 real(kind=real64), public, parameter :: inv_factorial_175 = inv_factorial_174/175 real(kind=real64), public, parameter :: inv_factorial_176 = inv_factorial_175/176 real(kind=real64), public, parameter :: inv_factorial_177 = inv_factorial_176/177","tags":"","url":"module/inv_factorial_real64.html"},{"title":"taylor_series_fortran – taylor_series_fortran","text":"Uses iso_fortran_env Used by Descendants: imp_taylor_series_cos_real128 imp_taylor_series_cos_real32 imp_taylor_series_cos_real64 imp_taylor_series_exp_real128 imp_taylor_series_exp_real32 imp_taylor_series_exp_real64 imp_taylor_series_sin_real128 imp_taylor_series_sin_real32 imp_taylor_series_sin_real64 Interfaces public        interface taylor_series_cos_000 cos(x) approximation by a 0th order Taylor series private elemental module function taylor_series_cos_000_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_000_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_000_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_001 cos(x) approximation by a 1st order Taylor series private elemental module function taylor_series_cos_001_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_001_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_001_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_002 cos(x) approximation by a 2nd order Taylor series private elemental module function taylor_series_cos_002_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_002_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_002_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_003 cos(x) approximation by a 3rd order Taylor series private elemental module function taylor_series_cos_003_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_003_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_003_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_004 cos(x) approximation by a 4th order Taylor series private elemental module function taylor_series_cos_004_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_004_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_004_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_005 cos(x) approximation by a 5th order Taylor series private elemental module function taylor_series_cos_005_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_005_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_005_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_006 cos(x) approximation by a 6th order Taylor series private elemental module function taylor_series_cos_006_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_006_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_006_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_007 cos(x) approximation by a 7th order Taylor series private elemental module function taylor_series_cos_007_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_007_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_007_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_008 cos(x) approximation by a 8th order Taylor series private elemental module function taylor_series_cos_008_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_008_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_008_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_009 cos(x) approximation by a 9th order Taylor series private elemental module function taylor_series_cos_009_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_009_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_009_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_010 cos(x) approximation by a 10th order Taylor series private elemental module function taylor_series_cos_010_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_010_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_010_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_011 cos(x) approximation by a 11th order Taylor series private elemental module function taylor_series_cos_011_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_011_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_011_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_012 cos(x) approximation by a 12th order Taylor series private elemental module function taylor_series_cos_012_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_012_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_012_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_013 cos(x) approximation by a 13th order Taylor series private elemental module function taylor_series_cos_013_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_013_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_013_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_014 cos(x) approximation by a 14th order Taylor series private elemental module function taylor_series_cos_014_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_014_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_014_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_015 cos(x) approximation by a 15th order Taylor series private elemental module function taylor_series_cos_015_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_015_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_015_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_016 cos(x) approximation by a 16th order Taylor series private elemental module function taylor_series_cos_016_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_016_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_016_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_017 cos(x) approximation by a 17th order Taylor series private elemental module function taylor_series_cos_017_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_017_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_017_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_018 cos(x) approximation by a 18th order Taylor series private elemental module function taylor_series_cos_018_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_018_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_018_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_019 cos(x) approximation by a 19th order Taylor series private elemental module function taylor_series_cos_019_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_019_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_019_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_020 cos(x) approximation by a 20th order Taylor series private elemental module function taylor_series_cos_020_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_020_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_020_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_021 cos(x) approximation by a 21st order Taylor series private elemental module function taylor_series_cos_021_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_021_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_021_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_022 cos(x) approximation by a 22nd order Taylor series private elemental module function taylor_series_cos_022_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_022_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_022_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_023 cos(x) approximation by a 23rd order Taylor series private elemental module function taylor_series_cos_023_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_023_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_023_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_024 cos(x) approximation by a 24th order Taylor series private elemental module function taylor_series_cos_024_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_024_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_024_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_025 cos(x) approximation by a 25th order Taylor series private elemental module function taylor_series_cos_025_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_025_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_025_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_026 cos(x) approximation by a 26th order Taylor series private elemental module function taylor_series_cos_026_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_026_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_026_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_027 cos(x) approximation by a 27th order Taylor series private elemental module function taylor_series_cos_027_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_027_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_027_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_028 cos(x) approximation by a 28th order Taylor series private elemental module function taylor_series_cos_028_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_028_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_028_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_029 cos(x) approximation by a 29th order Taylor series private elemental module function taylor_series_cos_029_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_029_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_029_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_030 cos(x) approximation by a 30th order Taylor series private elemental module function taylor_series_cos_030_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_030_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_030_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_031 cos(x) approximation by a 31st order Taylor series private elemental module function taylor_series_cos_031_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_031_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_031_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_032 cos(x) approximation by a 32nd order Taylor series private elemental module function taylor_series_cos_032_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_032_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_032_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_033 cos(x) approximation by a 33rd order Taylor series private elemental module function taylor_series_cos_033_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_033_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_033_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_034 cos(x) approximation by a 34th order Taylor series private elemental module function taylor_series_cos_034_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_034_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_034_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_035 cos(x) approximation by a 35th order Taylor series private elemental module function taylor_series_cos_035_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_035_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_035_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_036 cos(x) approximation by a 36th order Taylor series private elemental module function taylor_series_cos_036_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_036_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_036_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_037 cos(x) approximation by a 37th order Taylor series private elemental module function taylor_series_cos_037_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_037_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_037_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_038 cos(x) approximation by a 38th order Taylor series private elemental module function taylor_series_cos_038_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_cos_038_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_038_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_039 cos(x) approximation by a 39th order Taylor series private elemental module function taylor_series_cos_039_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_039_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_040 cos(x) approximation by a 40th order Taylor series private elemental module function taylor_series_cos_040_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_040_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_041 cos(x) approximation by a 41st order Taylor series private elemental module function taylor_series_cos_041_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_041_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_042 cos(x) approximation by a 42nd order Taylor series private elemental module function taylor_series_cos_042_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_042_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_043 cos(x) approximation by a 43rd order Taylor series private elemental module function taylor_series_cos_043_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_043_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_044 cos(x) approximation by a 44th order Taylor series private elemental module function taylor_series_cos_044_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_044_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_045 cos(x) approximation by a 45th order Taylor series private elemental module function taylor_series_cos_045_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_045_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_046 cos(x) approximation by a 46th order Taylor series private elemental module function taylor_series_cos_046_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_046_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_047 cos(x) approximation by a 47th order Taylor series private elemental module function taylor_series_cos_047_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_047_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_048 cos(x) approximation by a 48th order Taylor series private elemental module function taylor_series_cos_048_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_048_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_049 cos(x) approximation by a 49th order Taylor series private elemental module function taylor_series_cos_049_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_049_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_050 cos(x) approximation by a 50th order Taylor series private elemental module function taylor_series_cos_050_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_050_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_051 cos(x) approximation by a 51st order Taylor series private elemental module function taylor_series_cos_051_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_051_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_052 cos(x) approximation by a 52nd order Taylor series private elemental module function taylor_series_cos_052_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_052_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_053 cos(x) approximation by a 53rd order Taylor series private elemental module function taylor_series_cos_053_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_053_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_054 cos(x) approximation by a 54th order Taylor series private elemental module function taylor_series_cos_054_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_054_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_055 cos(x) approximation by a 55th order Taylor series private elemental module function taylor_series_cos_055_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_055_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_056 cos(x) approximation by a 56th order Taylor series private elemental module function taylor_series_cos_056_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_056_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_057 cos(x) approximation by a 57th order Taylor series private elemental module function taylor_series_cos_057_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_057_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_058 cos(x) approximation by a 58th order Taylor series private elemental module function taylor_series_cos_058_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_058_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_059 cos(x) approximation by a 59th order Taylor series private elemental module function taylor_series_cos_059_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_059_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_060 cos(x) approximation by a 60th order Taylor series private elemental module function taylor_series_cos_060_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_060_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_061 cos(x) approximation by a 61st order Taylor series private elemental module function taylor_series_cos_061_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_061_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_062 cos(x) approximation by a 62nd order Taylor series private elemental module function taylor_series_cos_062_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_062_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_063 cos(x) approximation by a 63rd order Taylor series private elemental module function taylor_series_cos_063_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_063_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_064 cos(x) approximation by a 64th order Taylor series private elemental module function taylor_series_cos_064_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_064_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_065 cos(x) approximation by a 65th order Taylor series private elemental module function taylor_series_cos_065_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_065_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_066 cos(x) approximation by a 66th order Taylor series private elemental module function taylor_series_cos_066_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_066_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_067 cos(x) approximation by a 67th order Taylor series private elemental module function taylor_series_cos_067_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_067_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_068 cos(x) approximation by a 68th order Taylor series private elemental module function taylor_series_cos_068_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_068_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_069 cos(x) approximation by a 69th order Taylor series private elemental module function taylor_series_cos_069_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_069_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_070 cos(x) approximation by a 70th order Taylor series private elemental module function taylor_series_cos_070_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_070_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_071 cos(x) approximation by a 71st order Taylor series private elemental module function taylor_series_cos_071_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_071_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_072 cos(x) approximation by a 72nd order Taylor series private elemental module function taylor_series_cos_072_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_072_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_073 cos(x) approximation by a 73rd order Taylor series private elemental module function taylor_series_cos_073_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_073_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_074 cos(x) approximation by a 74th order Taylor series private elemental module function taylor_series_cos_074_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_074_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_075 cos(x) approximation by a 75th order Taylor series private elemental module function taylor_series_cos_075_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_075_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_076 cos(x) approximation by a 76th order Taylor series private elemental module function taylor_series_cos_076_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_076_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_077 cos(x) approximation by a 77th order Taylor series private elemental module function taylor_series_cos_077_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_077_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_078 cos(x) approximation by a 78th order Taylor series private elemental module function taylor_series_cos_078_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_078_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_079 cos(x) approximation by a 79th order Taylor series private elemental module function taylor_series_cos_079_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_079_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_080 cos(x) approximation by a 80th order Taylor series private elemental module function taylor_series_cos_080_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_080_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_081 cos(x) approximation by a 81st order Taylor series private elemental module function taylor_series_cos_081_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_081_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_082 cos(x) approximation by a 82nd order Taylor series private elemental module function taylor_series_cos_082_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_082_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_083 cos(x) approximation by a 83rd order Taylor series private elemental module function taylor_series_cos_083_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_083_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_084 cos(x) approximation by a 84th order Taylor series private elemental module function taylor_series_cos_084_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_084_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_085 cos(x) approximation by a 85th order Taylor series private elemental module function taylor_series_cos_085_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_085_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_086 cos(x) approximation by a 86th order Taylor series private elemental module function taylor_series_cos_086_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_086_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_087 cos(x) approximation by a 87th order Taylor series private elemental module function taylor_series_cos_087_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_087_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_088 cos(x) approximation by a 88th order Taylor series private elemental module function taylor_series_cos_088_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_088_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_089 cos(x) approximation by a 89th order Taylor series private elemental module function taylor_series_cos_089_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_089_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_090 cos(x) approximation by a 90th order Taylor series private elemental module function taylor_series_cos_090_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_090_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_091 cos(x) approximation by a 91st order Taylor series private elemental module function taylor_series_cos_091_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_091_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_092 cos(x) approximation by a 92nd order Taylor series private elemental module function taylor_series_cos_092_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_092_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_093 cos(x) approximation by a 93rd order Taylor series private elemental module function taylor_series_cos_093_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_093_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_094 cos(x) approximation by a 94th order Taylor series private elemental module function taylor_series_cos_094_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_094_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_095 cos(x) approximation by a 95th order Taylor series private elemental module function taylor_series_cos_095_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_095_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_096 cos(x) approximation by a 96th order Taylor series private elemental module function taylor_series_cos_096_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_096_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_097 cos(x) approximation by a 97th order Taylor series private elemental module function taylor_series_cos_097_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_097_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_098 cos(x) approximation by a 98th order Taylor series private elemental module function taylor_series_cos_098_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_098_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_099 cos(x) approximation by a 99th order Taylor series private elemental module function taylor_series_cos_099_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_099_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_100 cos(x) approximation by a 100th order Taylor series private elemental module function taylor_series_cos_100_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_100_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_101 cos(x) approximation by a 101st order Taylor series private elemental module function taylor_series_cos_101_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_101_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_102 cos(x) approximation by a 102nd order Taylor series private elemental module function taylor_series_cos_102_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_102_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_103 cos(x) approximation by a 103rd order Taylor series private elemental module function taylor_series_cos_103_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_103_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_104 cos(x) approximation by a 104th order Taylor series private elemental module function taylor_series_cos_104_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_104_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_105 cos(x) approximation by a 105th order Taylor series private elemental module function taylor_series_cos_105_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_105_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_106 cos(x) approximation by a 106th order Taylor series private elemental module function taylor_series_cos_106_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_106_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_107 cos(x) approximation by a 107th order Taylor series private elemental module function taylor_series_cos_107_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_107_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_108 cos(x) approximation by a 108th order Taylor series private elemental module function taylor_series_cos_108_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_108_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_109 cos(x) approximation by a 109th order Taylor series private elemental module function taylor_series_cos_109_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_109_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_110 cos(x) approximation by a 110th order Taylor series private elemental module function taylor_series_cos_110_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_110_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_111 cos(x) approximation by a 111th order Taylor series private elemental module function taylor_series_cos_111_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_111_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_112 cos(x) approximation by a 112th order Taylor series private elemental module function taylor_series_cos_112_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_112_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_113 cos(x) approximation by a 113th order Taylor series private elemental module function taylor_series_cos_113_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_113_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_114 cos(x) approximation by a 114th order Taylor series private elemental module function taylor_series_cos_114_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_114_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_115 cos(x) approximation by a 115th order Taylor series private elemental module function taylor_series_cos_115_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_115_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_116 cos(x) approximation by a 116th order Taylor series private elemental module function taylor_series_cos_116_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_116_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_117 cos(x) approximation by a 117th order Taylor series private elemental module function taylor_series_cos_117_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_117_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_118 cos(x) approximation by a 118th order Taylor series private elemental module function taylor_series_cos_118_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_118_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_119 cos(x) approximation by a 119th order Taylor series private elemental module function taylor_series_cos_119_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_119_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_120 cos(x) approximation by a 120th order Taylor series private elemental module function taylor_series_cos_120_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_120_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_121 cos(x) approximation by a 121st order Taylor series private elemental module function taylor_series_cos_121_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_121_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_122 cos(x) approximation by a 122nd order Taylor series private elemental module function taylor_series_cos_122_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_122_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_123 cos(x) approximation by a 123rd order Taylor series private elemental module function taylor_series_cos_123_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_123_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_124 cos(x) approximation by a 124th order Taylor series private elemental module function taylor_series_cos_124_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_124_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_125 cos(x) approximation by a 125th order Taylor series private elemental module function taylor_series_cos_125_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_125_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_126 cos(x) approximation by a 126th order Taylor series private elemental module function taylor_series_cos_126_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_126_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_127 cos(x) approximation by a 127th order Taylor series private elemental module function taylor_series_cos_127_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_127_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_128 cos(x) approximation by a 128th order Taylor series private elemental module function taylor_series_cos_128_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_128_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_129 cos(x) approximation by a 129th order Taylor series private elemental module function taylor_series_cos_129_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_129_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_130 cos(x) approximation by a 130th order Taylor series private elemental module function taylor_series_cos_130_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_130_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_131 cos(x) approximation by a 131st order Taylor series private elemental module function taylor_series_cos_131_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_131_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_132 cos(x) approximation by a 132nd order Taylor series private elemental module function taylor_series_cos_132_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_132_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_133 cos(x) approximation by a 133rd order Taylor series private elemental module function taylor_series_cos_133_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_133_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_134 cos(x) approximation by a 134th order Taylor series private elemental module function taylor_series_cos_134_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_134_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_135 cos(x) approximation by a 135th order Taylor series private elemental module function taylor_series_cos_135_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_135_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_136 cos(x) approximation by a 136th order Taylor series private elemental module function taylor_series_cos_136_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_136_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_137 cos(x) approximation by a 137th order Taylor series private elemental module function taylor_series_cos_137_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_137_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_138 cos(x) approximation by a 138th order Taylor series private elemental module function taylor_series_cos_138_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_138_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_139 cos(x) approximation by a 139th order Taylor series private elemental module function taylor_series_cos_139_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_139_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_140 cos(x) approximation by a 140th order Taylor series private elemental module function taylor_series_cos_140_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_140_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_141 cos(x) approximation by a 141st order Taylor series private elemental module function taylor_series_cos_141_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_141_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_142 cos(x) approximation by a 142nd order Taylor series private elemental module function taylor_series_cos_142_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_142_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_143 cos(x) approximation by a 143rd order Taylor series private elemental module function taylor_series_cos_143_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_143_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_144 cos(x) approximation by a 144th order Taylor series private elemental module function taylor_series_cos_144_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_144_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_145 cos(x) approximation by a 145th order Taylor series private elemental module function taylor_series_cos_145_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_145_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_146 cos(x) approximation by a 146th order Taylor series private elemental module function taylor_series_cos_146_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_146_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_147 cos(x) approximation by a 147th order Taylor series private elemental module function taylor_series_cos_147_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_147_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_148 cos(x) approximation by a 148th order Taylor series private elemental module function taylor_series_cos_148_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_148_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_149 cos(x) approximation by a 149th order Taylor series private elemental module function taylor_series_cos_149_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_149_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_150 cos(x) approximation by a 150th order Taylor series private elemental module function taylor_series_cos_150_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_150_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_151 cos(x) approximation by a 151st order Taylor series private elemental module function taylor_series_cos_151_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_151_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_152 cos(x) approximation by a 152nd order Taylor series private elemental module function taylor_series_cos_152_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_152_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_153 cos(x) approximation by a 153rd order Taylor series private elemental module function taylor_series_cos_153_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_153_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_154 cos(x) approximation by a 154th order Taylor series private elemental module function taylor_series_cos_154_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_154_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_155 cos(x) approximation by a 155th order Taylor series private elemental module function taylor_series_cos_155_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_155_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_156 cos(x) approximation by a 156th order Taylor series private elemental module function taylor_series_cos_156_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_156_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_157 cos(x) approximation by a 157th order Taylor series private elemental module function taylor_series_cos_157_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_157_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_158 cos(x) approximation by a 158th order Taylor series private elemental module function taylor_series_cos_158_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_158_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_159 cos(x) approximation by a 159th order Taylor series private elemental module function taylor_series_cos_159_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_159_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_160 cos(x) approximation by a 160th order Taylor series private elemental module function taylor_series_cos_160_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_160_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_161 cos(x) approximation by a 161st order Taylor series private elemental module function taylor_series_cos_161_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_161_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_162 cos(x) approximation by a 162nd order Taylor series private elemental module function taylor_series_cos_162_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_162_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_163 cos(x) approximation by a 163rd order Taylor series private elemental module function taylor_series_cos_163_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_163_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_164 cos(x) approximation by a 164th order Taylor series private elemental module function taylor_series_cos_164_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_164_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_165 cos(x) approximation by a 165th order Taylor series private elemental module function taylor_series_cos_165_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_165_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_166 cos(x) approximation by a 166th order Taylor series private elemental module function taylor_series_cos_166_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_166_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_167 cos(x) approximation by a 167th order Taylor series private elemental module function taylor_series_cos_167_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_167_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_168 cos(x) approximation by a 168th order Taylor series private elemental module function taylor_series_cos_168_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_168_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_169 cos(x) approximation by a 169th order Taylor series private elemental module function taylor_series_cos_169_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_169_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_170 cos(x) approximation by a 170th order Taylor series private elemental module function taylor_series_cos_170_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_170_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_171 cos(x) approximation by a 171st order Taylor series private elemental module function taylor_series_cos_171_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_171_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_172 cos(x) approximation by a 172nd order Taylor series private elemental module function taylor_series_cos_172_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_172_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_173 cos(x) approximation by a 173rd order Taylor series private elemental module function taylor_series_cos_173_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_173_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_174 cos(x) approximation by a 174th order Taylor series private elemental module function taylor_series_cos_174_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_174_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_175 cos(x) approximation by a 175th order Taylor series private elemental module function taylor_series_cos_175_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_175_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_cos_176 cos(x) approximation by a 176th order Taylor series private elemental module function taylor_series_cos_176_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_cos_176_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_000 exp(x) approximation by a 0th order Taylor series private elemental module function taylor_series_exp_000_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_000_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_000_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_001 exp(x) approximation by a 1st order Taylor series private elemental module function taylor_series_exp_001_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_001_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_001_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_002 exp(x) approximation by a 2nd order Taylor series private elemental module function taylor_series_exp_002_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_002_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_002_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_003 exp(x) approximation by a 3rd order Taylor series private elemental module function taylor_series_exp_003_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_003_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_003_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_004 exp(x) approximation by a 4th order Taylor series private elemental module function taylor_series_exp_004_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_004_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_004_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_005 exp(x) approximation by a 5th order Taylor series private elemental module function taylor_series_exp_005_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_005_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_005_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_006 exp(x) approximation by a 6th order Taylor series private elemental module function taylor_series_exp_006_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_006_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_006_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_007 exp(x) approximation by a 7th order Taylor series private elemental module function taylor_series_exp_007_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_007_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_007_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_008 exp(x) approximation by a 8th order Taylor series private elemental module function taylor_series_exp_008_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_008_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_008_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_009 exp(x) approximation by a 9th order Taylor series private elemental module function taylor_series_exp_009_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_009_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_009_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_010 exp(x) approximation by a 10th order Taylor series private elemental module function taylor_series_exp_010_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_010_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_010_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_011 exp(x) approximation by a 11th order Taylor series private elemental module function taylor_series_exp_011_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_011_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_011_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_012 exp(x) approximation by a 12th order Taylor series private elemental module function taylor_series_exp_012_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_012_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_012_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_013 exp(x) approximation by a 13th order Taylor series private elemental module function taylor_series_exp_013_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_013_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_013_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_014 exp(x) approximation by a 14th order Taylor series private elemental module function taylor_series_exp_014_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_014_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_014_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_015 exp(x) approximation by a 15th order Taylor series private elemental module function taylor_series_exp_015_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_015_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_015_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_016 exp(x) approximation by a 16th order Taylor series private elemental module function taylor_series_exp_016_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_016_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_016_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_017 exp(x) approximation by a 17th order Taylor series private elemental module function taylor_series_exp_017_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_017_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_017_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_018 exp(x) approximation by a 18th order Taylor series private elemental module function taylor_series_exp_018_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_018_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_018_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_019 exp(x) approximation by a 19th order Taylor series private elemental module function taylor_series_exp_019_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_019_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_019_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_020 exp(x) approximation by a 20th order Taylor series private elemental module function taylor_series_exp_020_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_020_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_020_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_021 exp(x) approximation by a 21st order Taylor series private elemental module function taylor_series_exp_021_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_021_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_021_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_022 exp(x) approximation by a 22nd order Taylor series private elemental module function taylor_series_exp_022_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_022_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_022_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_023 exp(x) approximation by a 23rd order Taylor series private elemental module function taylor_series_exp_023_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_023_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_023_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_024 exp(x) approximation by a 24th order Taylor series private elemental module function taylor_series_exp_024_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_024_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_024_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_025 exp(x) approximation by a 25th order Taylor series private elemental module function taylor_series_exp_025_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_025_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_025_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_026 exp(x) approximation by a 26th order Taylor series private elemental module function taylor_series_exp_026_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_026_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_026_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_027 exp(x) approximation by a 27th order Taylor series private elemental module function taylor_series_exp_027_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_027_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_027_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_028 exp(x) approximation by a 28th order Taylor series private elemental module function taylor_series_exp_028_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_028_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_028_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_029 exp(x) approximation by a 29th order Taylor series private elemental module function taylor_series_exp_029_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_029_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_029_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_030 exp(x) approximation by a 30th order Taylor series private elemental module function taylor_series_exp_030_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_030_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_030_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_031 exp(x) approximation by a 31st order Taylor series private elemental module function taylor_series_exp_031_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_031_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_031_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_032 exp(x) approximation by a 32nd order Taylor series private elemental module function taylor_series_exp_032_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_032_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_032_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_033 exp(x) approximation by a 33rd order Taylor series private elemental module function taylor_series_exp_033_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_033_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_033_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_034 exp(x) approximation by a 34th order Taylor series private elemental module function taylor_series_exp_034_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_034_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_034_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_035 exp(x) approximation by a 35th order Taylor series private elemental module function taylor_series_exp_035_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_035_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_035_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_036 exp(x) approximation by a 36th order Taylor series private elemental module function taylor_series_exp_036_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_036_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_036_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_037 exp(x) approximation by a 37th order Taylor series private elemental module function taylor_series_exp_037_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_037_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_037_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_038 exp(x) approximation by a 38th order Taylor series private elemental module function taylor_series_exp_038_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_exp_038_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_038_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_039 exp(x) approximation by a 39th order Taylor series private elemental module function taylor_series_exp_039_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_039_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_040 exp(x) approximation by a 40th order Taylor series private elemental module function taylor_series_exp_040_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_040_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_041 exp(x) approximation by a 41st order Taylor series private elemental module function taylor_series_exp_041_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_041_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_042 exp(x) approximation by a 42nd order Taylor series private elemental module function taylor_series_exp_042_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_042_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_043 exp(x) approximation by a 43rd order Taylor series private elemental module function taylor_series_exp_043_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_043_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_044 exp(x) approximation by a 44th order Taylor series private elemental module function taylor_series_exp_044_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_044_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_045 exp(x) approximation by a 45th order Taylor series private elemental module function taylor_series_exp_045_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_045_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_046 exp(x) approximation by a 46th order Taylor series private elemental module function taylor_series_exp_046_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_046_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_047 exp(x) approximation by a 47th order Taylor series private elemental module function taylor_series_exp_047_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_047_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_048 exp(x) approximation by a 48th order Taylor series private elemental module function taylor_series_exp_048_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_048_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_049 exp(x) approximation by a 49th order Taylor series private elemental module function taylor_series_exp_049_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_049_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_050 exp(x) approximation by a 50th order Taylor series private elemental module function taylor_series_exp_050_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_050_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_051 exp(x) approximation by a 51st order Taylor series private elemental module function taylor_series_exp_051_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_051_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_052 exp(x) approximation by a 52nd order Taylor series private elemental module function taylor_series_exp_052_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_052_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_053 exp(x) approximation by a 53rd order Taylor series private elemental module function taylor_series_exp_053_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_053_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_054 exp(x) approximation by a 54th order Taylor series private elemental module function taylor_series_exp_054_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_054_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_055 exp(x) approximation by a 55th order Taylor series private elemental module function taylor_series_exp_055_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_055_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_056 exp(x) approximation by a 56th order Taylor series private elemental module function taylor_series_exp_056_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_056_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_057 exp(x) approximation by a 57th order Taylor series private elemental module function taylor_series_exp_057_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_057_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_058 exp(x) approximation by a 58th order Taylor series private elemental module function taylor_series_exp_058_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_058_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_059 exp(x) approximation by a 59th order Taylor series private elemental module function taylor_series_exp_059_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_059_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_060 exp(x) approximation by a 60th order Taylor series private elemental module function taylor_series_exp_060_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_060_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_061 exp(x) approximation by a 61st order Taylor series private elemental module function taylor_series_exp_061_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_061_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_062 exp(x) approximation by a 62nd order Taylor series private elemental module function taylor_series_exp_062_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_062_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_063 exp(x) approximation by a 63rd order Taylor series private elemental module function taylor_series_exp_063_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_063_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_064 exp(x) approximation by a 64th order Taylor series private elemental module function taylor_series_exp_064_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_064_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_065 exp(x) approximation by a 65th order Taylor series private elemental module function taylor_series_exp_065_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_065_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_066 exp(x) approximation by a 66th order Taylor series private elemental module function taylor_series_exp_066_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_066_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_067 exp(x) approximation by a 67th order Taylor series private elemental module function taylor_series_exp_067_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_067_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_068 exp(x) approximation by a 68th order Taylor series private elemental module function taylor_series_exp_068_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_068_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_069 exp(x) approximation by a 69th order Taylor series private elemental module function taylor_series_exp_069_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_069_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_070 exp(x) approximation by a 70th order Taylor series private elemental module function taylor_series_exp_070_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_070_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_071 exp(x) approximation by a 71st order Taylor series private elemental module function taylor_series_exp_071_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_071_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_072 exp(x) approximation by a 72nd order Taylor series private elemental module function taylor_series_exp_072_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_072_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_073 exp(x) approximation by a 73rd order Taylor series private elemental module function taylor_series_exp_073_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_073_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_074 exp(x) approximation by a 74th order Taylor series private elemental module function taylor_series_exp_074_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_074_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_075 exp(x) approximation by a 75th order Taylor series private elemental module function taylor_series_exp_075_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_075_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_076 exp(x) approximation by a 76th order Taylor series private elemental module function taylor_series_exp_076_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_076_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_077 exp(x) approximation by a 77th order Taylor series private elemental module function taylor_series_exp_077_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_077_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_078 exp(x) approximation by a 78th order Taylor series private elemental module function taylor_series_exp_078_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_078_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_079 exp(x) approximation by a 79th order Taylor series private elemental module function taylor_series_exp_079_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_079_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_080 exp(x) approximation by a 80th order Taylor series private elemental module function taylor_series_exp_080_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_080_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_081 exp(x) approximation by a 81st order Taylor series private elemental module function taylor_series_exp_081_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_081_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_082 exp(x) approximation by a 82nd order Taylor series private elemental module function taylor_series_exp_082_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_082_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_083 exp(x) approximation by a 83rd order Taylor series private elemental module function taylor_series_exp_083_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_083_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_084 exp(x) approximation by a 84th order Taylor series private elemental module function taylor_series_exp_084_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_084_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_085 exp(x) approximation by a 85th order Taylor series private elemental module function taylor_series_exp_085_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_085_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_086 exp(x) approximation by a 86th order Taylor series private elemental module function taylor_series_exp_086_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_086_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_087 exp(x) approximation by a 87th order Taylor series private elemental module function taylor_series_exp_087_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_087_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_088 exp(x) approximation by a 88th order Taylor series private elemental module function taylor_series_exp_088_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_088_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_089 exp(x) approximation by a 89th order Taylor series private elemental module function taylor_series_exp_089_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_089_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_090 exp(x) approximation by a 90th order Taylor series private elemental module function taylor_series_exp_090_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_090_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_091 exp(x) approximation by a 91st order Taylor series private elemental module function taylor_series_exp_091_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_091_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_092 exp(x) approximation by a 92nd order Taylor series private elemental module function taylor_series_exp_092_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_092_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_093 exp(x) approximation by a 93rd order Taylor series private elemental module function taylor_series_exp_093_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_093_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_094 exp(x) approximation by a 94th order Taylor series private elemental module function taylor_series_exp_094_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_094_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_095 exp(x) approximation by a 95th order Taylor series private elemental module function taylor_series_exp_095_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_095_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_096 exp(x) approximation by a 96th order Taylor series private elemental module function taylor_series_exp_096_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_096_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_097 exp(x) approximation by a 97th order Taylor series private elemental module function taylor_series_exp_097_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_097_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_098 exp(x) approximation by a 98th order Taylor series private elemental module function taylor_series_exp_098_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_098_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_099 exp(x) approximation by a 99th order Taylor series private elemental module function taylor_series_exp_099_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_099_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_100 exp(x) approximation by a 100th order Taylor series private elemental module function taylor_series_exp_100_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_100_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_101 exp(x) approximation by a 101st order Taylor series private elemental module function taylor_series_exp_101_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_101_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_102 exp(x) approximation by a 102nd order Taylor series private elemental module function taylor_series_exp_102_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_102_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_103 exp(x) approximation by a 103rd order Taylor series private elemental module function taylor_series_exp_103_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_103_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_104 exp(x) approximation by a 104th order Taylor series private elemental module function taylor_series_exp_104_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_104_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_105 exp(x) approximation by a 105th order Taylor series private elemental module function taylor_series_exp_105_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_105_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_106 exp(x) approximation by a 106th order Taylor series private elemental module function taylor_series_exp_106_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_106_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_107 exp(x) approximation by a 107th order Taylor series private elemental module function taylor_series_exp_107_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_107_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_108 exp(x) approximation by a 108th order Taylor series private elemental module function taylor_series_exp_108_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_108_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_109 exp(x) approximation by a 109th order Taylor series private elemental module function taylor_series_exp_109_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_109_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_110 exp(x) approximation by a 110th order Taylor series private elemental module function taylor_series_exp_110_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_110_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_111 exp(x) approximation by a 111th order Taylor series private elemental module function taylor_series_exp_111_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_111_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_112 exp(x) approximation by a 112th order Taylor series private elemental module function taylor_series_exp_112_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_112_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_113 exp(x) approximation by a 113th order Taylor series private elemental module function taylor_series_exp_113_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_113_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_114 exp(x) approximation by a 114th order Taylor series private elemental module function taylor_series_exp_114_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_114_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_115 exp(x) approximation by a 115th order Taylor series private elemental module function taylor_series_exp_115_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_115_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_116 exp(x) approximation by a 116th order Taylor series private elemental module function taylor_series_exp_116_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_116_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_117 exp(x) approximation by a 117th order Taylor series private elemental module function taylor_series_exp_117_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_117_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_118 exp(x) approximation by a 118th order Taylor series private elemental module function taylor_series_exp_118_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_118_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_119 exp(x) approximation by a 119th order Taylor series private elemental module function taylor_series_exp_119_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_119_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_120 exp(x) approximation by a 120th order Taylor series private elemental module function taylor_series_exp_120_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_120_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_121 exp(x) approximation by a 121st order Taylor series private elemental module function taylor_series_exp_121_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_121_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_122 exp(x) approximation by a 122nd order Taylor series private elemental module function taylor_series_exp_122_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_122_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_123 exp(x) approximation by a 123rd order Taylor series private elemental module function taylor_series_exp_123_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_123_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_124 exp(x) approximation by a 124th order Taylor series private elemental module function taylor_series_exp_124_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_124_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_125 exp(x) approximation by a 125th order Taylor series private elemental module function taylor_series_exp_125_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_125_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_126 exp(x) approximation by a 126th order Taylor series private elemental module function taylor_series_exp_126_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_126_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_127 exp(x) approximation by a 127th order Taylor series private elemental module function taylor_series_exp_127_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_127_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_128 exp(x) approximation by a 128th order Taylor series private elemental module function taylor_series_exp_128_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_128_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_129 exp(x) approximation by a 129th order Taylor series private elemental module function taylor_series_exp_129_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_129_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_130 exp(x) approximation by a 130th order Taylor series private elemental module function taylor_series_exp_130_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_130_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_131 exp(x) approximation by a 131st order Taylor series private elemental module function taylor_series_exp_131_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_131_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_132 exp(x) approximation by a 132nd order Taylor series private elemental module function taylor_series_exp_132_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_132_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_133 exp(x) approximation by a 133rd order Taylor series private elemental module function taylor_series_exp_133_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_133_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_134 exp(x) approximation by a 134th order Taylor series private elemental module function taylor_series_exp_134_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_134_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_135 exp(x) approximation by a 135th order Taylor series private elemental module function taylor_series_exp_135_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_135_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_136 exp(x) approximation by a 136th order Taylor series private elemental module function taylor_series_exp_136_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_136_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_137 exp(x) approximation by a 137th order Taylor series private elemental module function taylor_series_exp_137_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_137_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_138 exp(x) approximation by a 138th order Taylor series private elemental module function taylor_series_exp_138_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_138_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_139 exp(x) approximation by a 139th order Taylor series private elemental module function taylor_series_exp_139_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_139_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_140 exp(x) approximation by a 140th order Taylor series private elemental module function taylor_series_exp_140_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_140_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_141 exp(x) approximation by a 141st order Taylor series private elemental module function taylor_series_exp_141_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_141_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_142 exp(x) approximation by a 142nd order Taylor series private elemental module function taylor_series_exp_142_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_142_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_143 exp(x) approximation by a 143rd order Taylor series private elemental module function taylor_series_exp_143_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_143_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_144 exp(x) approximation by a 144th order Taylor series private elemental module function taylor_series_exp_144_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_144_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_145 exp(x) approximation by a 145th order Taylor series private elemental module function taylor_series_exp_145_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_145_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_146 exp(x) approximation by a 146th order Taylor series private elemental module function taylor_series_exp_146_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_146_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_147 exp(x) approximation by a 147th order Taylor series private elemental module function taylor_series_exp_147_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_147_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_148 exp(x) approximation by a 148th order Taylor series private elemental module function taylor_series_exp_148_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_148_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_149 exp(x) approximation by a 149th order Taylor series private elemental module function taylor_series_exp_149_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_149_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_150 exp(x) approximation by a 150th order Taylor series private elemental module function taylor_series_exp_150_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_150_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_151 exp(x) approximation by a 151st order Taylor series private elemental module function taylor_series_exp_151_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_151_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_152 exp(x) approximation by a 152nd order Taylor series private elemental module function taylor_series_exp_152_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_152_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_153 exp(x) approximation by a 153rd order Taylor series private elemental module function taylor_series_exp_153_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_153_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_154 exp(x) approximation by a 154th order Taylor series private elemental module function taylor_series_exp_154_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_154_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_155 exp(x) approximation by a 155th order Taylor series private elemental module function taylor_series_exp_155_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_155_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_156 exp(x) approximation by a 156th order Taylor series private elemental module function taylor_series_exp_156_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_156_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_157 exp(x) approximation by a 157th order Taylor series private elemental module function taylor_series_exp_157_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_157_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_158 exp(x) approximation by a 158th order Taylor series private elemental module function taylor_series_exp_158_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_158_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_159 exp(x) approximation by a 159th order Taylor series private elemental module function taylor_series_exp_159_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_159_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_160 exp(x) approximation by a 160th order Taylor series private elemental module function taylor_series_exp_160_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_160_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_161 exp(x) approximation by a 161st order Taylor series private elemental module function taylor_series_exp_161_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_161_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_162 exp(x) approximation by a 162nd order Taylor series private elemental module function taylor_series_exp_162_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_162_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_163 exp(x) approximation by a 163rd order Taylor series private elemental module function taylor_series_exp_163_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_163_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_164 exp(x) approximation by a 164th order Taylor series private elemental module function taylor_series_exp_164_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_164_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_165 exp(x) approximation by a 165th order Taylor series private elemental module function taylor_series_exp_165_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_165_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_166 exp(x) approximation by a 166th order Taylor series private elemental module function taylor_series_exp_166_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_166_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_167 exp(x) approximation by a 167th order Taylor series private elemental module function taylor_series_exp_167_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_167_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_168 exp(x) approximation by a 168th order Taylor series private elemental module function taylor_series_exp_168_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_168_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_169 exp(x) approximation by a 169th order Taylor series private elemental module function taylor_series_exp_169_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_169_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_170 exp(x) approximation by a 170th order Taylor series private elemental module function taylor_series_exp_170_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_170_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_171 exp(x) approximation by a 171st order Taylor series private elemental module function taylor_series_exp_171_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_171_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_172 exp(x) approximation by a 172nd order Taylor series private elemental module function taylor_series_exp_172_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_172_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_173 exp(x) approximation by a 173rd order Taylor series private elemental module function taylor_series_exp_173_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_173_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_174 exp(x) approximation by a 174th order Taylor series private elemental module function taylor_series_exp_174_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_174_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_175 exp(x) approximation by a 175th order Taylor series private elemental module function taylor_series_exp_175_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_175_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_176 exp(x) approximation by a 176th order Taylor series private elemental module function taylor_series_exp_176_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_176_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_exp_177 exp(x) approximation by a 177th order Taylor series private elemental module function taylor_series_exp_177_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_exp_177_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_000 sin(x) approximation by a 0th order Taylor series private elemental module function taylor_series_sin_000_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_000_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_000_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_001 sin(x) approximation by a 1st order Taylor series private elemental module function taylor_series_sin_001_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_001_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_001_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_002 sin(x) approximation by a 2nd order Taylor series private elemental module function taylor_series_sin_002_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_002_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_002_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_003 sin(x) approximation by a 3rd order Taylor series private elemental module function taylor_series_sin_003_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_003_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_003_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_004 sin(x) approximation by a 4th order Taylor series private elemental module function taylor_series_sin_004_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_004_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_004_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_005 sin(x) approximation by a 5th order Taylor series private elemental module function taylor_series_sin_005_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_005_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_005_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_006 sin(x) approximation by a 6th order Taylor series private elemental module function taylor_series_sin_006_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_006_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_006_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_007 sin(x) approximation by a 7th order Taylor series private elemental module function taylor_series_sin_007_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_007_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_007_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_008 sin(x) approximation by a 8th order Taylor series private elemental module function taylor_series_sin_008_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_008_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_008_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_009 sin(x) approximation by a 9th order Taylor series private elemental module function taylor_series_sin_009_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_009_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_009_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_010 sin(x) approximation by a 10th order Taylor series private elemental module function taylor_series_sin_010_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_010_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_010_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_011 sin(x) approximation by a 11th order Taylor series private elemental module function taylor_series_sin_011_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_011_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_011_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_012 sin(x) approximation by a 12th order Taylor series private elemental module function taylor_series_sin_012_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_012_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_012_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_013 sin(x) approximation by a 13th order Taylor series private elemental module function taylor_series_sin_013_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_013_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_013_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_014 sin(x) approximation by a 14th order Taylor series private elemental module function taylor_series_sin_014_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_014_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_014_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_015 sin(x) approximation by a 15th order Taylor series private elemental module function taylor_series_sin_015_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_015_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_015_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_016 sin(x) approximation by a 16th order Taylor series private elemental module function taylor_series_sin_016_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_016_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_016_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_017 sin(x) approximation by a 17th order Taylor series private elemental module function taylor_series_sin_017_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_017_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_017_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_018 sin(x) approximation by a 18th order Taylor series private elemental module function taylor_series_sin_018_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_018_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_018_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_019 sin(x) approximation by a 19th order Taylor series private elemental module function taylor_series_sin_019_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_019_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_019_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_020 sin(x) approximation by a 20th order Taylor series private elemental module function taylor_series_sin_020_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_020_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_020_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_021 sin(x) approximation by a 21st order Taylor series private elemental module function taylor_series_sin_021_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_021_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_021_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_022 sin(x) approximation by a 22nd order Taylor series private elemental module function taylor_series_sin_022_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_022_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_022_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_023 sin(x) approximation by a 23rd order Taylor series private elemental module function taylor_series_sin_023_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_023_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_023_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_024 sin(x) approximation by a 24th order Taylor series private elemental module function taylor_series_sin_024_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_024_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_024_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_025 sin(x) approximation by a 25th order Taylor series private elemental module function taylor_series_sin_025_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_025_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_025_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_026 sin(x) approximation by a 26th order Taylor series private elemental module function taylor_series_sin_026_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_026_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_026_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_027 sin(x) approximation by a 27th order Taylor series private elemental module function taylor_series_sin_027_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_027_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_027_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_028 sin(x) approximation by a 28th order Taylor series private elemental module function taylor_series_sin_028_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_028_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_028_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_029 sin(x) approximation by a 29th order Taylor series private elemental module function taylor_series_sin_029_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_029_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_029_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_030 sin(x) approximation by a 30th order Taylor series private elemental module function taylor_series_sin_030_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_030_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_030_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_031 sin(x) approximation by a 31st order Taylor series private elemental module function taylor_series_sin_031_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_031_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_031_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_032 sin(x) approximation by a 32nd order Taylor series private elemental module function taylor_series_sin_032_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_032_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_032_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_033 sin(x) approximation by a 33rd order Taylor series private elemental module function taylor_series_sin_033_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_033_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_033_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_034 sin(x) approximation by a 34th order Taylor series private elemental module function taylor_series_sin_034_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_034_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_034_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_035 sin(x) approximation by a 35th order Taylor series private elemental module function taylor_series_sin_035_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_035_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_035_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_036 sin(x) approximation by a 36th order Taylor series private elemental module function taylor_series_sin_036_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_036_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_036_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_037 sin(x) approximation by a 37th order Taylor series private elemental module function taylor_series_sin_037_real32(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real32), intent(in) :: x Return Value real(kind=real32) private elemental module function taylor_series_sin_037_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_037_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_038 sin(x) approximation by a 38th order Taylor series private elemental module function taylor_series_sin_038_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_038_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_039 sin(x) approximation by a 39th order Taylor series private elemental module function taylor_series_sin_039_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_039_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_040 sin(x) approximation by a 40th order Taylor series private elemental module function taylor_series_sin_040_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_040_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_041 sin(x) approximation by a 41st order Taylor series private elemental module function taylor_series_sin_041_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_041_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_042 sin(x) approximation by a 42nd order Taylor series private elemental module function taylor_series_sin_042_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_042_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_043 sin(x) approximation by a 43rd order Taylor series private elemental module function taylor_series_sin_043_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_043_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_044 sin(x) approximation by a 44th order Taylor series private elemental module function taylor_series_sin_044_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_044_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_045 sin(x) approximation by a 45th order Taylor series private elemental module function taylor_series_sin_045_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_045_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_046 sin(x) approximation by a 46th order Taylor series private elemental module function taylor_series_sin_046_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_046_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_047 sin(x) approximation by a 47th order Taylor series private elemental module function taylor_series_sin_047_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_047_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_048 sin(x) approximation by a 48th order Taylor series private elemental module function taylor_series_sin_048_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_048_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_049 sin(x) approximation by a 49th order Taylor series private elemental module function taylor_series_sin_049_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_049_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_050 sin(x) approximation by a 50th order Taylor series private elemental module function taylor_series_sin_050_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_050_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_051 sin(x) approximation by a 51st order Taylor series private elemental module function taylor_series_sin_051_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_051_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_052 sin(x) approximation by a 52nd order Taylor series private elemental module function taylor_series_sin_052_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_052_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_053 sin(x) approximation by a 53rd order Taylor series private elemental module function taylor_series_sin_053_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_053_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_054 sin(x) approximation by a 54th order Taylor series private elemental module function taylor_series_sin_054_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_054_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_055 sin(x) approximation by a 55th order Taylor series private elemental module function taylor_series_sin_055_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_055_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_056 sin(x) approximation by a 56th order Taylor series private elemental module function taylor_series_sin_056_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_056_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_057 sin(x) approximation by a 57th order Taylor series private elemental module function taylor_series_sin_057_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_057_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_058 sin(x) approximation by a 58th order Taylor series private elemental module function taylor_series_sin_058_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_058_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_059 sin(x) approximation by a 59th order Taylor series private elemental module function taylor_series_sin_059_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_059_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_060 sin(x) approximation by a 60th order Taylor series private elemental module function taylor_series_sin_060_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_060_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_061 sin(x) approximation by a 61st order Taylor series private elemental module function taylor_series_sin_061_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_061_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_062 sin(x) approximation by a 62nd order Taylor series private elemental module function taylor_series_sin_062_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_062_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_063 sin(x) approximation by a 63rd order Taylor series private elemental module function taylor_series_sin_063_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_063_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_064 sin(x) approximation by a 64th order Taylor series private elemental module function taylor_series_sin_064_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_064_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_065 sin(x) approximation by a 65th order Taylor series private elemental module function taylor_series_sin_065_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_065_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_066 sin(x) approximation by a 66th order Taylor series private elemental module function taylor_series_sin_066_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_066_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_067 sin(x) approximation by a 67th order Taylor series private elemental module function taylor_series_sin_067_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_067_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_068 sin(x) approximation by a 68th order Taylor series private elemental module function taylor_series_sin_068_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_068_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_069 sin(x) approximation by a 69th order Taylor series private elemental module function taylor_series_sin_069_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_069_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_070 sin(x) approximation by a 70th order Taylor series private elemental module function taylor_series_sin_070_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_070_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_071 sin(x) approximation by a 71st order Taylor series private elemental module function taylor_series_sin_071_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_071_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_072 sin(x) approximation by a 72nd order Taylor series private elemental module function taylor_series_sin_072_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_072_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_073 sin(x) approximation by a 73rd order Taylor series private elemental module function taylor_series_sin_073_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_073_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_074 sin(x) approximation by a 74th order Taylor series private elemental module function taylor_series_sin_074_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_074_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_075 sin(x) approximation by a 75th order Taylor series private elemental module function taylor_series_sin_075_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_075_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_076 sin(x) approximation by a 76th order Taylor series private elemental module function taylor_series_sin_076_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_076_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_077 sin(x) approximation by a 77th order Taylor series private elemental module function taylor_series_sin_077_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_077_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_078 sin(x) approximation by a 78th order Taylor series private elemental module function taylor_series_sin_078_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_078_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_079 sin(x) approximation by a 79th order Taylor series private elemental module function taylor_series_sin_079_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_079_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_080 sin(x) approximation by a 80th order Taylor series private elemental module function taylor_series_sin_080_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_080_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_081 sin(x) approximation by a 81st order Taylor series private elemental module function taylor_series_sin_081_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_081_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_082 sin(x) approximation by a 82nd order Taylor series private elemental module function taylor_series_sin_082_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_082_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_083 sin(x) approximation by a 83rd order Taylor series private elemental module function taylor_series_sin_083_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_083_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_084 sin(x) approximation by a 84th order Taylor series private elemental module function taylor_series_sin_084_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_084_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_085 sin(x) approximation by a 85th order Taylor series private elemental module function taylor_series_sin_085_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_085_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_086 sin(x) approximation by a 86th order Taylor series private elemental module function taylor_series_sin_086_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_086_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_087 sin(x) approximation by a 87th order Taylor series private elemental module function taylor_series_sin_087_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_087_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_088 sin(x) approximation by a 88th order Taylor series private elemental module function taylor_series_sin_088_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_088_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_089 sin(x) approximation by a 89th order Taylor series private elemental module function taylor_series_sin_089_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_089_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_090 sin(x) approximation by a 90th order Taylor series private elemental module function taylor_series_sin_090_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_090_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_091 sin(x) approximation by a 91st order Taylor series private elemental module function taylor_series_sin_091_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_091_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_092 sin(x) approximation by a 92nd order Taylor series private elemental module function taylor_series_sin_092_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_092_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_093 sin(x) approximation by a 93rd order Taylor series private elemental module function taylor_series_sin_093_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_093_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_094 sin(x) approximation by a 94th order Taylor series private elemental module function taylor_series_sin_094_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_094_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_095 sin(x) approximation by a 95th order Taylor series private elemental module function taylor_series_sin_095_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_095_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_096 sin(x) approximation by a 96th order Taylor series private elemental module function taylor_series_sin_096_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_096_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_097 sin(x) approximation by a 97th order Taylor series private elemental module function taylor_series_sin_097_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_097_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_098 sin(x) approximation by a 98th order Taylor series private elemental module function taylor_series_sin_098_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_098_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_099 sin(x) approximation by a 99th order Taylor series private elemental module function taylor_series_sin_099_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_099_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_100 sin(x) approximation by a 100th order Taylor series private elemental module function taylor_series_sin_100_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_100_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_101 sin(x) approximation by a 101st order Taylor series private elemental module function taylor_series_sin_101_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_101_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_102 sin(x) approximation by a 102nd order Taylor series private elemental module function taylor_series_sin_102_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_102_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_103 sin(x) approximation by a 103rd order Taylor series private elemental module function taylor_series_sin_103_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_103_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_104 sin(x) approximation by a 104th order Taylor series private elemental module function taylor_series_sin_104_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_104_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_105 sin(x) approximation by a 105th order Taylor series private elemental module function taylor_series_sin_105_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_105_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_106 sin(x) approximation by a 106th order Taylor series private elemental module function taylor_series_sin_106_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_106_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_107 sin(x) approximation by a 107th order Taylor series private elemental module function taylor_series_sin_107_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_107_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_108 sin(x) approximation by a 108th order Taylor series private elemental module function taylor_series_sin_108_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_108_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_109 sin(x) approximation by a 109th order Taylor series private elemental module function taylor_series_sin_109_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_109_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_110 sin(x) approximation by a 110th order Taylor series private elemental module function taylor_series_sin_110_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_110_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_111 sin(x) approximation by a 111th order Taylor series private elemental module function taylor_series_sin_111_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_111_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_112 sin(x) approximation by a 112th order Taylor series private elemental module function taylor_series_sin_112_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_112_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_113 sin(x) approximation by a 113th order Taylor series private elemental module function taylor_series_sin_113_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_113_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_114 sin(x) approximation by a 114th order Taylor series private elemental module function taylor_series_sin_114_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_114_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_115 sin(x) approximation by a 115th order Taylor series private elemental module function taylor_series_sin_115_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_115_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_116 sin(x) approximation by a 116th order Taylor series private elemental module function taylor_series_sin_116_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_116_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_117 sin(x) approximation by a 117th order Taylor series private elemental module function taylor_series_sin_117_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_117_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_118 sin(x) approximation by a 118th order Taylor series private elemental module function taylor_series_sin_118_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_118_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_119 sin(x) approximation by a 119th order Taylor series private elemental module function taylor_series_sin_119_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_119_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_120 sin(x) approximation by a 120th order Taylor series private elemental module function taylor_series_sin_120_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_120_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_121 sin(x) approximation by a 121st order Taylor series private elemental module function taylor_series_sin_121_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_121_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_122 sin(x) approximation by a 122nd order Taylor series private elemental module function taylor_series_sin_122_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_122_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_123 sin(x) approximation by a 123rd order Taylor series private elemental module function taylor_series_sin_123_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_123_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_124 sin(x) approximation by a 124th order Taylor series private elemental module function taylor_series_sin_124_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_124_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_125 sin(x) approximation by a 125th order Taylor series private elemental module function taylor_series_sin_125_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_125_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_126 sin(x) approximation by a 126th order Taylor series private elemental module function taylor_series_sin_126_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_126_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_127 sin(x) approximation by a 127th order Taylor series private elemental module function taylor_series_sin_127_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_127_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_128 sin(x) approximation by a 128th order Taylor series private elemental module function taylor_series_sin_128_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_128_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_129 sin(x) approximation by a 129th order Taylor series private elemental module function taylor_series_sin_129_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_129_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_130 sin(x) approximation by a 130th order Taylor series private elemental module function taylor_series_sin_130_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_130_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_131 sin(x) approximation by a 131st order Taylor series private elemental module function taylor_series_sin_131_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_131_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_132 sin(x) approximation by a 132nd order Taylor series private elemental module function taylor_series_sin_132_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_132_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_133 sin(x) approximation by a 133rd order Taylor series private elemental module function taylor_series_sin_133_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_133_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_134 sin(x) approximation by a 134th order Taylor series private elemental module function taylor_series_sin_134_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_134_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_135 sin(x) approximation by a 135th order Taylor series private elemental module function taylor_series_sin_135_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_135_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_136 sin(x) approximation by a 136th order Taylor series private elemental module function taylor_series_sin_136_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_136_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_137 sin(x) approximation by a 137th order Taylor series private elemental module function taylor_series_sin_137_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_137_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_138 sin(x) approximation by a 138th order Taylor series private elemental module function taylor_series_sin_138_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_138_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_139 sin(x) approximation by a 139th order Taylor series private elemental module function taylor_series_sin_139_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_139_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_140 sin(x) approximation by a 140th order Taylor series private elemental module function taylor_series_sin_140_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_140_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_141 sin(x) approximation by a 141st order Taylor series private elemental module function taylor_series_sin_141_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_141_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_142 sin(x) approximation by a 142nd order Taylor series private elemental module function taylor_series_sin_142_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_142_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_143 sin(x) approximation by a 143rd order Taylor series private elemental module function taylor_series_sin_143_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_143_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_144 sin(x) approximation by a 144th order Taylor series private elemental module function taylor_series_sin_144_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_144_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_145 sin(x) approximation by a 145th order Taylor series private elemental module function taylor_series_sin_145_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_145_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_146 sin(x) approximation by a 146th order Taylor series private elemental module function taylor_series_sin_146_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_146_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_147 sin(x) approximation by a 147th order Taylor series private elemental module function taylor_series_sin_147_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_147_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_148 sin(x) approximation by a 148th order Taylor series private elemental module function taylor_series_sin_148_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_148_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_149 sin(x) approximation by a 149th order Taylor series private elemental module function taylor_series_sin_149_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_149_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_150 sin(x) approximation by a 150th order Taylor series private elemental module function taylor_series_sin_150_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_150_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_151 sin(x) approximation by a 151st order Taylor series private elemental module function taylor_series_sin_151_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_151_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_152 sin(x) approximation by a 152nd order Taylor series private elemental module function taylor_series_sin_152_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_152_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_153 sin(x) approximation by a 153rd order Taylor series private elemental module function taylor_series_sin_153_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_153_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_154 sin(x) approximation by a 154th order Taylor series private elemental module function taylor_series_sin_154_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_154_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_155 sin(x) approximation by a 155th order Taylor series private elemental module function taylor_series_sin_155_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_155_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_156 sin(x) approximation by a 156th order Taylor series private elemental module function taylor_series_sin_156_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_156_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_157 sin(x) approximation by a 157th order Taylor series private elemental module function taylor_series_sin_157_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_157_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_158 sin(x) approximation by a 158th order Taylor series private elemental module function taylor_series_sin_158_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_158_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_159 sin(x) approximation by a 159th order Taylor series private elemental module function taylor_series_sin_159_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_159_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_160 sin(x) approximation by a 160th order Taylor series private elemental module function taylor_series_sin_160_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_160_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_161 sin(x) approximation by a 161st order Taylor series private elemental module function taylor_series_sin_161_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_161_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_162 sin(x) approximation by a 162nd order Taylor series private elemental module function taylor_series_sin_162_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_162_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_163 sin(x) approximation by a 163rd order Taylor series private elemental module function taylor_series_sin_163_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_163_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_164 sin(x) approximation by a 164th order Taylor series private elemental module function taylor_series_sin_164_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_164_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_165 sin(x) approximation by a 165th order Taylor series private elemental module function taylor_series_sin_165_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_165_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_166 sin(x) approximation by a 166th order Taylor series private elemental module function taylor_series_sin_166_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_166_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_167 sin(x) approximation by a 167th order Taylor series private elemental module function taylor_series_sin_167_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_167_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_168 sin(x) approximation by a 168th order Taylor series private elemental module function taylor_series_sin_168_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_168_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_169 sin(x) approximation by a 169th order Taylor series private elemental module function taylor_series_sin_169_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_169_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_170 sin(x) approximation by a 170th order Taylor series private elemental module function taylor_series_sin_170_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_170_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_171 sin(x) approximation by a 171st order Taylor series private elemental module function taylor_series_sin_171_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_171_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_172 sin(x) approximation by a 172nd order Taylor series private elemental module function taylor_series_sin_172_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_172_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_173 sin(x) approximation by a 173rd order Taylor series private elemental module function taylor_series_sin_173_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_173_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_174 sin(x) approximation by a 174th order Taylor series private elemental module function taylor_series_sin_174_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_174_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_175 sin(x) approximation by a 175th order Taylor series private elemental module function taylor_series_sin_175_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_175_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_176 sin(x) approximation by a 176th order Taylor series private elemental module function taylor_series_sin_176_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_176_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128) public        interface taylor_series_sin_177 sin(x) approximation by a 177th order Taylor series private elemental module function taylor_series_sin_177_real64(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Return Value real(kind=real64) private elemental module function taylor_series_sin_177_real128(x) result(res) Arguments Type Intent Optional Attributes Name real(kind=real128), intent(in) :: x Return Value real(kind=real128)","tags":"","url":"module/taylor_series_fortran.html"},{"title":"inv_factorial_real32 – taylor_series_fortran","text":"Uses iso_fortran_env Variables Type Visibility Attributes Name Initial real(kind=real32), public, parameter :: inv_factorial_000 = 1.0_real32 real(kind=real32), public, parameter :: inv_factorial_001 = inv_factorial_000/1 real(kind=real32), public, parameter :: inv_factorial_002 = inv_factorial_001/2 real(kind=real32), public, parameter :: inv_factorial_003 = inv_factorial_002/3 real(kind=real32), public, parameter :: inv_factorial_004 = inv_factorial_003/4 real(kind=real32), public, parameter :: inv_factorial_005 = inv_factorial_004/5 real(kind=real32), public, parameter :: inv_factorial_006 = inv_factorial_005/6 real(kind=real32), public, parameter :: inv_factorial_007 = inv_factorial_006/7 real(kind=real32), public, parameter :: inv_factorial_008 = inv_factorial_007/8 real(kind=real32), public, parameter :: inv_factorial_009 = inv_factorial_008/9 real(kind=real32), public, parameter :: inv_factorial_010 = inv_factorial_009/10 real(kind=real32), public, parameter :: inv_factorial_011 = inv_factorial_010/11 real(kind=real32), public, parameter :: inv_factorial_012 = inv_factorial_011/12 real(kind=real32), public, parameter :: inv_factorial_013 = inv_factorial_012/13 real(kind=real32), public, parameter :: inv_factorial_014 = inv_factorial_013/14 real(kind=real32), public, parameter :: inv_factorial_015 = inv_factorial_014/15 real(kind=real32), public, parameter :: inv_factorial_016 = inv_factorial_015/16 real(kind=real32), public, parameter :: inv_factorial_017 = inv_factorial_016/17 real(kind=real32), public, parameter :: inv_factorial_018 = inv_factorial_017/18 real(kind=real32), public, parameter :: inv_factorial_019 = inv_factorial_018/19 real(kind=real32), public, parameter :: inv_factorial_020 = inv_factorial_019/20 real(kind=real32), public, parameter :: inv_factorial_021 = inv_factorial_020/21 real(kind=real32), public, parameter :: inv_factorial_022 = inv_factorial_021/22 real(kind=real32), public, parameter :: inv_factorial_023 = inv_factorial_022/23 real(kind=real32), public, parameter :: inv_factorial_024 = inv_factorial_023/24 real(kind=real32), public, parameter :: inv_factorial_025 = inv_factorial_024/25 real(kind=real32), public, parameter :: inv_factorial_026 = inv_factorial_025/26 real(kind=real32), public, parameter :: inv_factorial_027 = inv_factorial_026/27 real(kind=real32), public, parameter :: inv_factorial_028 = inv_factorial_027/28 real(kind=real32), public, parameter :: inv_factorial_029 = inv_factorial_028/29 real(kind=real32), public, parameter :: inv_factorial_030 = inv_factorial_029/30 real(kind=real32), public, parameter :: inv_factorial_031 = inv_factorial_030/31 real(kind=real32), public, parameter :: inv_factorial_032 = inv_factorial_031/32 real(kind=real32), public, parameter :: inv_factorial_033 = inv_factorial_032/33 real(kind=real32), public, parameter :: inv_factorial_034 = inv_factorial_033/34 real(kind=real32), public, parameter :: inv_factorial_035 = inv_factorial_034/35 real(kind=real32), public, parameter :: inv_factorial_036 = inv_factorial_035/36 real(kind=real32), public, parameter :: inv_factorial_037 = inv_factorial_036/37 real(kind=real32), public, parameter :: inv_factorial_038 = inv_factorial_037/38","tags":"","url":"module/inv_factorial_real32.html"},{"title":"imp_taylor_series_exp_real64 – taylor_series_fortran","text":"Implementation of taylor_series_exp_*** for real64 . Uses inv_factorial_real64 Ancestors: taylor_series_fortran","tags":"","url":"module/imp_taylor_series_exp_real64.html"},{"title":"imp_taylor_series_cos_real128 – taylor_series_fortran","text":"Implementation of taylor_series_cos_*** for real128 . Uses inv_factorial_real128 Ancestors: taylor_series_fortran","tags":"","url":"module/imp_taylor_series_cos_real128.html"},{"title":"imp_taylor_series_sin_real64 – taylor_series_fortran","text":"Implementation of taylor_series_sin_*** for real64 . Uses inv_factorial_real64 Ancestors: taylor_series_fortran","tags":"","url":"module/imp_taylor_series_sin_real64.html"},{"title":"imp_taylor_series_cos_real64 – taylor_series_fortran","text":"Implementation of taylor_series_cos_*** for real64 . Uses inv_factorial_real64 Ancestors: taylor_series_fortran","tags":"","url":"module/imp_taylor_series_cos_real64.html"},{"title":"imp_taylor_series_exp_real128 – taylor_series_fortran","text":"Implementation of taylor_series_exp_*** for real128 . Uses inv_factorial_real128 Ancestors: taylor_series_fortran","tags":"","url":"module/imp_taylor_series_exp_real128.html"},{"title":"imp_taylor_series_sin_real32 – taylor_series_fortran","text":"Implementation of taylor_series_sin_*** for real32 . Uses inv_factorial_real32 Ancestors: taylor_series_fortran","tags":"","url":"module/imp_taylor_series_sin_real32.html"},{"title":"imp_taylor_series_cos_real32 – taylor_series_fortran","text":"Implementation of taylor_series_cos_*** for real32 . Uses inv_factorial_real32 Ancestors: taylor_series_fortran","tags":"","url":"module/imp_taylor_series_cos_real32.html"},{"title":"imp_taylor_series_exp_real32 – taylor_series_fortran","text":"Implementation of taylor_series_exp_*** for real32 . Uses inv_factorial_real32 Ancestors: taylor_series_fortran","tags":"","url":"module/imp_taylor_series_exp_real32.html"},{"title":"imp_taylor_series_sin_real128 – taylor_series_fortran","text":"Implementation of taylor_series_sin_*** for real128 . Uses inv_factorial_real128 Ancestors: taylor_series_fortran","tags":"","url":"module/imp_taylor_series_sin_real128.html"},{"title":"main_submodule_exp_real64.f90 – taylor_series_fortran","text":"Source Code !> Implementation of `taylor_series_exp_***` for `real64`. submodule ( taylor_series_fortran ) imp_taylor_series_exp_real64 use , non_intrinsic :: inv_factorial_real64 , only : & ! coefficient_000 => inv_factorial_000 , & ! coefficient_001 => inv_factorial_001 , & ! coefficient_002 => inv_factorial_002 , & ! coefficient_003 => inv_factorial_003 , & ! coefficient_004 => inv_factorial_004 , & ! coefficient_005 => inv_factorial_005 , & ! coefficient_006 => inv_factorial_006 , & ! coefficient_007 => inv_factorial_007 , & ! coefficient_008 => inv_factorial_008 , & ! coefficient_009 => inv_factorial_009 , & ! coefficient_010 => inv_factorial_010 , & ! coefficient_011 => inv_factorial_011 , & ! coefficient_012 => inv_factorial_012 , & ! coefficient_013 => inv_factorial_013 , & ! coefficient_014 => inv_factorial_014 , & ! coefficient_015 => inv_factorial_015 , & ! coefficient_016 => inv_factorial_016 , & ! coefficient_017 => inv_factorial_017 , & ! coefficient_018 => inv_factorial_018 , & ! coefficient_019 => inv_factorial_019 , & ! coefficient_020 => inv_factorial_020 , & ! coefficient_021 => inv_factorial_021 , & ! coefficient_022 => inv_factorial_022 , & ! coefficient_023 => inv_factorial_023 , & ! coefficient_024 => inv_factorial_024 , & ! coefficient_025 => inv_factorial_025 , & ! coefficient_026 => inv_factorial_026 , & ! coefficient_027 => inv_factorial_027 , & ! coefficient_028 => inv_factorial_028 , & ! coefficient_029 => inv_factorial_029 , & ! coefficient_030 => inv_factorial_030 , & ! coefficient_031 => inv_factorial_031 , & ! coefficient_032 => inv_factorial_032 , & ! coefficient_033 => inv_factorial_033 , & ! coefficient_034 => inv_factorial_034 , & ! coefficient_035 => inv_factorial_035 , & ! coefficient_036 => inv_factorial_036 , & ! coefficient_037 => inv_factorial_037 , & ! coefficient_038 => inv_factorial_038 , & ! coefficient_039 => inv_factorial_039 , & ! coefficient_040 => inv_factorial_040 , & ! coefficient_041 => inv_factorial_041 , & ! coefficient_042 => inv_factorial_042 , & ! coefficient_043 => inv_factorial_043 , & ! coefficient_044 => inv_factorial_044 , & ! coefficient_045 => inv_factorial_045 , & ! coefficient_046 => inv_factorial_046 , & ! coefficient_047 => inv_factorial_047 , & ! coefficient_048 => inv_factorial_048 , & ! coefficient_049 => inv_factorial_049 , & ! coefficient_050 => inv_factorial_050 , & ! coefficient_051 => inv_factorial_051 , & ! coefficient_052 => inv_factorial_052 , & ! coefficient_053 => inv_factorial_053 , & ! coefficient_054 => inv_factorial_054 , & ! coefficient_055 => inv_factorial_055 , & ! coefficient_056 => inv_factorial_056 , & ! coefficient_057 => inv_factorial_057 , & ! coefficient_058 => inv_factorial_058 , & ! coefficient_059 => inv_factorial_059 , & ! coefficient_060 => inv_factorial_060 , & ! coefficient_061 => inv_factorial_061 , & ! coefficient_062 => inv_factorial_062 , & ! coefficient_063 => inv_factorial_063 , & ! coefficient_064 => inv_factorial_064 , & ! coefficient_065 => inv_factorial_065 , & ! coefficient_066 => inv_factorial_066 , & ! coefficient_067 => inv_factorial_067 , & ! coefficient_068 => inv_factorial_068 , & ! coefficient_069 => inv_factorial_069 , & ! coefficient_070 => inv_factorial_070 , & ! coefficient_071 => inv_factorial_071 , & ! coefficient_072 => inv_factorial_072 , & ! coefficient_073 => inv_factorial_073 , & ! coefficient_074 => inv_factorial_074 , & ! coefficient_075 => inv_factorial_075 , & ! coefficient_076 => inv_factorial_076 , & ! coefficient_077 => inv_factorial_077 , & ! coefficient_078 => inv_factorial_078 , & ! coefficient_079 => inv_factorial_079 , & ! coefficient_080 => inv_factorial_080 , & ! coefficient_081 => inv_factorial_081 , & ! coefficient_082 => inv_factorial_082 , & ! coefficient_083 => inv_factorial_083 , & ! coefficient_084 => inv_factorial_084 , & ! coefficient_085 => inv_factorial_085 , & ! coefficient_086 => inv_factorial_086 , & ! coefficient_087 => inv_factorial_087 , & ! coefficient_088 => inv_factorial_088 , & ! coefficient_089 => inv_factorial_089 , & ! coefficient_090 => inv_factorial_090 , & ! coefficient_091 => inv_factorial_091 , & ! coefficient_092 => inv_factorial_092 , & ! coefficient_093 => inv_factorial_093 , & ! coefficient_094 => inv_factorial_094 , & ! coefficient_095 => inv_factorial_095 , & ! coefficient_096 => inv_factorial_096 , & ! coefficient_097 => inv_factorial_097 , & ! coefficient_098 => inv_factorial_098 , & ! coefficient_099 => inv_factorial_099 , & ! coefficient_100 => inv_factorial_100 , & ! coefficient_101 => inv_factorial_101 , & ! coefficient_102 => inv_factorial_102 , & ! coefficient_103 => inv_factorial_103 , & ! coefficient_104 => inv_factorial_104 , & ! coefficient_105 => inv_factorial_105 , & ! coefficient_106 => inv_factorial_106 , & ! coefficient_107 => inv_factorial_107 , & ! coefficient_108 => inv_factorial_108 , & ! coefficient_109 => inv_factorial_109 , & ! coefficient_110 => inv_factorial_110 , & ! coefficient_111 => inv_factorial_111 , & ! coefficient_112 => inv_factorial_112 , & ! coefficient_113 => inv_factorial_113 , & ! coefficient_114 => inv_factorial_114 , & ! coefficient_115 => inv_factorial_115 , & ! coefficient_116 => inv_factorial_116 , & ! coefficient_117 => inv_factorial_117 , & ! coefficient_118 => inv_factorial_118 , & ! coefficient_119 => inv_factorial_119 , & ! coefficient_120 => inv_factorial_120 , & ! coefficient_121 => inv_factorial_121 , & ! coefficient_122 => inv_factorial_122 , & ! coefficient_123 => inv_factorial_123 , & ! coefficient_124 => inv_factorial_124 , & ! coefficient_125 => inv_factorial_125 , & ! coefficient_126 => inv_factorial_126 , & ! coefficient_127 => inv_factorial_127 , & ! coefficient_128 => inv_factorial_128 , & ! coefficient_129 => inv_factorial_129 , & ! coefficient_130 => inv_factorial_130 , & ! coefficient_131 => inv_factorial_131 , & ! coefficient_132 => inv_factorial_132 , & ! coefficient_133 => inv_factorial_133 , & ! coefficient_134 => inv_factorial_134 , & ! coefficient_135 => inv_factorial_135 , & ! coefficient_136 => inv_factorial_136 , & ! coefficient_137 => inv_factorial_137 , & ! coefficient_138 => inv_factorial_138 , & ! coefficient_139 => inv_factorial_139 , & ! coefficient_140 => inv_factorial_140 , & ! coefficient_141 => inv_factorial_141 , & ! coefficient_142 => inv_factorial_142 , & ! coefficient_143 => inv_factorial_143 , & ! coefficient_144 => inv_factorial_144 , & ! coefficient_145 => inv_factorial_145 , & ! coefficient_146 => inv_factorial_146 , & ! coefficient_147 => inv_factorial_147 , & ! coefficient_148 => inv_factorial_148 , & ! coefficient_149 => inv_factorial_149 , & ! coefficient_150 => inv_factorial_150 , & ! coefficient_151 => inv_factorial_151 , & ! coefficient_152 => inv_factorial_152 , & ! coefficient_153 => inv_factorial_153 , & ! coefficient_154 => inv_factorial_154 , & ! coefficient_155 => inv_factorial_155 , & ! coefficient_156 => inv_factorial_156 , & ! coefficient_157 => inv_factorial_157 , & ! coefficient_158 => inv_factorial_158 , & ! coefficient_159 => inv_factorial_159 , & ! coefficient_160 => inv_factorial_160 , & ! coefficient_161 => inv_factorial_161 , & ! coefficient_162 => inv_factorial_162 , & ! coefficient_163 => inv_factorial_163 , & ! coefficient_164 => inv_factorial_164 , & ! coefficient_165 => inv_factorial_165 , & ! coefficient_166 => inv_factorial_166 , & ! coefficient_167 => inv_factorial_167 , & ! coefficient_168 => inv_factorial_168 , & ! coefficient_169 => inv_factorial_169 , & ! coefficient_170 => inv_factorial_170 , & ! coefficient_171 => inv_factorial_171 , & ! coefficient_172 => inv_factorial_172 , & ! coefficient_173 => inv_factorial_173 , & ! coefficient_174 => inv_factorial_174 , & ! coefficient_175 => inv_factorial_175 , & ! coefficient_176 => inv_factorial_176 , & ! coefficient_177 => inv_factorial_177 implicit none contains module procedure taylor_series_exp_000_real64 res = horner_000 ( x = x , pre_step = 0.0_real64 ) end procedure taylor_series_exp_000_real64 module procedure taylor_series_exp_001_real64 res = horner_000 ( x = x , pre_step = coefficient_001 ) end procedure taylor_series_exp_001_real64 module procedure taylor_series_exp_002_real64 res = horner_001 ( x = x , pre_step = coefficient_002 ) end procedure taylor_series_exp_002_real64 module procedure taylor_series_exp_003_real64 res = horner_002 ( x = x , pre_step = coefficient_003 ) end procedure taylor_series_exp_003_real64 module procedure taylor_series_exp_004_real64 res = horner_003 ( x = x , pre_step = coefficient_004 ) end procedure taylor_series_exp_004_real64 module procedure taylor_series_exp_005_real64 res = horner_004 ( x = x , pre_step = coefficient_005 ) end procedure taylor_series_exp_005_real64 module procedure taylor_series_exp_006_real64 res = horner_005 ( x = x , pre_step = coefficient_006 ) end procedure taylor_series_exp_006_real64 module procedure taylor_series_exp_007_real64 res = horner_006 ( x = x , pre_step = coefficient_007 ) end procedure taylor_series_exp_007_real64 module procedure taylor_series_exp_008_real64 res = horner_007 ( x = x , pre_step = coefficient_008 ) end procedure taylor_series_exp_008_real64 module procedure taylor_series_exp_009_real64 res = horner_008 ( x = x , pre_step = coefficient_009 ) end procedure taylor_series_exp_009_real64 module procedure taylor_series_exp_010_real64 res = horner_009 ( x = x , pre_step = coefficient_010 ) end procedure taylor_series_exp_010_real64 module procedure taylor_series_exp_011_real64 res = horner_010 ( x = x , pre_step = coefficient_011 ) end procedure taylor_series_exp_011_real64 module procedure taylor_series_exp_012_real64 res = horner_011 ( x = x , pre_step = coefficient_012 ) end procedure taylor_series_exp_012_real64 module procedure taylor_series_exp_013_real64 res = horner_012 ( x = x , pre_step = coefficient_013 ) end procedure taylor_series_exp_013_real64 module procedure taylor_series_exp_014_real64 res = horner_013 ( x = x , pre_step = coefficient_014 ) end procedure taylor_series_exp_014_real64 module procedure taylor_series_exp_015_real64 res = horner_014 ( x = x , pre_step = coefficient_015 ) end procedure taylor_series_exp_015_real64 module procedure taylor_series_exp_016_real64 res = horner_015 ( x = x , pre_step = coefficient_016 ) end procedure taylor_series_exp_016_real64 module procedure taylor_series_exp_017_real64 res = horner_016 ( x = x , pre_step = coefficient_017 ) end procedure taylor_series_exp_017_real64 module procedure taylor_series_exp_018_real64 res = horner_017 ( x = x , pre_step = coefficient_018 ) end procedure taylor_series_exp_018_real64 module procedure taylor_series_exp_019_real64 res = horner_018 ( x = x , pre_step = coefficient_019 ) end procedure taylor_series_exp_019_real64 module procedure taylor_series_exp_020_real64 res = horner_019 ( x = x , pre_step = coefficient_020 ) end procedure taylor_series_exp_020_real64 module procedure taylor_series_exp_021_real64 res = horner_020 ( x = x , pre_step = coefficient_021 ) end procedure taylor_series_exp_021_real64 module procedure taylor_series_exp_022_real64 res = horner_021 ( x = x , pre_step = coefficient_022 ) end procedure taylor_series_exp_022_real64 module procedure taylor_series_exp_023_real64 res = horner_022 ( x = x , pre_step = coefficient_023 ) end procedure taylor_series_exp_023_real64 module procedure taylor_series_exp_024_real64 res = horner_023 ( x = x , pre_step = coefficient_024 ) end procedure taylor_series_exp_024_real64 module procedure taylor_series_exp_025_real64 res = horner_024 ( x = x , pre_step = coefficient_025 ) end procedure taylor_series_exp_025_real64 module procedure taylor_series_exp_026_real64 res = horner_025 ( x = x , pre_step = coefficient_026 ) end procedure taylor_series_exp_026_real64 module procedure taylor_series_exp_027_real64 res = horner_026 ( x = x , pre_step = coefficient_027 ) end procedure taylor_series_exp_027_real64 module procedure taylor_series_exp_028_real64 res = horner_027 ( x = x , pre_step = coefficient_028 ) end procedure taylor_series_exp_028_real64 module procedure taylor_series_exp_029_real64 res = horner_028 ( x = x , pre_step = coefficient_029 ) end procedure taylor_series_exp_029_real64 module procedure taylor_series_exp_030_real64 res = horner_029 ( x = x , pre_step = coefficient_030 ) end procedure taylor_series_exp_030_real64 module procedure taylor_series_exp_031_real64 res = horner_030 ( x = x , pre_step = coefficient_031 ) end procedure taylor_series_exp_031_real64 module procedure taylor_series_exp_032_real64 res = horner_031 ( x = x , pre_step = coefficient_032 ) end procedure taylor_series_exp_032_real64 module procedure taylor_series_exp_033_real64 res = horner_032 ( x = x , pre_step = coefficient_033 ) end procedure taylor_series_exp_033_real64 module procedure taylor_series_exp_034_real64 res = horner_033 ( x = x , pre_step = coefficient_034 ) end procedure taylor_series_exp_034_real64 module procedure taylor_series_exp_035_real64 res = horner_034 ( x = x , pre_step = coefficient_035 ) end procedure taylor_series_exp_035_real64 module procedure taylor_series_exp_036_real64 res = horner_035 ( x = x , pre_step = coefficient_036 ) end procedure taylor_series_exp_036_real64 module procedure taylor_series_exp_037_real64 res = horner_036 ( x = x , pre_step = coefficient_037 ) end procedure taylor_series_exp_037_real64 module procedure taylor_series_exp_038_real64 res = horner_037 ( x = x , pre_step = coefficient_038 ) end procedure taylor_series_exp_038_real64 module procedure taylor_series_exp_039_real64 res = horner_038 ( x = x , pre_step = coefficient_039 ) end procedure taylor_series_exp_039_real64 module procedure taylor_series_exp_040_real64 res = horner_039 ( x = x , pre_step = coefficient_040 ) end procedure taylor_series_exp_040_real64 module procedure taylor_series_exp_041_real64 res = horner_040 ( x = x , pre_step = coefficient_041 ) end procedure taylor_series_exp_041_real64 module procedure taylor_series_exp_042_real64 res = horner_041 ( x = x , pre_step = coefficient_042 ) end procedure taylor_series_exp_042_real64 module procedure taylor_series_exp_043_real64 res = horner_042 ( x = x , pre_step = coefficient_043 ) end procedure taylor_series_exp_043_real64 module procedure taylor_series_exp_044_real64 res = horner_043 ( x = x , pre_step = coefficient_044 ) end procedure taylor_series_exp_044_real64 module procedure taylor_series_exp_045_real64 res = horner_044 ( x = x , pre_step = coefficient_045 ) end procedure taylor_series_exp_045_real64 module procedure taylor_series_exp_046_real64 res = horner_045 ( x = x , pre_step = coefficient_046 ) end procedure taylor_series_exp_046_real64 module procedure taylor_series_exp_047_real64 res = horner_046 ( x = x , pre_step = coefficient_047 ) end procedure taylor_series_exp_047_real64 module procedure taylor_series_exp_048_real64 res = horner_047 ( x = x , pre_step = coefficient_048 ) end procedure taylor_series_exp_048_real64 module procedure taylor_series_exp_049_real64 res = horner_048 ( x = x , pre_step = coefficient_049 ) end procedure taylor_series_exp_049_real64 module procedure taylor_series_exp_050_real64 res = horner_049 ( x = x , pre_step = coefficient_050 ) end procedure taylor_series_exp_050_real64 module procedure taylor_series_exp_051_real64 res = horner_050 ( x = x , pre_step = coefficient_051 ) end procedure taylor_series_exp_051_real64 module procedure taylor_series_exp_052_real64 res = horner_051 ( x = x , pre_step = coefficient_052 ) end procedure taylor_series_exp_052_real64 module procedure taylor_series_exp_053_real64 res = horner_052 ( x = x , pre_step = coefficient_053 ) end procedure taylor_series_exp_053_real64 module procedure taylor_series_exp_054_real64 res = horner_053 ( x = x , pre_step = coefficient_054 ) end procedure taylor_series_exp_054_real64 module procedure taylor_series_exp_055_real64 res = horner_054 ( x = x , pre_step = coefficient_055 ) end procedure taylor_series_exp_055_real64 module procedure taylor_series_exp_056_real64 res = horner_055 ( x = x , pre_step = coefficient_056 ) end procedure taylor_series_exp_056_real64 module procedure taylor_series_exp_057_real64 res = horner_056 ( x = x , pre_step = coefficient_057 ) end procedure taylor_series_exp_057_real64 module procedure taylor_series_exp_058_real64 res = horner_057 ( x = x , pre_step = coefficient_058 ) end procedure taylor_series_exp_058_real64 module procedure taylor_series_exp_059_real64 res = horner_058 ( x = x , pre_step = coefficient_059 ) end procedure taylor_series_exp_059_real64 module procedure taylor_series_exp_060_real64 res = horner_059 ( x = x , pre_step = coefficient_060 ) end procedure taylor_series_exp_060_real64 module procedure taylor_series_exp_061_real64 res = horner_060 ( x = x , pre_step = coefficient_061 ) end procedure taylor_series_exp_061_real64 module procedure taylor_series_exp_062_real64 res = horner_061 ( x = x , pre_step = coefficient_062 ) end procedure taylor_series_exp_062_real64 module procedure taylor_series_exp_063_real64 res = horner_062 ( x = x , pre_step = coefficient_063 ) end procedure taylor_series_exp_063_real64 module procedure taylor_series_exp_064_real64 res = horner_063 ( x = x , pre_step = coefficient_064 ) end procedure taylor_series_exp_064_real64 module procedure taylor_series_exp_065_real64 res = horner_064 ( x = x , pre_step = coefficient_065 ) end procedure taylor_series_exp_065_real64 module procedure taylor_series_exp_066_real64 res = horner_065 ( x = x , pre_step = coefficient_066 ) end procedure taylor_series_exp_066_real64 module procedure taylor_series_exp_067_real64 res = horner_066 ( x = x , pre_step = coefficient_067 ) end procedure taylor_series_exp_067_real64 module procedure taylor_series_exp_068_real64 res = horner_067 ( x = x , pre_step = coefficient_068 ) end procedure taylor_series_exp_068_real64 module procedure taylor_series_exp_069_real64 res = horner_068 ( x = x , pre_step = coefficient_069 ) end procedure taylor_series_exp_069_real64 module procedure taylor_series_exp_070_real64 res = horner_069 ( x = x , pre_step = coefficient_070 ) end procedure taylor_series_exp_070_real64 module procedure taylor_series_exp_071_real64 res = horner_070 ( x = x , pre_step = coefficient_071 ) end procedure taylor_series_exp_071_real64 module procedure taylor_series_exp_072_real64 res = horner_071 ( x = x , pre_step = coefficient_072 ) end procedure taylor_series_exp_072_real64 module procedure taylor_series_exp_073_real64 res = horner_072 ( x = x , pre_step = coefficient_073 ) end procedure taylor_series_exp_073_real64 module procedure taylor_series_exp_074_real64 res = horner_073 ( x = x , pre_step = coefficient_074 ) end procedure taylor_series_exp_074_real64 module procedure taylor_series_exp_075_real64 res = horner_074 ( x = x , pre_step = coefficient_075 ) end procedure taylor_series_exp_075_real64 module procedure taylor_series_exp_076_real64 res = horner_075 ( x = x , pre_step = coefficient_076 ) end procedure taylor_series_exp_076_real64 module procedure taylor_series_exp_077_real64 res = horner_076 ( x = x , pre_step = coefficient_077 ) end procedure taylor_series_exp_077_real64 module procedure taylor_series_exp_078_real64 res = horner_077 ( x = x , pre_step = coefficient_078 ) end procedure taylor_series_exp_078_real64 module procedure taylor_series_exp_079_real64 res = horner_078 ( x = x , pre_step = coefficient_079 ) end procedure taylor_series_exp_079_real64 module procedure taylor_series_exp_080_real64 res = horner_079 ( x = x , pre_step = coefficient_080 ) end procedure taylor_series_exp_080_real64 module procedure taylor_series_exp_081_real64 res = horner_080 ( x = x , pre_step = coefficient_081 ) end procedure taylor_series_exp_081_real64 module procedure taylor_series_exp_082_real64 res = horner_081 ( x = x , pre_step = coefficient_082 ) end procedure taylor_series_exp_082_real64 module procedure taylor_series_exp_083_real64 res = horner_082 ( x = x , pre_step = coefficient_083 ) end procedure taylor_series_exp_083_real64 module procedure taylor_series_exp_084_real64 res = horner_083 ( x = x , pre_step = coefficient_084 ) end procedure taylor_series_exp_084_real64 module procedure taylor_series_exp_085_real64 res = horner_084 ( x = x , pre_step = coefficient_085 ) end procedure taylor_series_exp_085_real64 module procedure taylor_series_exp_086_real64 res = horner_085 ( x = x , pre_step = coefficient_086 ) end procedure taylor_series_exp_086_real64 module procedure taylor_series_exp_087_real64 res = horner_086 ( x = x , pre_step = coefficient_087 ) end procedure taylor_series_exp_087_real64 module procedure taylor_series_exp_088_real64 res = horner_087 ( x = x , pre_step = coefficient_088 ) end procedure taylor_series_exp_088_real64 module procedure taylor_series_exp_089_real64 res = horner_088 ( x = x , pre_step = coefficient_089 ) end procedure taylor_series_exp_089_real64 module procedure taylor_series_exp_090_real64 res = horner_089 ( x = x , pre_step = coefficient_090 ) end procedure taylor_series_exp_090_real64 module procedure taylor_series_exp_091_real64 res = horner_090 ( x = x , pre_step = coefficient_091 ) end procedure taylor_series_exp_091_real64 module procedure taylor_series_exp_092_real64 res = horner_091 ( x = x , pre_step = coefficient_092 ) end procedure taylor_series_exp_092_real64 module procedure taylor_series_exp_093_real64 res = horner_092 ( x = x , pre_step = coefficient_093 ) end procedure taylor_series_exp_093_real64 module procedure taylor_series_exp_094_real64 res = horner_093 ( x = x , pre_step = coefficient_094 ) end procedure taylor_series_exp_094_real64 module procedure taylor_series_exp_095_real64 res = horner_094 ( x = x , pre_step = coefficient_095 ) end procedure taylor_series_exp_095_real64 module procedure taylor_series_exp_096_real64 res = horner_095 ( x = x , pre_step = coefficient_096 ) end procedure taylor_series_exp_096_real64 module procedure taylor_series_exp_097_real64 res = horner_096 ( x = x , pre_step = coefficient_097 ) end procedure taylor_series_exp_097_real64 module procedure taylor_series_exp_098_real64 res = horner_097 ( x = x , pre_step = coefficient_098 ) end procedure taylor_series_exp_098_real64 module procedure taylor_series_exp_099_real64 res = horner_098 ( x = x , pre_step = coefficient_099 ) end procedure taylor_series_exp_099_real64 module procedure taylor_series_exp_100_real64 res = horner_099 ( x = x , pre_step = coefficient_100 ) end procedure taylor_series_exp_100_real64 module procedure taylor_series_exp_101_real64 res = horner_100 ( x = x , pre_step = coefficient_101 ) end procedure taylor_series_exp_101_real64 module procedure taylor_series_exp_102_real64 res = horner_101 ( x = x , pre_step = coefficient_102 ) end procedure taylor_series_exp_102_real64 module procedure taylor_series_exp_103_real64 res = horner_102 ( x = x , pre_step = coefficient_103 ) end procedure taylor_series_exp_103_real64 module procedure taylor_series_exp_104_real64 res = horner_103 ( x = x , pre_step = coefficient_104 ) end procedure taylor_series_exp_104_real64 module procedure taylor_series_exp_105_real64 res = horner_104 ( x = x , pre_step = coefficient_105 ) end procedure taylor_series_exp_105_real64 module procedure taylor_series_exp_106_real64 res = horner_105 ( x = x , pre_step = coefficient_106 ) end procedure taylor_series_exp_106_real64 module procedure taylor_series_exp_107_real64 res = horner_106 ( x = x , pre_step = coefficient_107 ) end procedure taylor_series_exp_107_real64 module procedure taylor_series_exp_108_real64 res = horner_107 ( x = x , pre_step = coefficient_108 ) end procedure taylor_series_exp_108_real64 module procedure taylor_series_exp_109_real64 res = horner_108 ( x = x , pre_step = coefficient_109 ) end procedure taylor_series_exp_109_real64 module procedure taylor_series_exp_110_real64 res = horner_109 ( x = x , pre_step = coefficient_110 ) end procedure taylor_series_exp_110_real64 module procedure taylor_series_exp_111_real64 res = horner_110 ( x = x , pre_step = coefficient_111 ) end procedure taylor_series_exp_111_real64 module procedure taylor_series_exp_112_real64 res = horner_111 ( x = x , pre_step = coefficient_112 ) end procedure taylor_series_exp_112_real64 module procedure taylor_series_exp_113_real64 res = horner_112 ( x = x , pre_step = coefficient_113 ) end procedure taylor_series_exp_113_real64 module procedure taylor_series_exp_114_real64 res = horner_113 ( x = x , pre_step = coefficient_114 ) end procedure taylor_series_exp_114_real64 module procedure taylor_series_exp_115_real64 res = horner_114 ( x = x , pre_step = coefficient_115 ) end procedure taylor_series_exp_115_real64 module procedure taylor_series_exp_116_real64 res = horner_115 ( x = x , pre_step = coefficient_116 ) end procedure taylor_series_exp_116_real64 module procedure taylor_series_exp_117_real64 res = horner_116 ( x = x , pre_step = coefficient_117 ) end procedure taylor_series_exp_117_real64 module procedure taylor_series_exp_118_real64 res = horner_117 ( x = x , pre_step = coefficient_118 ) end procedure taylor_series_exp_118_real64 module procedure taylor_series_exp_119_real64 res = horner_118 ( x = x , pre_step = coefficient_119 ) end procedure taylor_series_exp_119_real64 module procedure taylor_series_exp_120_real64 res = horner_119 ( x = x , pre_step = coefficient_120 ) end procedure taylor_series_exp_120_real64 module procedure taylor_series_exp_121_real64 res = horner_120 ( x = x , pre_step = coefficient_121 ) end procedure taylor_series_exp_121_real64 module procedure taylor_series_exp_122_real64 res = horner_121 ( x = x , pre_step = coefficient_122 ) end procedure taylor_series_exp_122_real64 module procedure taylor_series_exp_123_real64 res = horner_122 ( x = x , pre_step = coefficient_123 ) end procedure taylor_series_exp_123_real64 module procedure taylor_series_exp_124_real64 res = horner_123 ( x = x , pre_step = coefficient_124 ) end procedure taylor_series_exp_124_real64 module procedure taylor_series_exp_125_real64 res = horner_124 ( x = x , pre_step = coefficient_125 ) end procedure taylor_series_exp_125_real64 module procedure taylor_series_exp_126_real64 res = horner_125 ( x = x , pre_step = coefficient_126 ) end procedure taylor_series_exp_126_real64 module procedure taylor_series_exp_127_real64 res = horner_126 ( x = x , pre_step = coefficient_127 ) end procedure taylor_series_exp_127_real64 module procedure taylor_series_exp_128_real64 res = horner_127 ( x = x , pre_step = coefficient_128 ) end procedure taylor_series_exp_128_real64 module procedure taylor_series_exp_129_real64 res = horner_128 ( x = x , pre_step = coefficient_129 ) end procedure taylor_series_exp_129_real64 module procedure taylor_series_exp_130_real64 res = horner_129 ( x = x , pre_step = coefficient_130 ) end procedure taylor_series_exp_130_real64 module procedure taylor_series_exp_131_real64 res = horner_130 ( x = x , pre_step = coefficient_131 ) end procedure taylor_series_exp_131_real64 module procedure taylor_series_exp_132_real64 res = horner_131 ( x = x , pre_step = coefficient_132 ) end procedure taylor_series_exp_132_real64 module procedure taylor_series_exp_133_real64 res = horner_132 ( x = x , pre_step = coefficient_133 ) end procedure taylor_series_exp_133_real64 module procedure taylor_series_exp_134_real64 res = horner_133 ( x = x , pre_step = coefficient_134 ) end procedure taylor_series_exp_134_real64 module procedure taylor_series_exp_135_real64 res = horner_134 ( x = x , pre_step = coefficient_135 ) end procedure taylor_series_exp_135_real64 module procedure taylor_series_exp_136_real64 res = horner_135 ( x = x , pre_step = coefficient_136 ) end procedure taylor_series_exp_136_real64 module procedure taylor_series_exp_137_real64 res = horner_136 ( x = x , pre_step = coefficient_137 ) end procedure taylor_series_exp_137_real64 module procedure taylor_series_exp_138_real64 res = horner_137 ( x = x , pre_step = coefficient_138 ) end procedure taylor_series_exp_138_real64 module procedure taylor_series_exp_139_real64 res = horner_138 ( x = x , pre_step = coefficient_139 ) end procedure taylor_series_exp_139_real64 module procedure taylor_series_exp_140_real64 res = horner_139 ( x = x , pre_step = coefficient_140 ) end procedure taylor_series_exp_140_real64 module procedure taylor_series_exp_141_real64 res = horner_140 ( x = x , pre_step = coefficient_141 ) end procedure taylor_series_exp_141_real64 module procedure taylor_series_exp_142_real64 res = horner_141 ( x = x , pre_step = coefficient_142 ) end procedure taylor_series_exp_142_real64 module procedure taylor_series_exp_143_real64 res = horner_142 ( x = x , pre_step = coefficient_143 ) end procedure taylor_series_exp_143_real64 module procedure taylor_series_exp_144_real64 res = horner_143 ( x = x , pre_step = coefficient_144 ) end procedure taylor_series_exp_144_real64 module procedure taylor_series_exp_145_real64 res = horner_144 ( x = x , pre_step = coefficient_145 ) end procedure taylor_series_exp_145_real64 module procedure taylor_series_exp_146_real64 res = horner_145 ( x = x , pre_step = coefficient_146 ) end procedure taylor_series_exp_146_real64 module procedure taylor_series_exp_147_real64 res = horner_146 ( x = x , pre_step = coefficient_147 ) end procedure taylor_series_exp_147_real64 module procedure taylor_series_exp_148_real64 res = horner_147 ( x = x , pre_step = coefficient_148 ) end procedure taylor_series_exp_148_real64 module procedure taylor_series_exp_149_real64 res = horner_148 ( x = x , pre_step = coefficient_149 ) end procedure taylor_series_exp_149_real64 module procedure taylor_series_exp_150_real64 res = horner_149 ( x = x , pre_step = coefficient_150 ) end procedure taylor_series_exp_150_real64 module procedure taylor_series_exp_151_real64 res = horner_150 ( x = x , pre_step = coefficient_151 ) end procedure taylor_series_exp_151_real64 module procedure taylor_series_exp_152_real64 res = horner_151 ( x = x , pre_step = coefficient_152 ) end procedure taylor_series_exp_152_real64 module procedure taylor_series_exp_153_real64 res = horner_152 ( x = x , pre_step = coefficient_153 ) end procedure taylor_series_exp_153_real64 module procedure taylor_series_exp_154_real64 res = horner_153 ( x = x , pre_step = coefficient_154 ) end procedure taylor_series_exp_154_real64 module procedure taylor_series_exp_155_real64 res = horner_154 ( x = x , pre_step = coefficient_155 ) end procedure taylor_series_exp_155_real64 module procedure taylor_series_exp_156_real64 res = horner_155 ( x = x , pre_step = coefficient_156 ) end procedure taylor_series_exp_156_real64 module procedure taylor_series_exp_157_real64 res = horner_156 ( x = x , pre_step = coefficient_157 ) end procedure taylor_series_exp_157_real64 module procedure taylor_series_exp_158_real64 res = horner_157 ( x = x , pre_step = coefficient_158 ) end procedure taylor_series_exp_158_real64 module procedure taylor_series_exp_159_real64 res = horner_158 ( x = x , pre_step = coefficient_159 ) end procedure taylor_series_exp_159_real64 module procedure taylor_series_exp_160_real64 res = horner_159 ( x = x , pre_step = coefficient_160 ) end procedure taylor_series_exp_160_real64 module procedure taylor_series_exp_161_real64 res = horner_160 ( x = x , pre_step = coefficient_161 ) end procedure taylor_series_exp_161_real64 module procedure taylor_series_exp_162_real64 res = horner_161 ( x = x , pre_step = coefficient_162 ) end procedure taylor_series_exp_162_real64 module procedure taylor_series_exp_163_real64 res = horner_162 ( x = x , pre_step = coefficient_163 ) end procedure taylor_series_exp_163_real64 module procedure taylor_series_exp_164_real64 res = horner_163 ( x = x , pre_step = coefficient_164 ) end procedure taylor_series_exp_164_real64 module procedure taylor_series_exp_165_real64 res = horner_164 ( x = x , pre_step = coefficient_165 ) end procedure taylor_series_exp_165_real64 module procedure taylor_series_exp_166_real64 res = horner_165 ( x = x , pre_step = coefficient_166 ) end procedure taylor_series_exp_166_real64 module procedure taylor_series_exp_167_real64 res = horner_166 ( x = x , pre_step = coefficient_167 ) end procedure taylor_series_exp_167_real64 module procedure taylor_series_exp_168_real64 res = horner_167 ( x = x , pre_step = coefficient_168 ) end procedure taylor_series_exp_168_real64 module procedure taylor_series_exp_169_real64 res = horner_168 ( x = x , pre_step = coefficient_169 ) end procedure taylor_series_exp_169_real64 module procedure taylor_series_exp_170_real64 res = horner_169 ( x = x , pre_step = coefficient_170 ) end procedure taylor_series_exp_170_real64 module procedure taylor_series_exp_171_real64 res = horner_170 ( x = x , pre_step = coefficient_171 ) end procedure taylor_series_exp_171_real64 module procedure taylor_series_exp_172_real64 res = horner_171 ( x = x , pre_step = coefficient_172 ) end procedure taylor_series_exp_172_real64 module procedure taylor_series_exp_173_real64 res = horner_172 ( x = x , pre_step = coefficient_173 ) end procedure taylor_series_exp_173_real64 module procedure taylor_series_exp_174_real64 res = horner_173 ( x = x , pre_step = coefficient_174 ) end procedure taylor_series_exp_174_real64 module procedure taylor_series_exp_175_real64 res = horner_174 ( x = x , pre_step = coefficient_175 ) end procedure taylor_series_exp_175_real64 module procedure taylor_series_exp_176_real64 res = horner_175 ( x = x , pre_step = coefficient_176 ) end procedure taylor_series_exp_176_real64 module procedure taylor_series_exp_177_real64 res = horner_176 ( x = x , pre_step = coefficient_177 ) end procedure taylor_series_exp_177_real64 real ( real64 ) elemental function horner_000 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_000 = pre_step * x + coefficient_000 end function real ( real64 ) elemental function horner_001 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_001 = horner_000 ( x = x , pre_step = ( pre_step * x + coefficient_001 ) ) end function real ( real64 ) elemental function horner_002 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_002 = horner_001 ( x = x , pre_step = ( pre_step * x + coefficient_002 ) ) end function real ( real64 ) elemental function horner_003 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_003 = horner_002 ( x = x , pre_step = ( pre_step * x + coefficient_003 ) ) end function real ( real64 ) elemental function horner_004 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_004 = horner_003 ( x = x , pre_step = ( pre_step * x + coefficient_004 ) ) end function real ( real64 ) elemental function horner_005 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_005 = horner_004 ( x = x , pre_step = ( pre_step * x + coefficient_005 ) ) end function real ( real64 ) elemental function horner_006 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_006 = horner_005 ( x = x , pre_step = ( pre_step * x + coefficient_006 ) ) end function real ( real64 ) elemental function horner_007 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_007 = horner_006 ( x = x , pre_step = ( pre_step * x + coefficient_007 ) ) end function real ( real64 ) elemental function horner_008 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_008 = horner_007 ( x = x , pre_step = ( pre_step * x + coefficient_008 ) ) end function real ( real64 ) elemental function horner_009 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_009 = horner_008 ( x = x , pre_step = ( pre_step * x + coefficient_009 ) ) end function real ( real64 ) elemental function horner_010 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_010 = horner_009 ( x = x , pre_step = ( pre_step * x + coefficient_010 ) ) end function real ( real64 ) elemental function horner_011 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_011 = horner_010 ( x = x , pre_step = ( pre_step * x + coefficient_011 ) ) end function real ( real64 ) elemental function horner_012 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_012 = horner_011 ( x = x , pre_step = ( pre_step * x + coefficient_012 ) ) end function real ( real64 ) elemental function horner_013 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_013 = horner_012 ( x = x , pre_step = ( pre_step * x + coefficient_013 ) ) end function real ( real64 ) elemental function horner_014 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_014 = horner_013 ( x = x , pre_step = ( pre_step * x + coefficient_014 ) ) end function real ( real64 ) elemental function horner_015 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_015 = horner_014 ( x = x , pre_step = ( pre_step * x + coefficient_015 ) ) end function real ( real64 ) elemental function horner_016 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_016 = horner_015 ( x = x , pre_step = ( pre_step * x + coefficient_016 ) ) end function real ( real64 ) elemental function horner_017 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_017 = horner_016 ( x = x , pre_step = ( pre_step * x + coefficient_017 ) ) end function real ( real64 ) elemental function horner_018 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_018 = horner_017 ( x = x , pre_step = ( pre_step * x + coefficient_018 ) ) end function real ( real64 ) elemental function horner_019 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_019 = horner_018 ( x = x , pre_step = ( pre_step * x + coefficient_019 ) ) end function real ( real64 ) elemental function horner_020 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_020 = horner_019 ( x = x , pre_step = ( pre_step * x + coefficient_020 ) ) end function real ( real64 ) elemental function horner_021 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_021 = horner_020 ( x = x , pre_step = ( pre_step * x + coefficient_021 ) ) end function real ( real64 ) elemental function horner_022 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_022 = horner_021 ( x = x , pre_step = ( pre_step * x + coefficient_022 ) ) end function real ( real64 ) elemental function horner_023 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_023 = horner_022 ( x = x , pre_step = ( pre_step * x + coefficient_023 ) ) end function real ( real64 ) elemental function horner_024 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_024 = horner_023 ( x = x , pre_step = ( pre_step * x + coefficient_024 ) ) end function real ( real64 ) elemental function horner_025 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_025 = horner_024 ( x = x , pre_step = ( pre_step * x + coefficient_025 ) ) end function real ( real64 ) elemental function horner_026 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_026 = horner_025 ( x = x , pre_step = ( pre_step * x + coefficient_026 ) ) end function real ( real64 ) elemental function horner_027 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_027 = horner_026 ( x = x , pre_step = ( pre_step * x + coefficient_027 ) ) end function real ( real64 ) elemental function horner_028 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_028 = horner_027 ( x = x , pre_step = ( pre_step * x + coefficient_028 ) ) end function real ( real64 ) elemental function horner_029 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_029 = horner_028 ( x = x , pre_step = ( pre_step * x + coefficient_029 ) ) end function real ( real64 ) elemental function horner_030 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_030 = horner_029 ( x = x , pre_step = ( pre_step * x + coefficient_030 ) ) end function real ( real64 ) elemental function horner_031 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_031 = horner_030 ( x = x , pre_step = ( pre_step * x + coefficient_031 ) ) end function real ( real64 ) elemental function horner_032 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_032 = horner_031 ( x = x , pre_step = ( pre_step * x + coefficient_032 ) ) end function real ( real64 ) elemental function horner_033 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_033 = horner_032 ( x = x , pre_step = ( pre_step * x + coefficient_033 ) ) end function real ( real64 ) elemental function horner_034 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_034 = horner_033 ( x = x , pre_step = ( pre_step * x + coefficient_034 ) ) end function real ( real64 ) elemental function horner_035 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_035 = horner_034 ( x = x , pre_step = ( pre_step * x + coefficient_035 ) ) end function real ( real64 ) elemental function horner_036 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_036 = horner_035 ( x = x , pre_step = ( pre_step * x + coefficient_036 ) ) end function real ( real64 ) elemental function horner_037 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_037 = horner_036 ( x = x , pre_step = ( pre_step * x + coefficient_037 ) ) end function real ( real64 ) elemental function horner_038 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_038 = horner_037 ( x = x , pre_step = ( pre_step * x + coefficient_038 ) ) end function real ( real64 ) elemental function horner_039 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_039 = horner_038 ( x = x , pre_step = ( pre_step * x + coefficient_039 ) ) end function real ( real64 ) elemental function horner_040 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_040 = horner_039 ( x = x , pre_step = ( pre_step * x + coefficient_040 ) ) end function real ( real64 ) elemental function horner_041 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_041 = horner_040 ( x = x , pre_step = ( pre_step * x + coefficient_041 ) ) end function real ( real64 ) elemental function horner_042 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_042 = horner_041 ( x = x , pre_step = ( pre_step * x + coefficient_042 ) ) end function real ( real64 ) elemental function horner_043 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_043 = horner_042 ( x = x , pre_step = ( pre_step * x + coefficient_043 ) ) end function real ( real64 ) elemental function horner_044 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_044 = horner_043 ( x = x , pre_step = ( pre_step * x + coefficient_044 ) ) end function real ( real64 ) elemental function horner_045 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_045 = horner_044 ( x = x , pre_step = ( pre_step * x + coefficient_045 ) ) end function real ( real64 ) elemental function horner_046 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_046 = horner_045 ( x = x , pre_step = ( pre_step * x + coefficient_046 ) ) end function real ( real64 ) elemental function horner_047 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_047 = horner_046 ( x = x , pre_step = ( pre_step * x + coefficient_047 ) ) end function real ( real64 ) elemental function horner_048 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_048 = horner_047 ( x = x , pre_step = ( pre_step * x + coefficient_048 ) ) end function real ( real64 ) elemental function horner_049 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_049 = horner_048 ( x = x , pre_step = ( pre_step * x + coefficient_049 ) ) end function real ( real64 ) elemental function horner_050 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_050 = horner_049 ( x = x , pre_step = ( pre_step * x + coefficient_050 ) ) end function real ( real64 ) elemental function horner_051 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_051 = horner_050 ( x = x , pre_step = ( pre_step * x + coefficient_051 ) ) end function real ( real64 ) elemental function horner_052 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_052 = horner_051 ( x = x , pre_step = ( pre_step * x + coefficient_052 ) ) end function real ( real64 ) elemental function horner_053 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_053 = horner_052 ( x = x , pre_step = ( pre_step * x + coefficient_053 ) ) end function real ( real64 ) elemental function horner_054 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_054 = horner_053 ( x = x , pre_step = ( pre_step * x + coefficient_054 ) ) end function real ( real64 ) elemental function horner_055 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_055 = horner_054 ( x = x , pre_step = ( pre_step * x + coefficient_055 ) ) end function real ( real64 ) elemental function horner_056 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_056 = horner_055 ( x = x , pre_step = ( pre_step * x + coefficient_056 ) ) end function real ( real64 ) elemental function horner_057 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_057 = horner_056 ( x = x , pre_step = ( pre_step * x + coefficient_057 ) ) end function real ( real64 ) elemental function horner_058 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_058 = horner_057 ( x = x , pre_step = ( pre_step * x + coefficient_058 ) ) end function real ( real64 ) elemental function horner_059 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_059 = horner_058 ( x = x , pre_step = ( pre_step * x + coefficient_059 ) ) end function real ( real64 ) elemental function horner_060 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_060 = horner_059 ( x = x , pre_step = ( pre_step * x + coefficient_060 ) ) end function real ( real64 ) elemental function horner_061 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_061 = horner_060 ( x = x , pre_step = ( pre_step * x + coefficient_061 ) ) end function real ( real64 ) elemental function horner_062 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_062 = horner_061 ( x = x , pre_step = ( pre_step * x + coefficient_062 ) ) end function real ( real64 ) elemental function horner_063 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_063 = horner_062 ( x = x , pre_step = ( pre_step * x + coefficient_063 ) ) end function real ( real64 ) elemental function horner_064 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_064 = horner_063 ( x = x , pre_step = ( pre_step * x + coefficient_064 ) ) end function real ( real64 ) elemental function horner_065 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_065 = horner_064 ( x = x , pre_step = ( pre_step * x + coefficient_065 ) ) end function real ( real64 ) elemental function horner_066 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_066 = horner_065 ( x = x , pre_step = ( pre_step * x + coefficient_066 ) ) end function real ( real64 ) elemental function horner_067 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_067 = horner_066 ( x = x , pre_step = ( pre_step * x + coefficient_067 ) ) end function real ( real64 ) elemental function horner_068 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_068 = horner_067 ( x = x , pre_step = ( pre_step * x + coefficient_068 ) ) end function real ( real64 ) elemental function horner_069 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_069 = horner_068 ( x = x , pre_step = ( pre_step * x + coefficient_069 ) ) end function real ( real64 ) elemental function horner_070 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_070 = horner_069 ( x = x , pre_step = ( pre_step * x + coefficient_070 ) ) end function real ( real64 ) elemental function horner_071 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_071 = horner_070 ( x = x , pre_step = ( pre_step * x + coefficient_071 ) ) end function real ( real64 ) elemental function horner_072 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_072 = horner_071 ( x = x , pre_step = ( pre_step * x + coefficient_072 ) ) end function real ( real64 ) elemental function horner_073 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_073 = horner_072 ( x = x , pre_step = ( pre_step * x + coefficient_073 ) ) end function real ( real64 ) elemental function horner_074 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_074 = horner_073 ( x = x , pre_step = ( pre_step * x + coefficient_074 ) ) end function real ( real64 ) elemental function horner_075 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_075 = horner_074 ( x = x , pre_step = ( pre_step * x + coefficient_075 ) ) end function real ( real64 ) elemental function horner_076 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_076 = horner_075 ( x = x , pre_step = ( pre_step * x + coefficient_076 ) ) end function real ( real64 ) elemental function horner_077 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_077 = horner_076 ( x = x , pre_step = ( pre_step * x + coefficient_077 ) ) end function real ( real64 ) elemental function horner_078 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_078 = horner_077 ( x = x , pre_step = ( pre_step * x + coefficient_078 ) ) end function real ( real64 ) elemental function horner_079 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_079 = horner_078 ( x = x , pre_step = ( pre_step * x + coefficient_079 ) ) end function real ( real64 ) elemental function horner_080 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_080 = horner_079 ( x = x , pre_step = ( pre_step * x + coefficient_080 ) ) end function real ( real64 ) elemental function horner_081 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_081 = horner_080 ( x = x , pre_step = ( pre_step * x + coefficient_081 ) ) end function real ( real64 ) elemental function horner_082 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_082 = horner_081 ( x = x , pre_step = ( pre_step * x + coefficient_082 ) ) end function real ( real64 ) elemental function horner_083 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_083 = horner_082 ( x = x , pre_step = ( pre_step * x + coefficient_083 ) ) end function real ( real64 ) elemental function horner_084 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_084 = horner_083 ( x = x , pre_step = ( pre_step * x + coefficient_084 ) ) end function real ( real64 ) elemental function horner_085 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_085 = horner_084 ( x = x , pre_step = ( pre_step * x + coefficient_085 ) ) end function real ( real64 ) elemental function horner_086 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_086 = horner_085 ( x = x , pre_step = ( pre_step * x + coefficient_086 ) ) end function real ( real64 ) elemental function horner_087 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_087 = horner_086 ( x = x , pre_step = ( pre_step * x + coefficient_087 ) ) end function real ( real64 ) elemental function horner_088 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_088 = horner_087 ( x = x , pre_step = ( pre_step * x + coefficient_088 ) ) end function real ( real64 ) elemental function horner_089 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_089 = horner_088 ( x = x , pre_step = ( pre_step * x + coefficient_089 ) ) end function real ( real64 ) elemental function horner_090 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_090 = horner_089 ( x = x , pre_step = ( pre_step * x + coefficient_090 ) ) end function real ( real64 ) elemental function horner_091 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_091 = horner_090 ( x = x , pre_step = ( pre_step * x + coefficient_091 ) ) end function real ( real64 ) elemental function horner_092 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_092 = horner_091 ( x = x , pre_step = ( pre_step * x + coefficient_092 ) ) end function real ( real64 ) elemental function horner_093 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_093 = horner_092 ( x = x , pre_step = ( pre_step * x + coefficient_093 ) ) end function real ( real64 ) elemental function horner_094 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_094 = horner_093 ( x = x , pre_step = ( pre_step * x + coefficient_094 ) ) end function real ( real64 ) elemental function horner_095 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_095 = horner_094 ( x = x , pre_step = ( pre_step * x + coefficient_095 ) ) end function real ( real64 ) elemental function horner_096 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_096 = horner_095 ( x = x , pre_step = ( pre_step * x + coefficient_096 ) ) end function real ( real64 ) elemental function horner_097 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_097 = horner_096 ( x = x , pre_step = ( pre_step * x + coefficient_097 ) ) end function real ( real64 ) elemental function horner_098 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_098 = horner_097 ( x = x , pre_step = ( pre_step * x + coefficient_098 ) ) end function real ( real64 ) elemental function horner_099 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_099 = horner_098 ( x = x , pre_step = ( pre_step * x + coefficient_099 ) ) end function real ( real64 ) elemental function horner_100 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_100 = horner_099 ( x = x , pre_step = ( pre_step * x + coefficient_100 ) ) end function real ( real64 ) elemental function horner_101 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_101 = horner_100 ( x = x , pre_step = ( pre_step * x + coefficient_101 ) ) end function real ( real64 ) elemental function horner_102 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_102 = horner_101 ( x = x , pre_step = ( pre_step * x + coefficient_102 ) ) end function real ( real64 ) elemental function horner_103 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_103 = horner_102 ( x = x , pre_step = ( pre_step * x + coefficient_103 ) ) end function real ( real64 ) elemental function horner_104 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_104 = horner_103 ( x = x , pre_step = ( pre_step * x + coefficient_104 ) ) end function real ( real64 ) elemental function horner_105 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_105 = horner_104 ( x = x , pre_step = ( pre_step * x + coefficient_105 ) ) end function real ( real64 ) elemental function horner_106 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_106 = horner_105 ( x = x , pre_step = ( pre_step * x + coefficient_106 ) ) end function real ( real64 ) elemental function horner_107 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_107 = horner_106 ( x = x , pre_step = ( pre_step * x + coefficient_107 ) ) end function real ( real64 ) elemental function horner_108 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_108 = horner_107 ( x = x , pre_step = ( pre_step * x + coefficient_108 ) ) end function real ( real64 ) elemental function horner_109 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_109 = horner_108 ( x = x , pre_step = ( pre_step * x + coefficient_109 ) ) end function real ( real64 ) elemental function horner_110 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_110 = horner_109 ( x = x , pre_step = ( pre_step * x + coefficient_110 ) ) end function real ( real64 ) elemental function horner_111 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_111 = horner_110 ( x = x , pre_step = ( pre_step * x + coefficient_111 ) ) end function real ( real64 ) elemental function horner_112 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_112 = horner_111 ( x = x , pre_step = ( pre_step * x + coefficient_112 ) ) end function real ( real64 ) elemental function horner_113 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_113 = horner_112 ( x = x , pre_step = ( pre_step * x + coefficient_113 ) ) end function real ( real64 ) elemental function horner_114 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_114 = horner_113 ( x = x , pre_step = ( pre_step * x + coefficient_114 ) ) end function real ( real64 ) elemental function horner_115 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_115 = horner_114 ( x = x , pre_step = ( pre_step * x + coefficient_115 ) ) end function real ( real64 ) elemental function horner_116 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_116 = horner_115 ( x = x , pre_step = ( pre_step * x + coefficient_116 ) ) end function real ( real64 ) elemental function horner_117 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_117 = horner_116 ( x = x , pre_step = ( pre_step * x + coefficient_117 ) ) end function real ( real64 ) elemental function horner_118 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_118 = horner_117 ( x = x , pre_step = ( pre_step * x + coefficient_118 ) ) end function real ( real64 ) elemental function horner_119 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_119 = horner_118 ( x = x , pre_step = ( pre_step * x + coefficient_119 ) ) end function real ( real64 ) elemental function horner_120 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_120 = horner_119 ( x = x , pre_step = ( pre_step * x + coefficient_120 ) ) end function real ( real64 ) elemental function horner_121 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_121 = horner_120 ( x = x , pre_step = ( pre_step * x + coefficient_121 ) ) end function real ( real64 ) elemental function horner_122 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_122 = horner_121 ( x = x , pre_step = ( pre_step * x + coefficient_122 ) ) end function real ( real64 ) elemental function horner_123 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_123 = horner_122 ( x = x , pre_step = ( pre_step * x + coefficient_123 ) ) end function real ( real64 ) elemental function horner_124 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_124 = horner_123 ( x = x , pre_step = ( pre_step * x + coefficient_124 ) ) end function real ( real64 ) elemental function horner_125 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_125 = horner_124 ( x = x , pre_step = ( pre_step * x + coefficient_125 ) ) end function real ( real64 ) elemental function horner_126 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_126 = horner_125 ( x = x , pre_step = ( pre_step * x + coefficient_126 ) ) end function real ( real64 ) elemental function horner_127 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_127 = horner_126 ( x = x , pre_step = ( pre_step * x + coefficient_127 ) ) end function real ( real64 ) elemental function horner_128 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_128 = horner_127 ( x = x , pre_step = ( pre_step * x + coefficient_128 ) ) end function real ( real64 ) elemental function horner_129 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_129 = horner_128 ( x = x , pre_step = ( pre_step * x + coefficient_129 ) ) end function real ( real64 ) elemental function horner_130 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_130 = horner_129 ( x = x , pre_step = ( pre_step * x + coefficient_130 ) ) end function real ( real64 ) elemental function horner_131 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_131 = horner_130 ( x = x , pre_step = ( pre_step * x + coefficient_131 ) ) end function real ( real64 ) elemental function horner_132 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_132 = horner_131 ( x = x , pre_step = ( pre_step * x + coefficient_132 ) ) end function real ( real64 ) elemental function horner_133 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_133 = horner_132 ( x = x , pre_step = ( pre_step * x + coefficient_133 ) ) end function real ( real64 ) elemental function horner_134 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_134 = horner_133 ( x = x , pre_step = ( pre_step * x + coefficient_134 ) ) end function real ( real64 ) elemental function horner_135 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_135 = horner_134 ( x = x , pre_step = ( pre_step * x + coefficient_135 ) ) end function real ( real64 ) elemental function horner_136 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_136 = horner_135 ( x = x , pre_step = ( pre_step * x + coefficient_136 ) ) end function real ( real64 ) elemental function horner_137 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_137 = horner_136 ( x = x , pre_step = ( pre_step * x + coefficient_137 ) ) end function real ( real64 ) elemental function horner_138 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_138 = horner_137 ( x = x , pre_step = ( pre_step * x + coefficient_138 ) ) end function real ( real64 ) elemental function horner_139 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_139 = horner_138 ( x = x , pre_step = ( pre_step * x + coefficient_139 ) ) end function real ( real64 ) elemental function horner_140 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_140 = horner_139 ( x = x , pre_step = ( pre_step * x + coefficient_140 ) ) end function real ( real64 ) elemental function horner_141 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_141 = horner_140 ( x = x , pre_step = ( pre_step * x + coefficient_141 ) ) end function real ( real64 ) elemental function horner_142 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_142 = horner_141 ( x = x , pre_step = ( pre_step * x + coefficient_142 ) ) end function real ( real64 ) elemental function horner_143 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_143 = horner_142 ( x = x , pre_step = ( pre_step * x + coefficient_143 ) ) end function real ( real64 ) elemental function horner_144 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_144 = horner_143 ( x = x , pre_step = ( pre_step * x + coefficient_144 ) ) end function real ( real64 ) elemental function horner_145 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_145 = horner_144 ( x = x , pre_step = ( pre_step * x + coefficient_145 ) ) end function real ( real64 ) elemental function horner_146 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_146 = horner_145 ( x = x , pre_step = ( pre_step * x + coefficient_146 ) ) end function real ( real64 ) elemental function horner_147 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_147 = horner_146 ( x = x , pre_step = ( pre_step * x + coefficient_147 ) ) end function real ( real64 ) elemental function horner_148 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_148 = horner_147 ( x = x , pre_step = ( pre_step * x + coefficient_148 ) ) end function real ( real64 ) elemental function horner_149 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_149 = horner_148 ( x = x , pre_step = ( pre_step * x + coefficient_149 ) ) end function real ( real64 ) elemental function horner_150 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_150 = horner_149 ( x = x , pre_step = ( pre_step * x + coefficient_150 ) ) end function real ( real64 ) elemental function horner_151 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_151 = horner_150 ( x = x , pre_step = ( pre_step * x + coefficient_151 ) ) end function real ( real64 ) elemental function horner_152 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_152 = horner_151 ( x = x , pre_step = ( pre_step * x + coefficient_152 ) ) end function real ( real64 ) elemental function horner_153 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_153 = horner_152 ( x = x , pre_step = ( pre_step * x + coefficient_153 ) ) end function real ( real64 ) elemental function horner_154 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_154 = horner_153 ( x = x , pre_step = ( pre_step * x + coefficient_154 ) ) end function real ( real64 ) elemental function horner_155 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_155 = horner_154 ( x = x , pre_step = ( pre_step * x + coefficient_155 ) ) end function real ( real64 ) elemental function horner_156 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_156 = horner_155 ( x = x , pre_step = ( pre_step * x + coefficient_156 ) ) end function real ( real64 ) elemental function horner_157 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_157 = horner_156 ( x = x , pre_step = ( pre_step * x + coefficient_157 ) ) end function real ( real64 ) elemental function horner_158 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_158 = horner_157 ( x = x , pre_step = ( pre_step * x + coefficient_158 ) ) end function real ( real64 ) elemental function horner_159 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_159 = horner_158 ( x = x , pre_step = ( pre_step * x + coefficient_159 ) ) end function real ( real64 ) elemental function horner_160 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_160 = horner_159 ( x = x , pre_step = ( pre_step * x + coefficient_160 ) ) end function real ( real64 ) elemental function horner_161 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_161 = horner_160 ( x = x , pre_step = ( pre_step * x + coefficient_161 ) ) end function real ( real64 ) elemental function horner_162 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_162 = horner_161 ( x = x , pre_step = ( pre_step * x + coefficient_162 ) ) end function real ( real64 ) elemental function horner_163 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_163 = horner_162 ( x = x , pre_step = ( pre_step * x + coefficient_163 ) ) end function real ( real64 ) elemental function horner_164 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_164 = horner_163 ( x = x , pre_step = ( pre_step * x + coefficient_164 ) ) end function real ( real64 ) elemental function horner_165 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_165 = horner_164 ( x = x , pre_step = ( pre_step * x + coefficient_165 ) ) end function real ( real64 ) elemental function horner_166 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_166 = horner_165 ( x = x , pre_step = ( pre_step * x + coefficient_166 ) ) end function real ( real64 ) elemental function horner_167 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_167 = horner_166 ( x = x , pre_step = ( pre_step * x + coefficient_167 ) ) end function real ( real64 ) elemental function horner_168 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_168 = horner_167 ( x = x , pre_step = ( pre_step * x + coefficient_168 ) ) end function real ( real64 ) elemental function horner_169 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_169 = horner_168 ( x = x , pre_step = ( pre_step * x + coefficient_169 ) ) end function real ( real64 ) elemental function horner_170 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_170 = horner_169 ( x = x , pre_step = ( pre_step * x + coefficient_170 ) ) end function real ( real64 ) elemental function horner_171 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_171 = horner_170 ( x = x , pre_step = ( pre_step * x + coefficient_171 ) ) end function real ( real64 ) elemental function horner_172 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_172 = horner_171 ( x = x , pre_step = ( pre_step * x + coefficient_172 ) ) end function real ( real64 ) elemental function horner_173 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_173 = horner_172 ( x = x , pre_step = ( pre_step * x + coefficient_173 ) ) end function real ( real64 ) elemental function horner_174 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_174 = horner_173 ( x = x , pre_step = ( pre_step * x + coefficient_174 ) ) end function real ( real64 ) elemental function horner_175 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_175 = horner_174 ( x = x , pre_step = ( pre_step * x + coefficient_175 ) ) end function real ( real64 ) elemental function horner_176 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_176 = horner_175 ( x = x , pre_step = ( pre_step * x + coefficient_176 ) ) end function end submodule imp_taylor_series_exp_real64","tags":"","url":"sourcefile/main_submodule_exp_real64.f90.html"},{"title":"main_submodule_cos_real128.f90 – taylor_series_fortran","text":"Source Code !> Implementation of `taylor_series_cos_***` for `real128`. submodule ( taylor_series_fortran ) imp_taylor_series_cos_real128 use , non_intrinsic :: inv_factorial_real128 , only : & ! inv_factorial_002 , & ! coefficient_004 => inv_factorial_004 , & ! inv_factorial_006 , & ! coefficient_008 => inv_factorial_008 , & ! inv_factorial_010 , & ! coefficient_012 => inv_factorial_012 , & ! inv_factorial_014 , & ! coefficient_016 => inv_factorial_016 , & ! inv_factorial_018 , & ! coefficient_020 => inv_factorial_020 , & ! inv_factorial_022 , & ! coefficient_024 => inv_factorial_024 , & ! inv_factorial_026 , & ! coefficient_028 => inv_factorial_028 , & ! inv_factorial_030 , & ! coefficient_032 => inv_factorial_032 , & ! inv_factorial_034 , & ! coefficient_036 => inv_factorial_036 , & ! inv_factorial_038 , & ! coefficient_040 => inv_factorial_040 , & ! inv_factorial_042 , & ! coefficient_044 => inv_factorial_044 , & ! inv_factorial_046 , & ! coefficient_048 => inv_factorial_048 , & ! inv_factorial_050 , & ! coefficient_052 => inv_factorial_052 , & ! inv_factorial_054 , & ! coefficient_056 => inv_factorial_056 , & ! inv_factorial_058 , & ! coefficient_060 => inv_factorial_060 , & ! inv_factorial_062 , & ! coefficient_064 => inv_factorial_064 , & ! inv_factorial_066 , & ! coefficient_068 => inv_factorial_068 , & ! inv_factorial_070 , & ! coefficient_072 => inv_factorial_072 , & ! inv_factorial_074 , & ! coefficient_076 => inv_factorial_076 , & ! inv_factorial_078 , & ! coefficient_080 => inv_factorial_080 , & ! inv_factorial_082 , & ! coefficient_084 => inv_factorial_084 , & ! inv_factorial_086 , & ! coefficient_088 => inv_factorial_088 , & ! inv_factorial_090 , & ! coefficient_092 => inv_factorial_092 , & ! inv_factorial_094 , & ! coefficient_096 => inv_factorial_096 , & ! inv_factorial_098 , & ! coefficient_100 => inv_factorial_100 , & ! inv_factorial_102 , & ! coefficient_104 => inv_factorial_104 , & ! inv_factorial_106 , & ! coefficient_108 => inv_factorial_108 , & ! inv_factorial_110 , & ! coefficient_112 => inv_factorial_112 , & ! inv_factorial_114 , & ! coefficient_116 => inv_factorial_116 , & ! inv_factorial_118 , & ! coefficient_120 => inv_factorial_120 , & ! inv_factorial_122 , & ! coefficient_124 => inv_factorial_124 , & ! inv_factorial_126 , & ! coefficient_128 => inv_factorial_128 , & ! inv_factorial_130 , & ! coefficient_132 => inv_factorial_132 , & ! inv_factorial_134 , & ! coefficient_136 => inv_factorial_136 , & ! inv_factorial_138 , & ! coefficient_140 => inv_factorial_140 , & ! inv_factorial_142 , & ! coefficient_144 => inv_factorial_144 , & ! inv_factorial_146 , & ! coefficient_148 => inv_factorial_148 , & ! inv_factorial_150 , & ! coefficient_152 => inv_factorial_152 , & ! inv_factorial_154 , & ! coefficient_156 => inv_factorial_156 , & ! inv_factorial_158 , & ! coefficient_160 => inv_factorial_160 , & ! inv_factorial_162 , & ! coefficient_164 => inv_factorial_164 , & ! inv_factorial_166 , & ! coefficient_168 => inv_factorial_168 , & ! inv_factorial_170 , & ! coefficient_172 => inv_factorial_172 , & ! inv_factorial_174 , & ! coefficient_176 => inv_factorial_176 implicit none real ( real128 ), parameter :: coefficient_000 = 1.0_real128 real ( real128 ), parameter :: coefficient_001 = 0.0_real128 real ( real128 ), parameter :: coefficient_002 = - inv_factorial_002 real ( real128 ), parameter :: coefficient_003 = 0.0_real128 real ( real128 ), parameter :: coefficient_005 = 0.0_real128 real ( real128 ), parameter :: coefficient_006 = - inv_factorial_006 real ( real128 ), parameter :: coefficient_007 = 0.0_real128 real ( real128 ), parameter :: coefficient_009 = 0.0_real128 real ( real128 ), parameter :: coefficient_010 = - inv_factorial_010 real ( real128 ), parameter :: coefficient_011 = 0.0_real128 real ( real128 ), parameter :: coefficient_013 = 0.0_real128 real ( real128 ), parameter :: coefficient_014 = - inv_factorial_014 real ( real128 ), parameter :: coefficient_015 = 0.0_real128 real ( real128 ), parameter :: coefficient_017 = 0.0_real128 real ( real128 ), parameter :: coefficient_018 = - inv_factorial_018 real ( real128 ), parameter :: coefficient_019 = 0.0_real128 real ( real128 ), parameter :: coefficient_021 = 0.0_real128 real ( real128 ), parameter :: coefficient_022 = - inv_factorial_022 real ( real128 ), parameter :: coefficient_023 = 0.0_real128 real ( real128 ), parameter :: coefficient_025 = 0.0_real128 real ( real128 ), parameter :: coefficient_026 = - inv_factorial_026 real ( real128 ), parameter :: coefficient_027 = 0.0_real128 real ( real128 ), parameter :: coefficient_029 = 0.0_real128 real ( real128 ), parameter :: coefficient_030 = - inv_factorial_030 real ( real128 ), parameter :: coefficient_031 = 0.0_real128 real ( real128 ), parameter :: coefficient_033 = 0.0_real128 real ( real128 ), parameter :: coefficient_034 = - inv_factorial_034 real ( real128 ), parameter :: coefficient_035 = 0.0_real128 real ( real128 ), parameter :: coefficient_037 = 0.0_real128 real ( real128 ), parameter :: coefficient_038 = - inv_factorial_038 real ( real128 ), parameter :: coefficient_039 = 0.0_real128 real ( real128 ), parameter :: coefficient_041 = 0.0_real128 real ( real128 ), parameter :: coefficient_042 = - inv_factorial_042 real ( real128 ), parameter :: coefficient_043 = 0.0_real128 real ( real128 ), parameter :: coefficient_045 = 0.0_real128 real ( real128 ), parameter :: coefficient_046 = - inv_factorial_046 real ( real128 ), parameter :: coefficient_047 = 0.0_real128 real ( real128 ), parameter :: coefficient_049 = 0.0_real128 real ( real128 ), parameter :: coefficient_050 = - inv_factorial_050 real ( real128 ), parameter :: coefficient_051 = 0.0_real128 real ( real128 ), parameter :: coefficient_053 = 0.0_real128 real ( real128 ), parameter :: coefficient_054 = - inv_factorial_054 real ( real128 ), parameter :: coefficient_055 = 0.0_real128 real ( real128 ), parameter :: coefficient_057 = 0.0_real128 real ( real128 ), parameter :: coefficient_058 = - inv_factorial_058 real ( real128 ), parameter :: coefficient_059 = 0.0_real128 real ( real128 ), parameter :: coefficient_061 = 0.0_real128 real ( real128 ), parameter :: coefficient_062 = - inv_factorial_062 real ( real128 ), parameter :: coefficient_063 = 0.0_real128 real ( real128 ), parameter :: coefficient_065 = 0.0_real128 real ( real128 ), parameter :: coefficient_066 = - inv_factorial_066 real ( real128 ), parameter :: coefficient_067 = 0.0_real128 real ( real128 ), parameter :: coefficient_069 = 0.0_real128 real ( real128 ), parameter :: coefficient_070 = - inv_factorial_070 real ( real128 ), parameter :: coefficient_071 = 0.0_real128 real ( real128 ), parameter :: coefficient_073 = 0.0_real128 real ( real128 ), parameter :: coefficient_074 = - inv_factorial_074 real ( real128 ), parameter :: coefficient_075 = 0.0_real128 real ( real128 ), parameter :: coefficient_077 = 0.0_real128 real ( real128 ), parameter :: coefficient_078 = - inv_factorial_078 real ( real128 ), parameter :: coefficient_079 = 0.0_real128 real ( real128 ), parameter :: coefficient_081 = 0.0_real128 real ( real128 ), parameter :: coefficient_082 = - inv_factorial_082 real ( real128 ), parameter :: coefficient_083 = 0.0_real128 real ( real128 ), parameter :: coefficient_085 = 0.0_real128 real ( real128 ), parameter :: coefficient_086 = - inv_factorial_086 real ( real128 ), parameter :: coefficient_087 = 0.0_real128 real ( real128 ), parameter :: coefficient_089 = 0.0_real128 real ( real128 ), parameter :: coefficient_090 = - inv_factorial_090 real ( real128 ), parameter :: coefficient_091 = 0.0_real128 real ( real128 ), parameter :: coefficient_093 = 0.0_real128 real ( real128 ), parameter :: coefficient_094 = - inv_factorial_094 real ( real128 ), parameter :: coefficient_095 = 0.0_real128 real ( real128 ), parameter :: coefficient_097 = 0.0_real128 real ( real128 ), parameter :: coefficient_098 = - inv_factorial_098 real ( real128 ), parameter :: coefficient_099 = 0.0_real128 real ( real128 ), parameter :: coefficient_101 = 0.0_real128 real ( real128 ), parameter :: coefficient_102 = - inv_factorial_102 real ( real128 ), parameter :: coefficient_103 = 0.0_real128 real ( real128 ), parameter :: coefficient_105 = 0.0_real128 real ( real128 ), parameter :: coefficient_106 = - inv_factorial_106 real ( real128 ), parameter :: coefficient_107 = 0.0_real128 real ( real128 ), parameter :: coefficient_109 = 0.0_real128 real ( real128 ), parameter :: coefficient_110 = - inv_factorial_110 real ( real128 ), parameter :: coefficient_111 = 0.0_real128 real ( real128 ), parameter :: coefficient_113 = 0.0_real128 real ( real128 ), parameter :: coefficient_114 = - inv_factorial_114 real ( real128 ), parameter :: coefficient_115 = 0.0_real128 real ( real128 ), parameter :: coefficient_117 = 0.0_real128 real ( real128 ), parameter :: coefficient_118 = - inv_factorial_118 real ( real128 ), parameter :: coefficient_119 = 0.0_real128 real ( real128 ), parameter :: coefficient_121 = 0.0_real128 real ( real128 ), parameter :: coefficient_122 = - inv_factorial_122 real ( real128 ), parameter :: coefficient_123 = 0.0_real128 real ( real128 ), parameter :: coefficient_125 = 0.0_real128 real ( real128 ), parameter :: coefficient_126 = - inv_factorial_126 real ( real128 ), parameter :: coefficient_127 = 0.0_real128 real ( real128 ), parameter :: coefficient_129 = 0.0_real128 real ( real128 ), parameter :: coefficient_130 = - inv_factorial_130 real ( real128 ), parameter :: coefficient_131 = 0.0_real128 real ( real128 ), parameter :: coefficient_133 = 0.0_real128 real ( real128 ), parameter :: coefficient_134 = - inv_factorial_134 real ( real128 ), parameter :: coefficient_135 = 0.0_real128 real ( real128 ), parameter :: coefficient_137 = 0.0_real128 real ( real128 ), parameter :: coefficient_138 = - inv_factorial_138 real ( real128 ), parameter :: coefficient_139 = 0.0_real128 real ( real128 ), parameter :: coefficient_141 = 0.0_real128 real ( real128 ), parameter :: coefficient_142 = - inv_factorial_142 real ( real128 ), parameter :: coefficient_143 = 0.0_real128 real ( real128 ), parameter :: coefficient_145 = 0.0_real128 real ( real128 ), parameter :: coefficient_146 = - inv_factorial_146 real ( real128 ), parameter :: coefficient_147 = 0.0_real128 real ( real128 ), parameter :: coefficient_149 = 0.0_real128 real ( real128 ), parameter :: coefficient_150 = - inv_factorial_150 real ( real128 ), parameter :: coefficient_151 = 0.0_real128 real ( real128 ), parameter :: coefficient_153 = 0.0_real128 real ( real128 ), parameter :: coefficient_154 = - inv_factorial_154 real ( real128 ), parameter :: coefficient_155 = 0.0_real128 real ( real128 ), parameter :: coefficient_157 = 0.0_real128 real ( real128 ), parameter :: coefficient_158 = - inv_factorial_158 real ( real128 ), parameter :: coefficient_159 = 0.0_real128 real ( real128 ), parameter :: coefficient_161 = 0.0_real128 real ( real128 ), parameter :: coefficient_162 = - inv_factorial_162 real ( real128 ), parameter :: coefficient_163 = 0.0_real128 real ( real128 ), parameter :: coefficient_165 = 0.0_real128 real ( real128 ), parameter :: coefficient_166 = - inv_factorial_166 real ( real128 ), parameter :: coefficient_167 = 0.0_real128 real ( real128 ), parameter :: coefficient_169 = 0.0_real128 real ( real128 ), parameter :: coefficient_170 = - inv_factorial_170 real ( real128 ), parameter :: coefficient_171 = 0.0_real128 real ( real128 ), parameter :: coefficient_173 = 0.0_real128 real ( real128 ), parameter :: coefficient_174 = - inv_factorial_174 real ( real128 ), parameter :: coefficient_175 = 0.0_real128 contains module procedure taylor_series_cos_000_real128 res = horner_000 ( x = x , pre_step = 0.0_real128 ) end procedure taylor_series_cos_000_real128 module procedure taylor_series_cos_001_real128 res = taylor_series_cos_000_real128 ( x ) end procedure taylor_series_cos_001_real128 module procedure taylor_series_cos_002_real128 res = horner_001 ( x = x , pre_step = coefficient_002 ) end procedure taylor_series_cos_002_real128 module procedure taylor_series_cos_003_real128 res = taylor_series_cos_002_real128 ( x ) end procedure taylor_series_cos_003_real128 module procedure taylor_series_cos_004_real128 res = horner_003 ( x = x , pre_step = coefficient_004 ) end procedure taylor_series_cos_004_real128 module procedure taylor_series_cos_005_real128 res = taylor_series_cos_004_real128 ( x ) end procedure taylor_series_cos_005_real128 module procedure taylor_series_cos_006_real128 res = horner_005 ( x = x , pre_step = coefficient_006 ) end procedure taylor_series_cos_006_real128 module procedure taylor_series_cos_007_real128 res = taylor_series_cos_006_real128 ( x ) end procedure taylor_series_cos_007_real128 module procedure taylor_series_cos_008_real128 res = horner_007 ( x = x , pre_step = coefficient_008 ) end procedure taylor_series_cos_008_real128 module procedure taylor_series_cos_009_real128 res = taylor_series_cos_008_real128 ( x ) end procedure taylor_series_cos_009_real128 module procedure taylor_series_cos_010_real128 res = horner_009 ( x = x , pre_step = coefficient_010 ) end procedure taylor_series_cos_010_real128 module procedure taylor_series_cos_011_real128 res = taylor_series_cos_010_real128 ( x ) end procedure taylor_series_cos_011_real128 module procedure taylor_series_cos_012_real128 res = horner_011 ( x = x , pre_step = coefficient_012 ) end procedure taylor_series_cos_012_real128 module procedure taylor_series_cos_013_real128 res = taylor_series_cos_012_real128 ( x ) end procedure taylor_series_cos_013_real128 module procedure taylor_series_cos_014_real128 res = horner_013 ( x = x , pre_step = coefficient_014 ) end procedure taylor_series_cos_014_real128 module procedure taylor_series_cos_015_real128 res = taylor_series_cos_014_real128 ( x ) end procedure taylor_series_cos_015_real128 module procedure taylor_series_cos_016_real128 res = horner_015 ( x = x , pre_step = coefficient_016 ) end procedure taylor_series_cos_016_real128 module procedure taylor_series_cos_017_real128 res = taylor_series_cos_016_real128 ( x ) end procedure taylor_series_cos_017_real128 module procedure taylor_series_cos_018_real128 res = horner_017 ( x = x , pre_step = coefficient_018 ) end procedure taylor_series_cos_018_real128 module procedure taylor_series_cos_019_real128 res = taylor_series_cos_018_real128 ( x ) end procedure taylor_series_cos_019_real128 module procedure taylor_series_cos_020_real128 res = horner_019 ( x = x , pre_step = coefficient_020 ) end procedure taylor_series_cos_020_real128 module procedure taylor_series_cos_021_real128 res = taylor_series_cos_020_real128 ( x ) end procedure taylor_series_cos_021_real128 module procedure taylor_series_cos_022_real128 res = horner_021 ( x = x , pre_step = coefficient_022 ) end procedure taylor_series_cos_022_real128 module procedure taylor_series_cos_023_real128 res = taylor_series_cos_022_real128 ( x ) end procedure taylor_series_cos_023_real128 module procedure taylor_series_cos_024_real128 res = horner_023 ( x = x , pre_step = coefficient_024 ) end procedure taylor_series_cos_024_real128 module procedure taylor_series_cos_025_real128 res = taylor_series_cos_024_real128 ( x ) end procedure taylor_series_cos_025_real128 module procedure taylor_series_cos_026_real128 res = horner_025 ( x = x , pre_step = coefficient_026 ) end procedure taylor_series_cos_026_real128 module procedure taylor_series_cos_027_real128 res = taylor_series_cos_026_real128 ( x ) end procedure taylor_series_cos_027_real128 module procedure taylor_series_cos_028_real128 res = horner_027 ( x = x , pre_step = coefficient_028 ) end procedure taylor_series_cos_028_real128 module procedure taylor_series_cos_029_real128 res = taylor_series_cos_028_real128 ( x ) end procedure taylor_series_cos_029_real128 module procedure taylor_series_cos_030_real128 res = horner_029 ( x = x , pre_step = coefficient_030 ) end procedure taylor_series_cos_030_real128 module procedure taylor_series_cos_031_real128 res = taylor_series_cos_030_real128 ( x ) end procedure taylor_series_cos_031_real128 module procedure taylor_series_cos_032_real128 res = horner_031 ( x = x , pre_step = coefficient_032 ) end procedure taylor_series_cos_032_real128 module procedure taylor_series_cos_033_real128 res = taylor_series_cos_032_real128 ( x ) end procedure taylor_series_cos_033_real128 module procedure taylor_series_cos_034_real128 res = horner_033 ( x = x , pre_step = coefficient_034 ) end procedure taylor_series_cos_034_real128 module procedure taylor_series_cos_035_real128 res = taylor_series_cos_034_real128 ( x ) end procedure taylor_series_cos_035_real128 module procedure taylor_series_cos_036_real128 res = horner_035 ( x = x , pre_step = coefficient_036 ) end procedure taylor_series_cos_036_real128 module procedure taylor_series_cos_037_real128 res = taylor_series_cos_036_real128 ( x ) end procedure taylor_series_cos_037_real128 module procedure taylor_series_cos_038_real128 res = horner_037 ( x = x , pre_step = coefficient_038 ) end procedure taylor_series_cos_038_real128 module procedure taylor_series_cos_039_real128 res = taylor_series_cos_038_real128 ( x ) end procedure taylor_series_cos_039_real128 module procedure taylor_series_cos_040_real128 res = horner_039 ( x = x , pre_step = coefficient_040 ) end procedure taylor_series_cos_040_real128 module procedure taylor_series_cos_041_real128 res = taylor_series_cos_040_real128 ( x ) end procedure taylor_series_cos_041_real128 module procedure taylor_series_cos_042_real128 res = horner_041 ( x = x , pre_step = coefficient_042 ) end procedure taylor_series_cos_042_real128 module procedure taylor_series_cos_043_real128 res = taylor_series_cos_042_real128 ( x ) end procedure taylor_series_cos_043_real128 module procedure taylor_series_cos_044_real128 res = horner_043 ( x = x , pre_step = coefficient_044 ) end procedure taylor_series_cos_044_real128 module procedure taylor_series_cos_045_real128 res = taylor_series_cos_044_real128 ( x ) end procedure taylor_series_cos_045_real128 module procedure taylor_series_cos_046_real128 res = horner_045 ( x = x , pre_step = coefficient_046 ) end procedure taylor_series_cos_046_real128 module procedure taylor_series_cos_047_real128 res = taylor_series_cos_046_real128 ( x ) end procedure taylor_series_cos_047_real128 module procedure taylor_series_cos_048_real128 res = horner_047 ( x = x , pre_step = coefficient_048 ) end procedure taylor_series_cos_048_real128 module procedure taylor_series_cos_049_real128 res = taylor_series_cos_048_real128 ( x ) end procedure taylor_series_cos_049_real128 module procedure taylor_series_cos_050_real128 res = horner_049 ( x = x , pre_step = coefficient_050 ) end procedure taylor_series_cos_050_real128 module procedure taylor_series_cos_051_real128 res = taylor_series_cos_050_real128 ( x ) end procedure taylor_series_cos_051_real128 module procedure taylor_series_cos_052_real128 res = horner_051 ( x = x , pre_step = coefficient_052 ) end procedure taylor_series_cos_052_real128 module procedure taylor_series_cos_053_real128 res = taylor_series_cos_052_real128 ( x ) end procedure taylor_series_cos_053_real128 module procedure taylor_series_cos_054_real128 res = horner_053 ( x = x , pre_step = coefficient_054 ) end procedure taylor_series_cos_054_real128 module procedure taylor_series_cos_055_real128 res = taylor_series_cos_054_real128 ( x ) end procedure taylor_series_cos_055_real128 module procedure taylor_series_cos_056_real128 res = horner_055 ( x = x , pre_step = coefficient_056 ) end procedure taylor_series_cos_056_real128 module procedure taylor_series_cos_057_real128 res = taylor_series_cos_056_real128 ( x ) end procedure taylor_series_cos_057_real128 module procedure taylor_series_cos_058_real128 res = horner_057 ( x = x , pre_step = coefficient_058 ) end procedure taylor_series_cos_058_real128 module procedure taylor_series_cos_059_real128 res = taylor_series_cos_058_real128 ( x ) end procedure taylor_series_cos_059_real128 module procedure taylor_series_cos_060_real128 res = horner_059 ( x = x , pre_step = coefficient_060 ) end procedure taylor_series_cos_060_real128 module procedure taylor_series_cos_061_real128 res = taylor_series_cos_060_real128 ( x ) end procedure taylor_series_cos_061_real128 module procedure taylor_series_cos_062_real128 res = horner_061 ( x = x , pre_step = coefficient_062 ) end procedure taylor_series_cos_062_real128 module procedure taylor_series_cos_063_real128 res = taylor_series_cos_062_real128 ( x ) end procedure taylor_series_cos_063_real128 module procedure taylor_series_cos_064_real128 res = horner_063 ( x = x , pre_step = coefficient_064 ) end procedure taylor_series_cos_064_real128 module procedure taylor_series_cos_065_real128 res = taylor_series_cos_064_real128 ( x ) end procedure taylor_series_cos_065_real128 module procedure taylor_series_cos_066_real128 res = horner_065 ( x = x , pre_step = coefficient_066 ) end procedure taylor_series_cos_066_real128 module procedure taylor_series_cos_067_real128 res = taylor_series_cos_066_real128 ( x ) end procedure taylor_series_cos_067_real128 module procedure taylor_series_cos_068_real128 res = horner_067 ( x = x , pre_step = coefficient_068 ) end procedure taylor_series_cos_068_real128 module procedure taylor_series_cos_069_real128 res = taylor_series_cos_068_real128 ( x ) end procedure taylor_series_cos_069_real128 module procedure taylor_series_cos_070_real128 res = horner_069 ( x = x , pre_step = coefficient_070 ) end procedure taylor_series_cos_070_real128 module procedure taylor_series_cos_071_real128 res = taylor_series_cos_070_real128 ( x ) end procedure taylor_series_cos_071_real128 module procedure taylor_series_cos_072_real128 res = horner_071 ( x = x , pre_step = coefficient_072 ) end procedure taylor_series_cos_072_real128 module procedure taylor_series_cos_073_real128 res = taylor_series_cos_072_real128 ( x ) end procedure taylor_series_cos_073_real128 module procedure taylor_series_cos_074_real128 res = horner_073 ( x = x , pre_step = coefficient_074 ) end procedure taylor_series_cos_074_real128 module procedure taylor_series_cos_075_real128 res = taylor_series_cos_074_real128 ( x ) end procedure taylor_series_cos_075_real128 module procedure taylor_series_cos_076_real128 res = horner_075 ( x = x , pre_step = coefficient_076 ) end procedure taylor_series_cos_076_real128 module procedure taylor_series_cos_077_real128 res = taylor_series_cos_076_real128 ( x ) end procedure taylor_series_cos_077_real128 module procedure taylor_series_cos_078_real128 res = horner_077 ( x = x , pre_step = coefficient_078 ) end procedure taylor_series_cos_078_real128 module procedure taylor_series_cos_079_real128 res = taylor_series_cos_078_real128 ( x ) end procedure taylor_series_cos_079_real128 module procedure taylor_series_cos_080_real128 res = horner_079 ( x = x , pre_step = coefficient_080 ) end procedure taylor_series_cos_080_real128 module procedure taylor_series_cos_081_real128 res = taylor_series_cos_080_real128 ( x ) end procedure taylor_series_cos_081_real128 module procedure taylor_series_cos_082_real128 res = horner_081 ( x = x , pre_step = coefficient_082 ) end procedure taylor_series_cos_082_real128 module procedure taylor_series_cos_083_real128 res = taylor_series_cos_082_real128 ( x ) end procedure taylor_series_cos_083_real128 module procedure taylor_series_cos_084_real128 res = horner_083 ( x = x , pre_step = coefficient_084 ) end procedure taylor_series_cos_084_real128 module procedure taylor_series_cos_085_real128 res = taylor_series_cos_084_real128 ( x ) end procedure taylor_series_cos_085_real128 module procedure taylor_series_cos_086_real128 res = horner_085 ( x = x , pre_step = coefficient_086 ) end procedure taylor_series_cos_086_real128 module procedure taylor_series_cos_087_real128 res = taylor_series_cos_086_real128 ( x ) end procedure taylor_series_cos_087_real128 module procedure taylor_series_cos_088_real128 res = horner_087 ( x = x , pre_step = coefficient_088 ) end procedure taylor_series_cos_088_real128 module procedure taylor_series_cos_089_real128 res = taylor_series_cos_088_real128 ( x ) end procedure taylor_series_cos_089_real128 module procedure taylor_series_cos_090_real128 res = horner_089 ( x = x , pre_step = coefficient_090 ) end procedure taylor_series_cos_090_real128 module procedure taylor_series_cos_091_real128 res = taylor_series_cos_090_real128 ( x ) end procedure taylor_series_cos_091_real128 module procedure taylor_series_cos_092_real128 res = horner_091 ( x = x , pre_step = coefficient_092 ) end procedure taylor_series_cos_092_real128 module procedure taylor_series_cos_093_real128 res = taylor_series_cos_092_real128 ( x ) end procedure taylor_series_cos_093_real128 module procedure taylor_series_cos_094_real128 res = horner_093 ( x = x , pre_step = coefficient_094 ) end procedure taylor_series_cos_094_real128 module procedure taylor_series_cos_095_real128 res = taylor_series_cos_094_real128 ( x ) end procedure taylor_series_cos_095_real128 module procedure taylor_series_cos_096_real128 res = horner_095 ( x = x , pre_step = coefficient_096 ) end procedure taylor_series_cos_096_real128 module procedure taylor_series_cos_097_real128 res = taylor_series_cos_096_real128 ( x ) end procedure taylor_series_cos_097_real128 module procedure taylor_series_cos_098_real128 res = horner_097 ( x = x , pre_step = coefficient_098 ) end procedure taylor_series_cos_098_real128 module procedure taylor_series_cos_099_real128 res = taylor_series_cos_098_real128 ( x ) end procedure taylor_series_cos_099_real128 module procedure taylor_series_cos_100_real128 res = horner_099 ( x = x , pre_step = coefficient_100 ) end procedure taylor_series_cos_100_real128 module procedure taylor_series_cos_101_real128 res = taylor_series_cos_100_real128 ( x ) end procedure taylor_series_cos_101_real128 module procedure taylor_series_cos_102_real128 res = horner_101 ( x = x , pre_step = coefficient_102 ) end procedure taylor_series_cos_102_real128 module procedure taylor_series_cos_103_real128 res = taylor_series_cos_102_real128 ( x ) end procedure taylor_series_cos_103_real128 module procedure taylor_series_cos_104_real128 res = horner_103 ( x = x , pre_step = coefficient_104 ) end procedure taylor_series_cos_104_real128 module procedure taylor_series_cos_105_real128 res = taylor_series_cos_104_real128 ( x ) end procedure taylor_series_cos_105_real128 module procedure taylor_series_cos_106_real128 res = horner_105 ( x = x , pre_step = coefficient_106 ) end procedure taylor_series_cos_106_real128 module procedure taylor_series_cos_107_real128 res = taylor_series_cos_106_real128 ( x ) end procedure taylor_series_cos_107_real128 module procedure taylor_series_cos_108_real128 res = horner_107 ( x = x , pre_step = coefficient_108 ) end procedure taylor_series_cos_108_real128 module procedure taylor_series_cos_109_real128 res = taylor_series_cos_108_real128 ( x ) end procedure taylor_series_cos_109_real128 module procedure taylor_series_cos_110_real128 res = horner_109 ( x = x , pre_step = coefficient_110 ) end procedure taylor_series_cos_110_real128 module procedure taylor_series_cos_111_real128 res = taylor_series_cos_110_real128 ( x ) end procedure taylor_series_cos_111_real128 module procedure taylor_series_cos_112_real128 res = horner_111 ( x = x , pre_step = coefficient_112 ) end procedure taylor_series_cos_112_real128 module procedure taylor_series_cos_113_real128 res = taylor_series_cos_112_real128 ( x ) end procedure taylor_series_cos_113_real128 module procedure taylor_series_cos_114_real128 res = horner_113 ( x = x , pre_step = coefficient_114 ) end procedure taylor_series_cos_114_real128 module procedure taylor_series_cos_115_real128 res = taylor_series_cos_114_real128 ( x ) end procedure taylor_series_cos_115_real128 module procedure taylor_series_cos_116_real128 res = horner_115 ( x = x , pre_step = coefficient_116 ) end procedure taylor_series_cos_116_real128 module procedure taylor_series_cos_117_real128 res = taylor_series_cos_116_real128 ( x ) end procedure taylor_series_cos_117_real128 module procedure taylor_series_cos_118_real128 res = horner_117 ( x = x , pre_step = coefficient_118 ) end procedure taylor_series_cos_118_real128 module procedure taylor_series_cos_119_real128 res = taylor_series_cos_118_real128 ( x ) end procedure taylor_series_cos_119_real128 module procedure taylor_series_cos_120_real128 res = horner_119 ( x = x , pre_step = coefficient_120 ) end procedure taylor_series_cos_120_real128 module procedure taylor_series_cos_121_real128 res = taylor_series_cos_120_real128 ( x ) end procedure taylor_series_cos_121_real128 module procedure taylor_series_cos_122_real128 res = horner_121 ( x = x , pre_step = coefficient_122 ) end procedure taylor_series_cos_122_real128 module procedure taylor_series_cos_123_real128 res = taylor_series_cos_122_real128 ( x ) end procedure taylor_series_cos_123_real128 module procedure taylor_series_cos_124_real128 res = horner_123 ( x = x , pre_step = coefficient_124 ) end procedure taylor_series_cos_124_real128 module procedure taylor_series_cos_125_real128 res = taylor_series_cos_124_real128 ( x ) end procedure taylor_series_cos_125_real128 module procedure taylor_series_cos_126_real128 res = horner_125 ( x = x , pre_step = coefficient_126 ) end procedure taylor_series_cos_126_real128 module procedure taylor_series_cos_127_real128 res = taylor_series_cos_126_real128 ( x ) end procedure taylor_series_cos_127_real128 module procedure taylor_series_cos_128_real128 res = horner_127 ( x = x , pre_step = coefficient_128 ) end procedure taylor_series_cos_128_real128 module procedure taylor_series_cos_129_real128 res = taylor_series_cos_128_real128 ( x ) end procedure taylor_series_cos_129_real128 module procedure taylor_series_cos_130_real128 res = horner_129 ( x = x , pre_step = coefficient_130 ) end procedure taylor_series_cos_130_real128 module procedure taylor_series_cos_131_real128 res = taylor_series_cos_130_real128 ( x ) end procedure taylor_series_cos_131_real128 module procedure taylor_series_cos_132_real128 res = horner_131 ( x = x , pre_step = coefficient_132 ) end procedure taylor_series_cos_132_real128 module procedure taylor_series_cos_133_real128 res = taylor_series_cos_132_real128 ( x ) end procedure taylor_series_cos_133_real128 module procedure taylor_series_cos_134_real128 res = horner_133 ( x = x , pre_step = coefficient_134 ) end procedure taylor_series_cos_134_real128 module procedure taylor_series_cos_135_real128 res = taylor_series_cos_134_real128 ( x ) end procedure taylor_series_cos_135_real128 module procedure taylor_series_cos_136_real128 res = horner_135 ( x = x , pre_step = coefficient_136 ) end procedure taylor_series_cos_136_real128 module procedure taylor_series_cos_137_real128 res = taylor_series_cos_136_real128 ( x ) end procedure taylor_series_cos_137_real128 module procedure taylor_series_cos_138_real128 res = horner_137 ( x = x , pre_step = coefficient_138 ) end procedure taylor_series_cos_138_real128 module procedure taylor_series_cos_139_real128 res = taylor_series_cos_138_real128 ( x ) end procedure taylor_series_cos_139_real128 module procedure taylor_series_cos_140_real128 res = horner_139 ( x = x , pre_step = coefficient_140 ) end procedure taylor_series_cos_140_real128 module procedure taylor_series_cos_141_real128 res = taylor_series_cos_140_real128 ( x ) end procedure taylor_series_cos_141_real128 module procedure taylor_series_cos_142_real128 res = horner_141 ( x = x , pre_step = coefficient_142 ) end procedure taylor_series_cos_142_real128 module procedure taylor_series_cos_143_real128 res = taylor_series_cos_142_real128 ( x ) end procedure taylor_series_cos_143_real128 module procedure taylor_series_cos_144_real128 res = horner_143 ( x = x , pre_step = coefficient_144 ) end procedure taylor_series_cos_144_real128 module procedure taylor_series_cos_145_real128 res = taylor_series_cos_144_real128 ( x ) end procedure taylor_series_cos_145_real128 module procedure taylor_series_cos_146_real128 res = horner_145 ( x = x , pre_step = coefficient_146 ) end procedure taylor_series_cos_146_real128 module procedure taylor_series_cos_147_real128 res = taylor_series_cos_146_real128 ( x ) end procedure taylor_series_cos_147_real128 module procedure taylor_series_cos_148_real128 res = horner_147 ( x = x , pre_step = coefficient_148 ) end procedure taylor_series_cos_148_real128 module procedure taylor_series_cos_149_real128 res = taylor_series_cos_148_real128 ( x ) end procedure taylor_series_cos_149_real128 module procedure taylor_series_cos_150_real128 res = horner_149 ( x = x , pre_step = coefficient_150 ) end procedure taylor_series_cos_150_real128 module procedure taylor_series_cos_151_real128 res = taylor_series_cos_150_real128 ( x ) end procedure taylor_series_cos_151_real128 module procedure taylor_series_cos_152_real128 res = horner_151 ( x = x , pre_step = coefficient_152 ) end procedure taylor_series_cos_152_real128 module procedure taylor_series_cos_153_real128 res = taylor_series_cos_152_real128 ( x ) end procedure taylor_series_cos_153_real128 module procedure taylor_series_cos_154_real128 res = horner_153 ( x = x , pre_step = coefficient_154 ) end procedure taylor_series_cos_154_real128 module procedure taylor_series_cos_155_real128 res = taylor_series_cos_154_real128 ( x ) end procedure taylor_series_cos_155_real128 module procedure taylor_series_cos_156_real128 res = horner_155 ( x = x , pre_step = coefficient_156 ) end procedure taylor_series_cos_156_real128 module procedure taylor_series_cos_157_real128 res = taylor_series_cos_156_real128 ( x ) end procedure taylor_series_cos_157_real128 module procedure taylor_series_cos_158_real128 res = horner_157 ( x = x , pre_step = coefficient_158 ) end procedure taylor_series_cos_158_real128 module procedure taylor_series_cos_159_real128 res = taylor_series_cos_158_real128 ( x ) end procedure taylor_series_cos_159_real128 module procedure taylor_series_cos_160_real128 res = horner_159 ( x = x , pre_step = coefficient_160 ) end procedure taylor_series_cos_160_real128 module procedure taylor_series_cos_161_real128 res = taylor_series_cos_160_real128 ( x ) end procedure taylor_series_cos_161_real128 module procedure taylor_series_cos_162_real128 res = horner_161 ( x = x , pre_step = coefficient_162 ) end procedure taylor_series_cos_162_real128 module procedure taylor_series_cos_163_real128 res = taylor_series_cos_162_real128 ( x ) end procedure taylor_series_cos_163_real128 module procedure taylor_series_cos_164_real128 res = horner_163 ( x = x , pre_step = coefficient_164 ) end procedure taylor_series_cos_164_real128 module procedure taylor_series_cos_165_real128 res = taylor_series_cos_164_real128 ( x ) end procedure taylor_series_cos_165_real128 module procedure taylor_series_cos_166_real128 res = horner_165 ( x = x , pre_step = coefficient_166 ) end procedure taylor_series_cos_166_real128 module procedure taylor_series_cos_167_real128 res = taylor_series_cos_166_real128 ( x ) end procedure taylor_series_cos_167_real128 module procedure taylor_series_cos_168_real128 res = horner_167 ( x = x , pre_step = coefficient_168 ) end procedure taylor_series_cos_168_real128 module procedure taylor_series_cos_169_real128 res = taylor_series_cos_168_real128 ( x ) end procedure taylor_series_cos_169_real128 module procedure taylor_series_cos_170_real128 res = horner_169 ( x = x , pre_step = coefficient_170 ) end procedure taylor_series_cos_170_real128 module procedure taylor_series_cos_171_real128 res = taylor_series_cos_170_real128 ( x ) end procedure taylor_series_cos_171_real128 module procedure taylor_series_cos_172_real128 res = horner_171 ( x = x , pre_step = coefficient_172 ) end procedure taylor_series_cos_172_real128 module procedure taylor_series_cos_173_real128 res = taylor_series_cos_172_real128 ( x ) end procedure taylor_series_cos_173_real128 module procedure taylor_series_cos_174_real128 res = horner_173 ( x = x , pre_step = coefficient_174 ) end procedure taylor_series_cos_174_real128 module procedure taylor_series_cos_175_real128 res = taylor_series_cos_174_real128 ( x ) end procedure taylor_series_cos_175_real128 module procedure taylor_series_cos_176_real128 res = horner_175 ( x = x , pre_step = coefficient_176 ) end procedure taylor_series_cos_176_real128 real ( real128 ) elemental function horner_000 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_000 = pre_step * x + coefficient_000 end function real ( real128 ) elemental function horner_001 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_001 = horner_000 ( x = x , pre_step = ( pre_step * x + coefficient_001 ) ) end function real ( real128 ) elemental function horner_002 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_002 = horner_001 ( x = x , pre_step = ( pre_step * x + coefficient_002 ) ) end function real ( real128 ) elemental function horner_003 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_003 = horner_002 ( x = x , pre_step = ( pre_step * x + coefficient_003 ) ) end function real ( real128 ) elemental function horner_004 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_004 = horner_003 ( x = x , pre_step = ( pre_step * x + coefficient_004 ) ) end function real ( real128 ) elemental function horner_005 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_005 = horner_004 ( x = x , pre_step = ( pre_step * x + coefficient_005 ) ) end function real ( real128 ) elemental function horner_006 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_006 = horner_005 ( x = x , pre_step = ( pre_step * x + coefficient_006 ) ) end function real ( real128 ) elemental function horner_007 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_007 = horner_006 ( x = x , pre_step = ( pre_step * x + coefficient_007 ) ) end function real ( real128 ) elemental function horner_008 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_008 = horner_007 ( x = x , pre_step = ( pre_step * x + coefficient_008 ) ) end function real ( real128 ) elemental function horner_009 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_009 = horner_008 ( x = x , pre_step = ( pre_step * x + coefficient_009 ) ) end function real ( real128 ) elemental function horner_010 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_010 = horner_009 ( x = x , pre_step = ( pre_step * x + coefficient_010 ) ) end function real ( real128 ) elemental function horner_011 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_011 = horner_010 ( x = x , pre_step = ( pre_step * x + coefficient_011 ) ) end function real ( real128 ) elemental function horner_012 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_012 = horner_011 ( x = x , pre_step = ( pre_step * x + coefficient_012 ) ) end function real ( real128 ) elemental function horner_013 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_013 = horner_012 ( x = x , pre_step = ( pre_step * x + coefficient_013 ) ) end function real ( real128 ) elemental function horner_014 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_014 = horner_013 ( x = x , pre_step = ( pre_step * x + coefficient_014 ) ) end function real ( real128 ) elemental function horner_015 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_015 = horner_014 ( x = x , pre_step = ( pre_step * x + coefficient_015 ) ) end function real ( real128 ) elemental function horner_016 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_016 = horner_015 ( x = x , pre_step = ( pre_step * x + coefficient_016 ) ) end function real ( real128 ) elemental function horner_017 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_017 = horner_016 ( x = x , pre_step = ( pre_step * x + coefficient_017 ) ) end function real ( real128 ) elemental function horner_018 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_018 = horner_017 ( x = x , pre_step = ( pre_step * x + coefficient_018 ) ) end function real ( real128 ) elemental function horner_019 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_019 = horner_018 ( x = x , pre_step = ( pre_step * x + coefficient_019 ) ) end function real ( real128 ) elemental function horner_020 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_020 = horner_019 ( x = x , pre_step = ( pre_step * x + coefficient_020 ) ) end function real ( real128 ) elemental function horner_021 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_021 = horner_020 ( x = x , pre_step = ( pre_step * x + coefficient_021 ) ) end function real ( real128 ) elemental function horner_022 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_022 = horner_021 ( x = x , pre_step = ( pre_step * x + coefficient_022 ) ) end function real ( real128 ) elemental function horner_023 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_023 = horner_022 ( x = x , pre_step = ( pre_step * x + coefficient_023 ) ) end function real ( real128 ) elemental function horner_024 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_024 = horner_023 ( x = x , pre_step = ( pre_step * x + coefficient_024 ) ) end function real ( real128 ) elemental function horner_025 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_025 = horner_024 ( x = x , pre_step = ( pre_step * x + coefficient_025 ) ) end function real ( real128 ) elemental function horner_026 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_026 = horner_025 ( x = x , pre_step = ( pre_step * x + coefficient_026 ) ) end function real ( real128 ) elemental function horner_027 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_027 = horner_026 ( x = x , pre_step = ( pre_step * x + coefficient_027 ) ) end function real ( real128 ) elemental function horner_028 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_028 = horner_027 ( x = x , pre_step = ( pre_step * x + coefficient_028 ) ) end function real ( real128 ) elemental function horner_029 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_029 = horner_028 ( x = x , pre_step = ( pre_step * x + coefficient_029 ) ) end function real ( real128 ) elemental function horner_030 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_030 = horner_029 ( x = x , pre_step = ( pre_step * x + coefficient_030 ) ) end function real ( real128 ) elemental function horner_031 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_031 = horner_030 ( x = x , pre_step = ( pre_step * x + coefficient_031 ) ) end function real ( real128 ) elemental function horner_032 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_032 = horner_031 ( x = x , pre_step = ( pre_step * x + coefficient_032 ) ) end function real ( real128 ) elemental function horner_033 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_033 = horner_032 ( x = x , pre_step = ( pre_step * x + coefficient_033 ) ) end function real ( real128 ) elemental function horner_034 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_034 = horner_033 ( x = x , pre_step = ( pre_step * x + coefficient_034 ) ) end function real ( real128 ) elemental function horner_035 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_035 = horner_034 ( x = x , pre_step = ( pre_step * x + coefficient_035 ) ) end function real ( real128 ) elemental function horner_036 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_036 = horner_035 ( x = x , pre_step = ( pre_step * x + coefficient_036 ) ) end function real ( real128 ) elemental function horner_037 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_037 = horner_036 ( x = x , pre_step = ( pre_step * x + coefficient_037 ) ) end function real ( real128 ) elemental function horner_038 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_038 = horner_037 ( x = x , pre_step = ( pre_step * x + coefficient_038 ) ) end function real ( real128 ) elemental function horner_039 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_039 = horner_038 ( x = x , pre_step = ( pre_step * x + coefficient_039 ) ) end function real ( real128 ) elemental function horner_040 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_040 = horner_039 ( x = x , pre_step = ( pre_step * x + coefficient_040 ) ) end function real ( real128 ) elemental function horner_041 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_041 = horner_040 ( x = x , pre_step = ( pre_step * x + coefficient_041 ) ) end function real ( real128 ) elemental function horner_042 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_042 = horner_041 ( x = x , pre_step = ( pre_step * x + coefficient_042 ) ) end function real ( real128 ) elemental function horner_043 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_043 = horner_042 ( x = x , pre_step = ( pre_step * x + coefficient_043 ) ) end function real ( real128 ) elemental function horner_044 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_044 = horner_043 ( x = x , pre_step = ( pre_step * x + coefficient_044 ) ) end function real ( real128 ) elemental function horner_045 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_045 = horner_044 ( x = x , pre_step = ( pre_step * x + coefficient_045 ) ) end function real ( real128 ) elemental function horner_046 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_046 = horner_045 ( x = x , pre_step = ( pre_step * x + coefficient_046 ) ) end function real ( real128 ) elemental function horner_047 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_047 = horner_046 ( x = x , pre_step = ( pre_step * x + coefficient_047 ) ) end function real ( real128 ) elemental function horner_048 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_048 = horner_047 ( x = x , pre_step = ( pre_step * x + coefficient_048 ) ) end function real ( real128 ) elemental function horner_049 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_049 = horner_048 ( x = x , pre_step = ( pre_step * x + coefficient_049 ) ) end function real ( real128 ) elemental function horner_050 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_050 = horner_049 ( x = x , pre_step = ( pre_step * x + coefficient_050 ) ) end function real ( real128 ) elemental function horner_051 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_051 = horner_050 ( x = x , pre_step = ( pre_step * x + coefficient_051 ) ) end function real ( real128 ) elemental function horner_052 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_052 = horner_051 ( x = x , pre_step = ( pre_step * x + coefficient_052 ) ) end function real ( real128 ) elemental function horner_053 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_053 = horner_052 ( x = x , pre_step = ( pre_step * x + coefficient_053 ) ) end function real ( real128 ) elemental function horner_054 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_054 = horner_053 ( x = x , pre_step = ( pre_step * x + coefficient_054 ) ) end function real ( real128 ) elemental function horner_055 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_055 = horner_054 ( x = x , pre_step = ( pre_step * x + coefficient_055 ) ) end function real ( real128 ) elemental function horner_056 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_056 = horner_055 ( x = x , pre_step = ( pre_step * x + coefficient_056 ) ) end function real ( real128 ) elemental function horner_057 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_057 = horner_056 ( x = x , pre_step = ( pre_step * x + coefficient_057 ) ) end function real ( real128 ) elemental function horner_058 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_058 = horner_057 ( x = x , pre_step = ( pre_step * x + coefficient_058 ) ) end function real ( real128 ) elemental function horner_059 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_059 = horner_058 ( x = x , pre_step = ( pre_step * x + coefficient_059 ) ) end function real ( real128 ) elemental function horner_060 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_060 = horner_059 ( x = x , pre_step = ( pre_step * x + coefficient_060 ) ) end function real ( real128 ) elemental function horner_061 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_061 = horner_060 ( x = x , pre_step = ( pre_step * x + coefficient_061 ) ) end function real ( real128 ) elemental function horner_062 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_062 = horner_061 ( x = x , pre_step = ( pre_step * x + coefficient_062 ) ) end function real ( real128 ) elemental function horner_063 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_063 = horner_062 ( x = x , pre_step = ( pre_step * x + coefficient_063 ) ) end function real ( real128 ) elemental function horner_064 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_064 = horner_063 ( x = x , pre_step = ( pre_step * x + coefficient_064 ) ) end function real ( real128 ) elemental function horner_065 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_065 = horner_064 ( x = x , pre_step = ( pre_step * x + coefficient_065 ) ) end function real ( real128 ) elemental function horner_066 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_066 = horner_065 ( x = x , pre_step = ( pre_step * x + coefficient_066 ) ) end function real ( real128 ) elemental function horner_067 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_067 = horner_066 ( x = x , pre_step = ( pre_step * x + coefficient_067 ) ) end function real ( real128 ) elemental function horner_068 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_068 = horner_067 ( x = x , pre_step = ( pre_step * x + coefficient_068 ) ) end function real ( real128 ) elemental function horner_069 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_069 = horner_068 ( x = x , pre_step = ( pre_step * x + coefficient_069 ) ) end function real ( real128 ) elemental function horner_070 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_070 = horner_069 ( x = x , pre_step = ( pre_step * x + coefficient_070 ) ) end function real ( real128 ) elemental function horner_071 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_071 = horner_070 ( x = x , pre_step = ( pre_step * x + coefficient_071 ) ) end function real ( real128 ) elemental function horner_072 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_072 = horner_071 ( x = x , pre_step = ( pre_step * x + coefficient_072 ) ) end function real ( real128 ) elemental function horner_073 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_073 = horner_072 ( x = x , pre_step = ( pre_step * x + coefficient_073 ) ) end function real ( real128 ) elemental function horner_074 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_074 = horner_073 ( x = x , pre_step = ( pre_step * x + coefficient_074 ) ) end function real ( real128 ) elemental function horner_075 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_075 = horner_074 ( x = x , pre_step = ( pre_step * x + coefficient_075 ) ) end function real ( real128 ) elemental function horner_076 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_076 = horner_075 ( x = x , pre_step = ( pre_step * x + coefficient_076 ) ) end function real ( real128 ) elemental function horner_077 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_077 = horner_076 ( x = x , pre_step = ( pre_step * x + coefficient_077 ) ) end function real ( real128 ) elemental function horner_078 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_078 = horner_077 ( x = x , pre_step = ( pre_step * x + coefficient_078 ) ) end function real ( real128 ) elemental function horner_079 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_079 = horner_078 ( x = x , pre_step = ( pre_step * x + coefficient_079 ) ) end function real ( real128 ) elemental function horner_080 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_080 = horner_079 ( x = x , pre_step = ( pre_step * x + coefficient_080 ) ) end function real ( real128 ) elemental function horner_081 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_081 = horner_080 ( x = x , pre_step = ( pre_step * x + coefficient_081 ) ) end function real ( real128 ) elemental function horner_082 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_082 = horner_081 ( x = x , pre_step = ( pre_step * x + coefficient_082 ) ) end function real ( real128 ) elemental function horner_083 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_083 = horner_082 ( x = x , pre_step = ( pre_step * x + coefficient_083 ) ) end function real ( real128 ) elemental function horner_084 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_084 = horner_083 ( x = x , pre_step = ( pre_step * x + coefficient_084 ) ) end function real ( real128 ) elemental function horner_085 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_085 = horner_084 ( x = x , pre_step = ( pre_step * x + coefficient_085 ) ) end function real ( real128 ) elemental function horner_086 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_086 = horner_085 ( x = x , pre_step = ( pre_step * x + coefficient_086 ) ) end function real ( real128 ) elemental function horner_087 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_087 = horner_086 ( x = x , pre_step = ( pre_step * x + coefficient_087 ) ) end function real ( real128 ) elemental function horner_088 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_088 = horner_087 ( x = x , pre_step = ( pre_step * x + coefficient_088 ) ) end function real ( real128 ) elemental function horner_089 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_089 = horner_088 ( x = x , pre_step = ( pre_step * x + coefficient_089 ) ) end function real ( real128 ) elemental function horner_090 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_090 = horner_089 ( x = x , pre_step = ( pre_step * x + coefficient_090 ) ) end function real ( real128 ) elemental function horner_091 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_091 = horner_090 ( x = x , pre_step = ( pre_step * x + coefficient_091 ) ) end function real ( real128 ) elemental function horner_092 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_092 = horner_091 ( x = x , pre_step = ( pre_step * x + coefficient_092 ) ) end function real ( real128 ) elemental function horner_093 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_093 = horner_092 ( x = x , pre_step = ( pre_step * x + coefficient_093 ) ) end function real ( real128 ) elemental function horner_094 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_094 = horner_093 ( x = x , pre_step = ( pre_step * x + coefficient_094 ) ) end function real ( real128 ) elemental function horner_095 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_095 = horner_094 ( x = x , pre_step = ( pre_step * x + coefficient_095 ) ) end function real ( real128 ) elemental function horner_096 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_096 = horner_095 ( x = x , pre_step = ( pre_step * x + coefficient_096 ) ) end function real ( real128 ) elemental function horner_097 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_097 = horner_096 ( x = x , pre_step = ( pre_step * x + coefficient_097 ) ) end function real ( real128 ) elemental function horner_098 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_098 = horner_097 ( x = x , pre_step = ( pre_step * x + coefficient_098 ) ) end function real ( real128 ) elemental function horner_099 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_099 = horner_098 ( x = x , pre_step = ( pre_step * x + coefficient_099 ) ) end function real ( real128 ) elemental function horner_100 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_100 = horner_099 ( x = x , pre_step = ( pre_step * x + coefficient_100 ) ) end function real ( real128 ) elemental function horner_101 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_101 = horner_100 ( x = x , pre_step = ( pre_step * x + coefficient_101 ) ) end function real ( real128 ) elemental function horner_102 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_102 = horner_101 ( x = x , pre_step = ( pre_step * x + coefficient_102 ) ) end function real ( real128 ) elemental function horner_103 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_103 = horner_102 ( x = x , pre_step = ( pre_step * x + coefficient_103 ) ) end function real ( real128 ) elemental function horner_104 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_104 = horner_103 ( x = x , pre_step = ( pre_step * x + coefficient_104 ) ) end function real ( real128 ) elemental function horner_105 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_105 = horner_104 ( x = x , pre_step = ( pre_step * x + coefficient_105 ) ) end function real ( real128 ) elemental function horner_106 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_106 = horner_105 ( x = x , pre_step = ( pre_step * x + coefficient_106 ) ) end function real ( real128 ) elemental function horner_107 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_107 = horner_106 ( x = x , pre_step = ( pre_step * x + coefficient_107 ) ) end function real ( real128 ) elemental function horner_108 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_108 = horner_107 ( x = x , pre_step = ( pre_step * x + coefficient_108 ) ) end function real ( real128 ) elemental function horner_109 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_109 = horner_108 ( x = x , pre_step = ( pre_step * x + coefficient_109 ) ) end function real ( real128 ) elemental function horner_110 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_110 = horner_109 ( x = x , pre_step = ( pre_step * x + coefficient_110 ) ) end function real ( real128 ) elemental function horner_111 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_111 = horner_110 ( x = x , pre_step = ( pre_step * x + coefficient_111 ) ) end function real ( real128 ) elemental function horner_112 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_112 = horner_111 ( x = x , pre_step = ( pre_step * x + coefficient_112 ) ) end function real ( real128 ) elemental function horner_113 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_113 = horner_112 ( x = x , pre_step = ( pre_step * x + coefficient_113 ) ) end function real ( real128 ) elemental function horner_114 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_114 = horner_113 ( x = x , pre_step = ( pre_step * x + coefficient_114 ) ) end function real ( real128 ) elemental function horner_115 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_115 = horner_114 ( x = x , pre_step = ( pre_step * x + coefficient_115 ) ) end function real ( real128 ) elemental function horner_116 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_116 = horner_115 ( x = x , pre_step = ( pre_step * x + coefficient_116 ) ) end function real ( real128 ) elemental function horner_117 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_117 = horner_116 ( x = x , pre_step = ( pre_step * x + coefficient_117 ) ) end function real ( real128 ) elemental function horner_118 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_118 = horner_117 ( x = x , pre_step = ( pre_step * x + coefficient_118 ) ) end function real ( real128 ) elemental function horner_119 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_119 = horner_118 ( x = x , pre_step = ( pre_step * x + coefficient_119 ) ) end function real ( real128 ) elemental function horner_120 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_120 = horner_119 ( x = x , pre_step = ( pre_step * x + coefficient_120 ) ) end function real ( real128 ) elemental function horner_121 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_121 = horner_120 ( x = x , pre_step = ( pre_step * x + coefficient_121 ) ) end function real ( real128 ) elemental function horner_122 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_122 = horner_121 ( x = x , pre_step = ( pre_step * x + coefficient_122 ) ) end function real ( real128 ) elemental function horner_123 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_123 = horner_122 ( x = x , pre_step = ( pre_step * x + coefficient_123 ) ) end function real ( real128 ) elemental function horner_124 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_124 = horner_123 ( x = x , pre_step = ( pre_step * x + coefficient_124 ) ) end function real ( real128 ) elemental function horner_125 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_125 = horner_124 ( x = x , pre_step = ( pre_step * x + coefficient_125 ) ) end function real ( real128 ) elemental function horner_126 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_126 = horner_125 ( x = x , pre_step = ( pre_step * x + coefficient_126 ) ) end function real ( real128 ) elemental function horner_127 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_127 = horner_126 ( x = x , pre_step = ( pre_step * x + coefficient_127 ) ) end function real ( real128 ) elemental function horner_128 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_128 = horner_127 ( x = x , pre_step = ( pre_step * x + coefficient_128 ) ) end function real ( real128 ) elemental function horner_129 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_129 = horner_128 ( x = x , pre_step = ( pre_step * x + coefficient_129 ) ) end function real ( real128 ) elemental function horner_130 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_130 = horner_129 ( x = x , pre_step = ( pre_step * x + coefficient_130 ) ) end function real ( real128 ) elemental function horner_131 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_131 = horner_130 ( x = x , pre_step = ( pre_step * x + coefficient_131 ) ) end function real ( real128 ) elemental function horner_132 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_132 = horner_131 ( x = x , pre_step = ( pre_step * x + coefficient_132 ) ) end function real ( real128 ) elemental function horner_133 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_133 = horner_132 ( x = x , pre_step = ( pre_step * x + coefficient_133 ) ) end function real ( real128 ) elemental function horner_134 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_134 = horner_133 ( x = x , pre_step = ( pre_step * x + coefficient_134 ) ) end function real ( real128 ) elemental function horner_135 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_135 = horner_134 ( x = x , pre_step = ( pre_step * x + coefficient_135 ) ) end function real ( real128 ) elemental function horner_136 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_136 = horner_135 ( x = x , pre_step = ( pre_step * x + coefficient_136 ) ) end function real ( real128 ) elemental function horner_137 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_137 = horner_136 ( x = x , pre_step = ( pre_step * x + coefficient_137 ) ) end function real ( real128 ) elemental function horner_138 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_138 = horner_137 ( x = x , pre_step = ( pre_step * x + coefficient_138 ) ) end function real ( real128 ) elemental function horner_139 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_139 = horner_138 ( x = x , pre_step = ( pre_step * x + coefficient_139 ) ) end function real ( real128 ) elemental function horner_140 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_140 = horner_139 ( x = x , pre_step = ( pre_step * x + coefficient_140 ) ) end function real ( real128 ) elemental function horner_141 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_141 = horner_140 ( x = x , pre_step = ( pre_step * x + coefficient_141 ) ) end function real ( real128 ) elemental function horner_142 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_142 = horner_141 ( x = x , pre_step = ( pre_step * x + coefficient_142 ) ) end function real ( real128 ) elemental function horner_143 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_143 = horner_142 ( x = x , pre_step = ( pre_step * x + coefficient_143 ) ) end function real ( real128 ) elemental function horner_144 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_144 = horner_143 ( x = x , pre_step = ( pre_step * x + coefficient_144 ) ) end function real ( real128 ) elemental function horner_145 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_145 = horner_144 ( x = x , pre_step = ( pre_step * x + coefficient_145 ) ) end function real ( real128 ) elemental function horner_146 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_146 = horner_145 ( x = x , pre_step = ( pre_step * x + coefficient_146 ) ) end function real ( real128 ) elemental function horner_147 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_147 = horner_146 ( x = x , pre_step = ( pre_step * x + coefficient_147 ) ) end function real ( real128 ) elemental function horner_148 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_148 = horner_147 ( x = x , pre_step = ( pre_step * x + coefficient_148 ) ) end function real ( real128 ) elemental function horner_149 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_149 = horner_148 ( x = x , pre_step = ( pre_step * x + coefficient_149 ) ) end function real ( real128 ) elemental function horner_150 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_150 = horner_149 ( x = x , pre_step = ( pre_step * x + coefficient_150 ) ) end function real ( real128 ) elemental function horner_151 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_151 = horner_150 ( x = x , pre_step = ( pre_step * x + coefficient_151 ) ) end function real ( real128 ) elemental function horner_152 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_152 = horner_151 ( x = x , pre_step = ( pre_step * x + coefficient_152 ) ) end function real ( real128 ) elemental function horner_153 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_153 = horner_152 ( x = x , pre_step = ( pre_step * x + coefficient_153 ) ) end function real ( real128 ) elemental function horner_154 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_154 = horner_153 ( x = x , pre_step = ( pre_step * x + coefficient_154 ) ) end function real ( real128 ) elemental function horner_155 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_155 = horner_154 ( x = x , pre_step = ( pre_step * x + coefficient_155 ) ) end function real ( real128 ) elemental function horner_156 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_156 = horner_155 ( x = x , pre_step = ( pre_step * x + coefficient_156 ) ) end function real ( real128 ) elemental function horner_157 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_157 = horner_156 ( x = x , pre_step = ( pre_step * x + coefficient_157 ) ) end function real ( real128 ) elemental function horner_158 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_158 = horner_157 ( x = x , pre_step = ( pre_step * x + coefficient_158 ) ) end function real ( real128 ) elemental function horner_159 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_159 = horner_158 ( x = x , pre_step = ( pre_step * x + coefficient_159 ) ) end function real ( real128 ) elemental function horner_160 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_160 = horner_159 ( x = x , pre_step = ( pre_step * x + coefficient_160 ) ) end function real ( real128 ) elemental function horner_161 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_161 = horner_160 ( x = x , pre_step = ( pre_step * x + coefficient_161 ) ) end function real ( real128 ) elemental function horner_162 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_162 = horner_161 ( x = x , pre_step = ( pre_step * x + coefficient_162 ) ) end function real ( real128 ) elemental function horner_163 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_163 = horner_162 ( x = x , pre_step = ( pre_step * x + coefficient_163 ) ) end function real ( real128 ) elemental function horner_164 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_164 = horner_163 ( x = x , pre_step = ( pre_step * x + coefficient_164 ) ) end function real ( real128 ) elemental function horner_165 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_165 = horner_164 ( x = x , pre_step = ( pre_step * x + coefficient_165 ) ) end function real ( real128 ) elemental function horner_166 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_166 = horner_165 ( x = x , pre_step = ( pre_step * x + coefficient_166 ) ) end function real ( real128 ) elemental function horner_167 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_167 = horner_166 ( x = x , pre_step = ( pre_step * x + coefficient_167 ) ) end function real ( real128 ) elemental function horner_168 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_168 = horner_167 ( x = x , pre_step = ( pre_step * x + coefficient_168 ) ) end function real ( real128 ) elemental function horner_169 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_169 = horner_168 ( x = x , pre_step = ( pre_step * x + coefficient_169 ) ) end function real ( real128 ) elemental function horner_170 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_170 = horner_169 ( x = x , pre_step = ( pre_step * x + coefficient_170 ) ) end function real ( real128 ) elemental function horner_171 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_171 = horner_170 ( x = x , pre_step = ( pre_step * x + coefficient_171 ) ) end function real ( real128 ) elemental function horner_172 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_172 = horner_171 ( x = x , pre_step = ( pre_step * x + coefficient_172 ) ) end function real ( real128 ) elemental function horner_173 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_173 = horner_172 ( x = x , pre_step = ( pre_step * x + coefficient_173 ) ) end function real ( real128 ) elemental function horner_174 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_174 = horner_173 ( x = x , pre_step = ( pre_step * x + coefficient_174 ) ) end function real ( real128 ) elemental function horner_175 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_175 = horner_174 ( x = x , pre_step = ( pre_step * x + coefficient_175 ) ) end function end submodule imp_taylor_series_cos_real128","tags":"","url":"sourcefile/main_submodule_cos_real128.f90.html"},{"title":"main_submodule_sin_real64.f90 – taylor_series_fortran","text":"Source Code !> Implementation of `taylor_series_sin_***` for `real64`. submodule ( taylor_series_fortran ) imp_taylor_series_sin_real64 use , non_intrinsic :: inv_factorial_real64 , only : & ! coefficient_001 => inv_factorial_001 , & ! inv_factorial_003 , & ! coefficient_005 => inv_factorial_005 , & ! inv_factorial_007 , & ! coefficient_009 => inv_factorial_009 , & ! inv_factorial_011 , & ! coefficient_013 => inv_factorial_013 , & ! inv_factorial_015 , & ! coefficient_017 => inv_factorial_017 , & ! inv_factorial_019 , & ! coefficient_021 => inv_factorial_021 , & ! inv_factorial_023 , & ! coefficient_025 => inv_factorial_025 , & ! inv_factorial_027 , & ! coefficient_029 => inv_factorial_029 , & ! inv_factorial_031 , & ! coefficient_033 => inv_factorial_033 , & ! inv_factorial_035 , & ! coefficient_037 => inv_factorial_037 , & ! inv_factorial_039 , & ! coefficient_041 => inv_factorial_041 , & ! inv_factorial_043 , & ! coefficient_045 => inv_factorial_045 , & ! inv_factorial_047 , & ! coefficient_049 => inv_factorial_049 , & ! inv_factorial_051 , & ! coefficient_053 => inv_factorial_053 , & ! inv_factorial_055 , & ! coefficient_057 => inv_factorial_057 , & ! inv_factorial_059 , & ! coefficient_061 => inv_factorial_061 , & ! inv_factorial_063 , & ! coefficient_065 => inv_factorial_065 , & ! inv_factorial_067 , & ! coefficient_069 => inv_factorial_069 , & ! inv_factorial_071 , & ! coefficient_073 => inv_factorial_073 , & ! inv_factorial_075 , & ! coefficient_077 => inv_factorial_077 , & ! inv_factorial_079 , & ! coefficient_081 => inv_factorial_081 , & ! inv_factorial_083 , & ! coefficient_085 => inv_factorial_085 , & ! inv_factorial_087 , & ! coefficient_089 => inv_factorial_089 , & ! inv_factorial_091 , & ! coefficient_093 => inv_factorial_093 , & ! inv_factorial_095 , & ! coefficient_097 => inv_factorial_097 , & ! inv_factorial_099 , & ! coefficient_101 => inv_factorial_101 , & ! inv_factorial_103 , & ! coefficient_105 => inv_factorial_105 , & ! inv_factorial_107 , & ! coefficient_109 => inv_factorial_109 , & ! inv_factorial_111 , & ! coefficient_113 => inv_factorial_113 , & ! inv_factorial_115 , & ! coefficient_117 => inv_factorial_117 , & ! inv_factorial_119 , & ! coefficient_121 => inv_factorial_121 , & ! inv_factorial_123 , & ! coefficient_125 => inv_factorial_125 , & ! inv_factorial_127 , & ! coefficient_129 => inv_factorial_129 , & ! inv_factorial_131 , & ! coefficient_133 => inv_factorial_133 , & ! inv_factorial_135 , & ! coefficient_137 => inv_factorial_137 , & ! inv_factorial_139 , & ! coefficient_141 => inv_factorial_141 , & ! inv_factorial_143 , & ! coefficient_145 => inv_factorial_145 , & ! inv_factorial_147 , & ! coefficient_149 => inv_factorial_149 , & ! inv_factorial_151 , & ! coefficient_153 => inv_factorial_153 , & ! inv_factorial_155 , & ! coefficient_157 => inv_factorial_157 , & ! inv_factorial_159 , & ! coefficient_161 => inv_factorial_161 , & ! inv_factorial_163 , & ! coefficient_165 => inv_factorial_165 , & ! inv_factorial_167 , & ! coefficient_169 => inv_factorial_169 , & ! inv_factorial_171 , & ! coefficient_173 => inv_factorial_173 , & ! inv_factorial_175 , & ! coefficient_177 => inv_factorial_177 implicit none real ( real64 ), parameter :: coefficient_000 = 0.0_real64 real ( real64 ), parameter :: coefficient_002 = 0.0_real64 real ( real64 ), parameter :: coefficient_003 = - inv_factorial_003 real ( real64 ), parameter :: coefficient_004 = 0.0_real64 real ( real64 ), parameter :: coefficient_006 = 0.0_real64 real ( real64 ), parameter :: coefficient_007 = - inv_factorial_007 real ( real64 ), parameter :: coefficient_008 = 0.0_real64 real ( real64 ), parameter :: coefficient_010 = 0.0_real64 real ( real64 ), parameter :: coefficient_011 = - inv_factorial_011 real ( real64 ), parameter :: coefficient_012 = 0.0_real64 real ( real64 ), parameter :: coefficient_014 = 0.0_real64 real ( real64 ), parameter :: coefficient_015 = - inv_factorial_015 real ( real64 ), parameter :: coefficient_016 = 0.0_real64 real ( real64 ), parameter :: coefficient_018 = 0.0_real64 real ( real64 ), parameter :: coefficient_019 = - inv_factorial_019 real ( real64 ), parameter :: coefficient_020 = 0.0_real64 real ( real64 ), parameter :: coefficient_022 = 0.0_real64 real ( real64 ), parameter :: coefficient_023 = - inv_factorial_023 real ( real64 ), parameter :: coefficient_024 = 0.0_real64 real ( real64 ), parameter :: coefficient_026 = 0.0_real64 real ( real64 ), parameter :: coefficient_027 = - inv_factorial_027 real ( real64 ), parameter :: coefficient_028 = 0.0_real64 real ( real64 ), parameter :: coefficient_030 = 0.0_real64 real ( real64 ), parameter :: coefficient_031 = - inv_factorial_031 real ( real64 ), parameter :: coefficient_032 = 0.0_real64 real ( real64 ), parameter :: coefficient_034 = 0.0_real64 real ( real64 ), parameter :: coefficient_035 = - inv_factorial_035 real ( real64 ), parameter :: coefficient_036 = 0.0_real64 real ( real64 ), parameter :: coefficient_038 = 0.0_real64 real ( real64 ), parameter :: coefficient_039 = - inv_factorial_039 real ( real64 ), parameter :: coefficient_040 = 0.0_real64 real ( real64 ), parameter :: coefficient_042 = 0.0_real64 real ( real64 ), parameter :: coefficient_043 = - inv_factorial_043 real ( real64 ), parameter :: coefficient_044 = 0.0_real64 real ( real64 ), parameter :: coefficient_046 = 0.0_real64 real ( real64 ), parameter :: coefficient_047 = - inv_factorial_047 real ( real64 ), parameter :: coefficient_048 = 0.0_real64 real ( real64 ), parameter :: coefficient_050 = 0.0_real64 real ( real64 ), parameter :: coefficient_051 = - inv_factorial_051 real ( real64 ), parameter :: coefficient_052 = 0.0_real64 real ( real64 ), parameter :: coefficient_054 = 0.0_real64 real ( real64 ), parameter :: coefficient_055 = - inv_factorial_055 real ( real64 ), parameter :: coefficient_056 = 0.0_real64 real ( real64 ), parameter :: coefficient_058 = 0.0_real64 real ( real64 ), parameter :: coefficient_059 = - inv_factorial_059 real ( real64 ), parameter :: coefficient_060 = 0.0_real64 real ( real64 ), parameter :: coefficient_062 = 0.0_real64 real ( real64 ), parameter :: coefficient_063 = - inv_factorial_063 real ( real64 ), parameter :: coefficient_064 = 0.0_real64 real ( real64 ), parameter :: coefficient_066 = 0.0_real64 real ( real64 ), parameter :: coefficient_067 = - inv_factorial_067 real ( real64 ), parameter :: coefficient_068 = 0.0_real64 real ( real64 ), parameter :: coefficient_070 = 0.0_real64 real ( real64 ), parameter :: coefficient_071 = - inv_factorial_071 real ( real64 ), parameter :: coefficient_072 = 0.0_real64 real ( real64 ), parameter :: coefficient_074 = 0.0_real64 real ( real64 ), parameter :: coefficient_075 = - inv_factorial_075 real ( real64 ), parameter :: coefficient_076 = 0.0_real64 real ( real64 ), parameter :: coefficient_078 = 0.0_real64 real ( real64 ), parameter :: coefficient_079 = - inv_factorial_079 real ( real64 ), parameter :: coefficient_080 = 0.0_real64 real ( real64 ), parameter :: coefficient_082 = 0.0_real64 real ( real64 ), parameter :: coefficient_083 = - inv_factorial_083 real ( real64 ), parameter :: coefficient_084 = 0.0_real64 real ( real64 ), parameter :: coefficient_086 = 0.0_real64 real ( real64 ), parameter :: coefficient_087 = - inv_factorial_087 real ( real64 ), parameter :: coefficient_088 = 0.0_real64 real ( real64 ), parameter :: coefficient_090 = 0.0_real64 real ( real64 ), parameter :: coefficient_091 = - inv_factorial_091 real ( real64 ), parameter :: coefficient_092 = 0.0_real64 real ( real64 ), parameter :: coefficient_094 = 0.0_real64 real ( real64 ), parameter :: coefficient_095 = - inv_factorial_095 real ( real64 ), parameter :: coefficient_096 = 0.0_real64 real ( real64 ), parameter :: coefficient_098 = 0.0_real64 real ( real64 ), parameter :: coefficient_099 = - inv_factorial_099 real ( real64 ), parameter :: coefficient_100 = 0.0_real64 real ( real64 ), parameter :: coefficient_102 = 0.0_real64 real ( real64 ), parameter :: coefficient_103 = - inv_factorial_103 real ( real64 ), parameter :: coefficient_104 = 0.0_real64 real ( real64 ), parameter :: coefficient_106 = 0.0_real64 real ( real64 ), parameter :: coefficient_107 = - inv_factorial_107 real ( real64 ), parameter :: coefficient_108 = 0.0_real64 real ( real64 ), parameter :: coefficient_110 = 0.0_real64 real ( real64 ), parameter :: coefficient_111 = - inv_factorial_111 real ( real64 ), parameter :: coefficient_112 = 0.0_real64 real ( real64 ), parameter :: coefficient_114 = 0.0_real64 real ( real64 ), parameter :: coefficient_115 = - inv_factorial_115 real ( real64 ), parameter :: coefficient_116 = 0.0_real64 real ( real64 ), parameter :: coefficient_118 = 0.0_real64 real ( real64 ), parameter :: coefficient_119 = - inv_factorial_119 real ( real64 ), parameter :: coefficient_120 = 0.0_real64 real ( real64 ), parameter :: coefficient_122 = 0.0_real64 real ( real64 ), parameter :: coefficient_123 = - inv_factorial_123 real ( real64 ), parameter :: coefficient_124 = 0.0_real64 real ( real64 ), parameter :: coefficient_126 = 0.0_real64 real ( real64 ), parameter :: coefficient_127 = - inv_factorial_127 real ( real64 ), parameter :: coefficient_128 = 0.0_real64 real ( real64 ), parameter :: coefficient_130 = 0.0_real64 real ( real64 ), parameter :: coefficient_131 = - inv_factorial_131 real ( real64 ), parameter :: coefficient_132 = 0.0_real64 real ( real64 ), parameter :: coefficient_134 = 0.0_real64 real ( real64 ), parameter :: coefficient_135 = - inv_factorial_135 real ( real64 ), parameter :: coefficient_136 = 0.0_real64 real ( real64 ), parameter :: coefficient_138 = 0.0_real64 real ( real64 ), parameter :: coefficient_139 = - inv_factorial_139 real ( real64 ), parameter :: coefficient_140 = 0.0_real64 real ( real64 ), parameter :: coefficient_142 = 0.0_real64 real ( real64 ), parameter :: coefficient_143 = - inv_factorial_143 real ( real64 ), parameter :: coefficient_144 = 0.0_real64 real ( real64 ), parameter :: coefficient_146 = 0.0_real64 real ( real64 ), parameter :: coefficient_147 = - inv_factorial_147 real ( real64 ), parameter :: coefficient_148 = 0.0_real64 real ( real64 ), parameter :: coefficient_150 = 0.0_real64 real ( real64 ), parameter :: coefficient_151 = - inv_factorial_151 real ( real64 ), parameter :: coefficient_152 = 0.0_real64 real ( real64 ), parameter :: coefficient_154 = 0.0_real64 real ( real64 ), parameter :: coefficient_155 = - inv_factorial_155 real ( real64 ), parameter :: coefficient_156 = 0.0_real64 real ( real64 ), parameter :: coefficient_158 = 0.0_real64 real ( real64 ), parameter :: coefficient_159 = - inv_factorial_159 real ( real64 ), parameter :: coefficient_160 = 0.0_real64 real ( real64 ), parameter :: coefficient_162 = 0.0_real64 real ( real64 ), parameter :: coefficient_163 = - inv_factorial_163 real ( real64 ), parameter :: coefficient_164 = 0.0_real64 real ( real64 ), parameter :: coefficient_166 = 0.0_real64 real ( real64 ), parameter :: coefficient_167 = - inv_factorial_167 real ( real64 ), parameter :: coefficient_168 = 0.0_real64 real ( real64 ), parameter :: coefficient_170 = 0.0_real64 real ( real64 ), parameter :: coefficient_171 = - inv_factorial_171 real ( real64 ), parameter :: coefficient_172 = 0.0_real64 real ( real64 ), parameter :: coefficient_174 = 0.0_real64 real ( real64 ), parameter :: coefficient_175 = - inv_factorial_175 real ( real64 ), parameter :: coefficient_176 = 0.0_real64 contains module procedure taylor_series_sin_000_real64 res = horner_000 ( x = x , pre_step = 0.0_real64 ) end procedure taylor_series_sin_000_real64 module procedure taylor_series_sin_001_real64 res = horner_000 ( x = x , pre_step = coefficient_001 ) end procedure taylor_series_sin_001_real64 module procedure taylor_series_sin_002_real64 res = taylor_series_sin_001_real64 ( x ) end procedure taylor_series_sin_002_real64 module procedure taylor_series_sin_003_real64 res = horner_002 ( x = x , pre_step = coefficient_003 ) end procedure taylor_series_sin_003_real64 module procedure taylor_series_sin_004_real64 res = taylor_series_sin_003_real64 ( x ) end procedure taylor_series_sin_004_real64 module procedure taylor_series_sin_005_real64 res = horner_004 ( x = x , pre_step = coefficient_005 ) end procedure taylor_series_sin_005_real64 module procedure taylor_series_sin_006_real64 res = taylor_series_sin_005_real64 ( x ) end procedure taylor_series_sin_006_real64 module procedure taylor_series_sin_007_real64 res = horner_006 ( x = x , pre_step = coefficient_007 ) end procedure taylor_series_sin_007_real64 module procedure taylor_series_sin_008_real64 res = taylor_series_sin_007_real64 ( x ) end procedure taylor_series_sin_008_real64 module procedure taylor_series_sin_009_real64 res = horner_008 ( x = x , pre_step = coefficient_009 ) end procedure taylor_series_sin_009_real64 module procedure taylor_series_sin_010_real64 res = taylor_series_sin_009_real64 ( x ) end procedure taylor_series_sin_010_real64 module procedure taylor_series_sin_011_real64 res = horner_010 ( x = x , pre_step = coefficient_011 ) end procedure taylor_series_sin_011_real64 module procedure taylor_series_sin_012_real64 res = taylor_series_sin_011_real64 ( x ) end procedure taylor_series_sin_012_real64 module procedure taylor_series_sin_013_real64 res = horner_012 ( x = x , pre_step = coefficient_013 ) end procedure taylor_series_sin_013_real64 module procedure taylor_series_sin_014_real64 res = taylor_series_sin_013_real64 ( x ) end procedure taylor_series_sin_014_real64 module procedure taylor_series_sin_015_real64 res = horner_014 ( x = x , pre_step = coefficient_015 ) end procedure taylor_series_sin_015_real64 module procedure taylor_series_sin_016_real64 res = taylor_series_sin_015_real64 ( x ) end procedure taylor_series_sin_016_real64 module procedure taylor_series_sin_017_real64 res = horner_016 ( x = x , pre_step = coefficient_017 ) end procedure taylor_series_sin_017_real64 module procedure taylor_series_sin_018_real64 res = taylor_series_sin_017_real64 ( x ) end procedure taylor_series_sin_018_real64 module procedure taylor_series_sin_019_real64 res = horner_018 ( x = x , pre_step = coefficient_019 ) end procedure taylor_series_sin_019_real64 module procedure taylor_series_sin_020_real64 res = taylor_series_sin_019_real64 ( x ) end procedure taylor_series_sin_020_real64 module procedure taylor_series_sin_021_real64 res = horner_020 ( x = x , pre_step = coefficient_021 ) end procedure taylor_series_sin_021_real64 module procedure taylor_series_sin_022_real64 res = taylor_series_sin_021_real64 ( x ) end procedure taylor_series_sin_022_real64 module procedure taylor_series_sin_023_real64 res = horner_022 ( x = x , pre_step = coefficient_023 ) end procedure taylor_series_sin_023_real64 module procedure taylor_series_sin_024_real64 res = taylor_series_sin_023_real64 ( x ) end procedure taylor_series_sin_024_real64 module procedure taylor_series_sin_025_real64 res = horner_024 ( x = x , pre_step = coefficient_025 ) end procedure taylor_series_sin_025_real64 module procedure taylor_series_sin_026_real64 res = taylor_series_sin_025_real64 ( x ) end procedure taylor_series_sin_026_real64 module procedure taylor_series_sin_027_real64 res = horner_026 ( x = x , pre_step = coefficient_027 ) end procedure taylor_series_sin_027_real64 module procedure taylor_series_sin_028_real64 res = taylor_series_sin_027_real64 ( x ) end procedure taylor_series_sin_028_real64 module procedure taylor_series_sin_029_real64 res = horner_028 ( x = x , pre_step = coefficient_029 ) end procedure taylor_series_sin_029_real64 module procedure taylor_series_sin_030_real64 res = taylor_series_sin_029_real64 ( x ) end procedure taylor_series_sin_030_real64 module procedure taylor_series_sin_031_real64 res = horner_030 ( x = x , pre_step = coefficient_031 ) end procedure taylor_series_sin_031_real64 module procedure taylor_series_sin_032_real64 res = taylor_series_sin_031_real64 ( x ) end procedure taylor_series_sin_032_real64 module procedure taylor_series_sin_033_real64 res = horner_032 ( x = x , pre_step = coefficient_033 ) end procedure taylor_series_sin_033_real64 module procedure taylor_series_sin_034_real64 res = taylor_series_sin_033_real64 ( x ) end procedure taylor_series_sin_034_real64 module procedure taylor_series_sin_035_real64 res = horner_034 ( x = x , pre_step = coefficient_035 ) end procedure taylor_series_sin_035_real64 module procedure taylor_series_sin_036_real64 res = taylor_series_sin_035_real64 ( x ) end procedure taylor_series_sin_036_real64 module procedure taylor_series_sin_037_real64 res = horner_036 ( x = x , pre_step = coefficient_037 ) end procedure taylor_series_sin_037_real64 module procedure taylor_series_sin_038_real64 res = taylor_series_sin_037_real64 ( x ) end procedure taylor_series_sin_038_real64 module procedure taylor_series_sin_039_real64 res = horner_038 ( x = x , pre_step = coefficient_039 ) end procedure taylor_series_sin_039_real64 module procedure taylor_series_sin_040_real64 res = taylor_series_sin_039_real64 ( x ) end procedure taylor_series_sin_040_real64 module procedure taylor_series_sin_041_real64 res = horner_040 ( x = x , pre_step = coefficient_041 ) end procedure taylor_series_sin_041_real64 module procedure taylor_series_sin_042_real64 res = taylor_series_sin_041_real64 ( x ) end procedure taylor_series_sin_042_real64 module procedure taylor_series_sin_043_real64 res = horner_042 ( x = x , pre_step = coefficient_043 ) end procedure taylor_series_sin_043_real64 module procedure taylor_series_sin_044_real64 res = taylor_series_sin_043_real64 ( x ) end procedure taylor_series_sin_044_real64 module procedure taylor_series_sin_045_real64 res = horner_044 ( x = x , pre_step = coefficient_045 ) end procedure taylor_series_sin_045_real64 module procedure taylor_series_sin_046_real64 res = taylor_series_sin_045_real64 ( x ) end procedure taylor_series_sin_046_real64 module procedure taylor_series_sin_047_real64 res = horner_046 ( x = x , pre_step = coefficient_047 ) end procedure taylor_series_sin_047_real64 module procedure taylor_series_sin_048_real64 res = taylor_series_sin_047_real64 ( x ) end procedure taylor_series_sin_048_real64 module procedure taylor_series_sin_049_real64 res = horner_048 ( x = x , pre_step = coefficient_049 ) end procedure taylor_series_sin_049_real64 module procedure taylor_series_sin_050_real64 res = taylor_series_sin_049_real64 ( x ) end procedure taylor_series_sin_050_real64 module procedure taylor_series_sin_051_real64 res = horner_050 ( x = x , pre_step = coefficient_051 ) end procedure taylor_series_sin_051_real64 module procedure taylor_series_sin_052_real64 res = taylor_series_sin_051_real64 ( x ) end procedure taylor_series_sin_052_real64 module procedure taylor_series_sin_053_real64 res = horner_052 ( x = x , pre_step = coefficient_053 ) end procedure taylor_series_sin_053_real64 module procedure taylor_series_sin_054_real64 res = taylor_series_sin_053_real64 ( x ) end procedure taylor_series_sin_054_real64 module procedure taylor_series_sin_055_real64 res = horner_054 ( x = x , pre_step = coefficient_055 ) end procedure taylor_series_sin_055_real64 module procedure taylor_series_sin_056_real64 res = taylor_series_sin_055_real64 ( x ) end procedure taylor_series_sin_056_real64 module procedure taylor_series_sin_057_real64 res = horner_056 ( x = x , pre_step = coefficient_057 ) end procedure taylor_series_sin_057_real64 module procedure taylor_series_sin_058_real64 res = taylor_series_sin_057_real64 ( x ) end procedure taylor_series_sin_058_real64 module procedure taylor_series_sin_059_real64 res = horner_058 ( x = x , pre_step = coefficient_059 ) end procedure taylor_series_sin_059_real64 module procedure taylor_series_sin_060_real64 res = taylor_series_sin_059_real64 ( x ) end procedure taylor_series_sin_060_real64 module procedure taylor_series_sin_061_real64 res = horner_060 ( x = x , pre_step = coefficient_061 ) end procedure taylor_series_sin_061_real64 module procedure taylor_series_sin_062_real64 res = taylor_series_sin_061_real64 ( x ) end procedure taylor_series_sin_062_real64 module procedure taylor_series_sin_063_real64 res = horner_062 ( x = x , pre_step = coefficient_063 ) end procedure taylor_series_sin_063_real64 module procedure taylor_series_sin_064_real64 res = taylor_series_sin_063_real64 ( x ) end procedure taylor_series_sin_064_real64 module procedure taylor_series_sin_065_real64 res = horner_064 ( x = x , pre_step = coefficient_065 ) end procedure taylor_series_sin_065_real64 module procedure taylor_series_sin_066_real64 res = taylor_series_sin_065_real64 ( x ) end procedure taylor_series_sin_066_real64 module procedure taylor_series_sin_067_real64 res = horner_066 ( x = x , pre_step = coefficient_067 ) end procedure taylor_series_sin_067_real64 module procedure taylor_series_sin_068_real64 res = taylor_series_sin_067_real64 ( x ) end procedure taylor_series_sin_068_real64 module procedure taylor_series_sin_069_real64 res = horner_068 ( x = x , pre_step = coefficient_069 ) end procedure taylor_series_sin_069_real64 module procedure taylor_series_sin_070_real64 res = taylor_series_sin_069_real64 ( x ) end procedure taylor_series_sin_070_real64 module procedure taylor_series_sin_071_real64 res = horner_070 ( x = x , pre_step = coefficient_071 ) end procedure taylor_series_sin_071_real64 module procedure taylor_series_sin_072_real64 res = taylor_series_sin_071_real64 ( x ) end procedure taylor_series_sin_072_real64 module procedure taylor_series_sin_073_real64 res = horner_072 ( x = x , pre_step = coefficient_073 ) end procedure taylor_series_sin_073_real64 module procedure taylor_series_sin_074_real64 res = taylor_series_sin_073_real64 ( x ) end procedure taylor_series_sin_074_real64 module procedure taylor_series_sin_075_real64 res = horner_074 ( x = x , pre_step = coefficient_075 ) end procedure taylor_series_sin_075_real64 module procedure taylor_series_sin_076_real64 res = taylor_series_sin_075_real64 ( x ) end procedure taylor_series_sin_076_real64 module procedure taylor_series_sin_077_real64 res = horner_076 ( x = x , pre_step = coefficient_077 ) end procedure taylor_series_sin_077_real64 module procedure taylor_series_sin_078_real64 res = taylor_series_sin_077_real64 ( x ) end procedure taylor_series_sin_078_real64 module procedure taylor_series_sin_079_real64 res = horner_078 ( x = x , pre_step = coefficient_079 ) end procedure taylor_series_sin_079_real64 module procedure taylor_series_sin_080_real64 res = taylor_series_sin_079_real64 ( x ) end procedure taylor_series_sin_080_real64 module procedure taylor_series_sin_081_real64 res = horner_080 ( x = x , pre_step = coefficient_081 ) end procedure taylor_series_sin_081_real64 module procedure taylor_series_sin_082_real64 res = taylor_series_sin_081_real64 ( x ) end procedure taylor_series_sin_082_real64 module procedure taylor_series_sin_083_real64 res = horner_082 ( x = x , pre_step = coefficient_083 ) end procedure taylor_series_sin_083_real64 module procedure taylor_series_sin_084_real64 res = taylor_series_sin_083_real64 ( x ) end procedure taylor_series_sin_084_real64 module procedure taylor_series_sin_085_real64 res = horner_084 ( x = x , pre_step = coefficient_085 ) end procedure taylor_series_sin_085_real64 module procedure taylor_series_sin_086_real64 res = taylor_series_sin_085_real64 ( x ) end procedure taylor_series_sin_086_real64 module procedure taylor_series_sin_087_real64 res = horner_086 ( x = x , pre_step = coefficient_087 ) end procedure taylor_series_sin_087_real64 module procedure taylor_series_sin_088_real64 res = taylor_series_sin_087_real64 ( x ) end procedure taylor_series_sin_088_real64 module procedure taylor_series_sin_089_real64 res = horner_088 ( x = x , pre_step = coefficient_089 ) end procedure taylor_series_sin_089_real64 module procedure taylor_series_sin_090_real64 res = taylor_series_sin_089_real64 ( x ) end procedure taylor_series_sin_090_real64 module procedure taylor_series_sin_091_real64 res = horner_090 ( x = x , pre_step = coefficient_091 ) end procedure taylor_series_sin_091_real64 module procedure taylor_series_sin_092_real64 res = taylor_series_sin_091_real64 ( x ) end procedure taylor_series_sin_092_real64 module procedure taylor_series_sin_093_real64 res = horner_092 ( x = x , pre_step = coefficient_093 ) end procedure taylor_series_sin_093_real64 module procedure taylor_series_sin_094_real64 res = taylor_series_sin_093_real64 ( x ) end procedure taylor_series_sin_094_real64 module procedure taylor_series_sin_095_real64 res = horner_094 ( x = x , pre_step = coefficient_095 ) end procedure taylor_series_sin_095_real64 module procedure taylor_series_sin_096_real64 res = taylor_series_sin_095_real64 ( x ) end procedure taylor_series_sin_096_real64 module procedure taylor_series_sin_097_real64 res = horner_096 ( x = x , pre_step = coefficient_097 ) end procedure taylor_series_sin_097_real64 module procedure taylor_series_sin_098_real64 res = taylor_series_sin_097_real64 ( x ) end procedure taylor_series_sin_098_real64 module procedure taylor_series_sin_099_real64 res = horner_098 ( x = x , pre_step = coefficient_099 ) end procedure taylor_series_sin_099_real64 module procedure taylor_series_sin_100_real64 res = taylor_series_sin_099_real64 ( x ) end procedure taylor_series_sin_100_real64 module procedure taylor_series_sin_101_real64 res = horner_100 ( x = x , pre_step = coefficient_101 ) end procedure taylor_series_sin_101_real64 module procedure taylor_series_sin_102_real64 res = taylor_series_sin_101_real64 ( x ) end procedure taylor_series_sin_102_real64 module procedure taylor_series_sin_103_real64 res = horner_102 ( x = x , pre_step = coefficient_103 ) end procedure taylor_series_sin_103_real64 module procedure taylor_series_sin_104_real64 res = taylor_series_sin_103_real64 ( x ) end procedure taylor_series_sin_104_real64 module procedure taylor_series_sin_105_real64 res = horner_104 ( x = x , pre_step = coefficient_105 ) end procedure taylor_series_sin_105_real64 module procedure taylor_series_sin_106_real64 res = taylor_series_sin_105_real64 ( x ) end procedure taylor_series_sin_106_real64 module procedure taylor_series_sin_107_real64 res = horner_106 ( x = x , pre_step = coefficient_107 ) end procedure taylor_series_sin_107_real64 module procedure taylor_series_sin_108_real64 res = taylor_series_sin_107_real64 ( x ) end procedure taylor_series_sin_108_real64 module procedure taylor_series_sin_109_real64 res = horner_108 ( x = x , pre_step = coefficient_109 ) end procedure taylor_series_sin_109_real64 module procedure taylor_series_sin_110_real64 res = taylor_series_sin_109_real64 ( x ) end procedure taylor_series_sin_110_real64 module procedure taylor_series_sin_111_real64 res = horner_110 ( x = x , pre_step = coefficient_111 ) end procedure taylor_series_sin_111_real64 module procedure taylor_series_sin_112_real64 res = taylor_series_sin_111_real64 ( x ) end procedure taylor_series_sin_112_real64 module procedure taylor_series_sin_113_real64 res = horner_112 ( x = x , pre_step = coefficient_113 ) end procedure taylor_series_sin_113_real64 module procedure taylor_series_sin_114_real64 res = taylor_series_sin_113_real64 ( x ) end procedure taylor_series_sin_114_real64 module procedure taylor_series_sin_115_real64 res = horner_114 ( x = x , pre_step = coefficient_115 ) end procedure taylor_series_sin_115_real64 module procedure taylor_series_sin_116_real64 res = taylor_series_sin_115_real64 ( x ) end procedure taylor_series_sin_116_real64 module procedure taylor_series_sin_117_real64 res = horner_116 ( x = x , pre_step = coefficient_117 ) end procedure taylor_series_sin_117_real64 module procedure taylor_series_sin_118_real64 res = taylor_series_sin_117_real64 ( x ) end procedure taylor_series_sin_118_real64 module procedure taylor_series_sin_119_real64 res = horner_118 ( x = x , pre_step = coefficient_119 ) end procedure taylor_series_sin_119_real64 module procedure taylor_series_sin_120_real64 res = taylor_series_sin_119_real64 ( x ) end procedure taylor_series_sin_120_real64 module procedure taylor_series_sin_121_real64 res = horner_120 ( x = x , pre_step = coefficient_121 ) end procedure taylor_series_sin_121_real64 module procedure taylor_series_sin_122_real64 res = taylor_series_sin_121_real64 ( x ) end procedure taylor_series_sin_122_real64 module procedure taylor_series_sin_123_real64 res = horner_122 ( x = x , pre_step = coefficient_123 ) end procedure taylor_series_sin_123_real64 module procedure taylor_series_sin_124_real64 res = taylor_series_sin_123_real64 ( x ) end procedure taylor_series_sin_124_real64 module procedure taylor_series_sin_125_real64 res = horner_124 ( x = x , pre_step = coefficient_125 ) end procedure taylor_series_sin_125_real64 module procedure taylor_series_sin_126_real64 res = taylor_series_sin_125_real64 ( x ) end procedure taylor_series_sin_126_real64 module procedure taylor_series_sin_127_real64 res = horner_126 ( x = x , pre_step = coefficient_127 ) end procedure taylor_series_sin_127_real64 module procedure taylor_series_sin_128_real64 res = taylor_series_sin_127_real64 ( x ) end procedure taylor_series_sin_128_real64 module procedure taylor_series_sin_129_real64 res = horner_128 ( x = x , pre_step = coefficient_129 ) end procedure taylor_series_sin_129_real64 module procedure taylor_series_sin_130_real64 res = taylor_series_sin_129_real64 ( x ) end procedure taylor_series_sin_130_real64 module procedure taylor_series_sin_131_real64 res = horner_130 ( x = x , pre_step = coefficient_131 ) end procedure taylor_series_sin_131_real64 module procedure taylor_series_sin_132_real64 res = taylor_series_sin_131_real64 ( x ) end procedure taylor_series_sin_132_real64 module procedure taylor_series_sin_133_real64 res = horner_132 ( x = x , pre_step = coefficient_133 ) end procedure taylor_series_sin_133_real64 module procedure taylor_series_sin_134_real64 res = taylor_series_sin_133_real64 ( x ) end procedure taylor_series_sin_134_real64 module procedure taylor_series_sin_135_real64 res = horner_134 ( x = x , pre_step = coefficient_135 ) end procedure taylor_series_sin_135_real64 module procedure taylor_series_sin_136_real64 res = taylor_series_sin_135_real64 ( x ) end procedure taylor_series_sin_136_real64 module procedure taylor_series_sin_137_real64 res = horner_136 ( x = x , pre_step = coefficient_137 ) end procedure taylor_series_sin_137_real64 module procedure taylor_series_sin_138_real64 res = taylor_series_sin_137_real64 ( x ) end procedure taylor_series_sin_138_real64 module procedure taylor_series_sin_139_real64 res = horner_138 ( x = x , pre_step = coefficient_139 ) end procedure taylor_series_sin_139_real64 module procedure taylor_series_sin_140_real64 res = taylor_series_sin_139_real64 ( x ) end procedure taylor_series_sin_140_real64 module procedure taylor_series_sin_141_real64 res = horner_140 ( x = x , pre_step = coefficient_141 ) end procedure taylor_series_sin_141_real64 module procedure taylor_series_sin_142_real64 res = taylor_series_sin_141_real64 ( x ) end procedure taylor_series_sin_142_real64 module procedure taylor_series_sin_143_real64 res = horner_142 ( x = x , pre_step = coefficient_143 ) end procedure taylor_series_sin_143_real64 module procedure taylor_series_sin_144_real64 res = taylor_series_sin_143_real64 ( x ) end procedure taylor_series_sin_144_real64 module procedure taylor_series_sin_145_real64 res = horner_144 ( x = x , pre_step = coefficient_145 ) end procedure taylor_series_sin_145_real64 module procedure taylor_series_sin_146_real64 res = taylor_series_sin_145_real64 ( x ) end procedure taylor_series_sin_146_real64 module procedure taylor_series_sin_147_real64 res = horner_146 ( x = x , pre_step = coefficient_147 ) end procedure taylor_series_sin_147_real64 module procedure taylor_series_sin_148_real64 res = taylor_series_sin_147_real64 ( x ) end procedure taylor_series_sin_148_real64 module procedure taylor_series_sin_149_real64 res = horner_148 ( x = x , pre_step = coefficient_149 ) end procedure taylor_series_sin_149_real64 module procedure taylor_series_sin_150_real64 res = taylor_series_sin_149_real64 ( x ) end procedure taylor_series_sin_150_real64 module procedure taylor_series_sin_151_real64 res = horner_150 ( x = x , pre_step = coefficient_151 ) end procedure taylor_series_sin_151_real64 module procedure taylor_series_sin_152_real64 res = taylor_series_sin_151_real64 ( x ) end procedure taylor_series_sin_152_real64 module procedure taylor_series_sin_153_real64 res = horner_152 ( x = x , pre_step = coefficient_153 ) end procedure taylor_series_sin_153_real64 module procedure taylor_series_sin_154_real64 res = taylor_series_sin_153_real64 ( x ) end procedure taylor_series_sin_154_real64 module procedure taylor_series_sin_155_real64 res = horner_154 ( x = x , pre_step = coefficient_155 ) end procedure taylor_series_sin_155_real64 module procedure taylor_series_sin_156_real64 res = taylor_series_sin_155_real64 ( x ) end procedure taylor_series_sin_156_real64 module procedure taylor_series_sin_157_real64 res = horner_156 ( x = x , pre_step = coefficient_157 ) end procedure taylor_series_sin_157_real64 module procedure taylor_series_sin_158_real64 res = taylor_series_sin_157_real64 ( x ) end procedure taylor_series_sin_158_real64 module procedure taylor_series_sin_159_real64 res = horner_158 ( x = x , pre_step = coefficient_159 ) end procedure taylor_series_sin_159_real64 module procedure taylor_series_sin_160_real64 res = taylor_series_sin_159_real64 ( x ) end procedure taylor_series_sin_160_real64 module procedure taylor_series_sin_161_real64 res = horner_160 ( x = x , pre_step = coefficient_161 ) end procedure taylor_series_sin_161_real64 module procedure taylor_series_sin_162_real64 res = taylor_series_sin_161_real64 ( x ) end procedure taylor_series_sin_162_real64 module procedure taylor_series_sin_163_real64 res = horner_162 ( x = x , pre_step = coefficient_163 ) end procedure taylor_series_sin_163_real64 module procedure taylor_series_sin_164_real64 res = taylor_series_sin_163_real64 ( x ) end procedure taylor_series_sin_164_real64 module procedure taylor_series_sin_165_real64 res = horner_164 ( x = x , pre_step = coefficient_165 ) end procedure taylor_series_sin_165_real64 module procedure taylor_series_sin_166_real64 res = taylor_series_sin_165_real64 ( x ) end procedure taylor_series_sin_166_real64 module procedure taylor_series_sin_167_real64 res = horner_166 ( x = x , pre_step = coefficient_167 ) end procedure taylor_series_sin_167_real64 module procedure taylor_series_sin_168_real64 res = taylor_series_sin_167_real64 ( x ) end procedure taylor_series_sin_168_real64 module procedure taylor_series_sin_169_real64 res = horner_168 ( x = x , pre_step = coefficient_169 ) end procedure taylor_series_sin_169_real64 module procedure taylor_series_sin_170_real64 res = taylor_series_sin_169_real64 ( x ) end procedure taylor_series_sin_170_real64 module procedure taylor_series_sin_171_real64 res = horner_170 ( x = x , pre_step = coefficient_171 ) end procedure taylor_series_sin_171_real64 module procedure taylor_series_sin_172_real64 res = taylor_series_sin_171_real64 ( x ) end procedure taylor_series_sin_172_real64 module procedure taylor_series_sin_173_real64 res = horner_172 ( x = x , pre_step = coefficient_173 ) end procedure taylor_series_sin_173_real64 module procedure taylor_series_sin_174_real64 res = taylor_series_sin_173_real64 ( x ) end procedure taylor_series_sin_174_real64 module procedure taylor_series_sin_175_real64 res = horner_174 ( x = x , pre_step = coefficient_175 ) end procedure taylor_series_sin_175_real64 module procedure taylor_series_sin_176_real64 res = taylor_series_sin_175_real64 ( x ) end procedure taylor_series_sin_176_real64 module procedure taylor_series_sin_177_real64 res = horner_176 ( x = x , pre_step = coefficient_177 ) end procedure taylor_series_sin_177_real64 real ( real64 ) elemental function horner_000 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_000 = pre_step * x + coefficient_000 end function real ( real64 ) elemental function horner_001 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_001 = horner_000 ( x = x , pre_step = ( pre_step * x + coefficient_001 ) ) end function real ( real64 ) elemental function horner_002 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_002 = horner_001 ( x = x , pre_step = ( pre_step * x + coefficient_002 ) ) end function real ( real64 ) elemental function horner_003 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_003 = horner_002 ( x = x , pre_step = ( pre_step * x + coefficient_003 ) ) end function real ( real64 ) elemental function horner_004 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_004 = horner_003 ( x = x , pre_step = ( pre_step * x + coefficient_004 ) ) end function real ( real64 ) elemental function horner_005 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_005 = horner_004 ( x = x , pre_step = ( pre_step * x + coefficient_005 ) ) end function real ( real64 ) elemental function horner_006 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_006 = horner_005 ( x = x , pre_step = ( pre_step * x + coefficient_006 ) ) end function real ( real64 ) elemental function horner_007 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_007 = horner_006 ( x = x , pre_step = ( pre_step * x + coefficient_007 ) ) end function real ( real64 ) elemental function horner_008 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_008 = horner_007 ( x = x , pre_step = ( pre_step * x + coefficient_008 ) ) end function real ( real64 ) elemental function horner_009 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_009 = horner_008 ( x = x , pre_step = ( pre_step * x + coefficient_009 ) ) end function real ( real64 ) elemental function horner_010 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_010 = horner_009 ( x = x , pre_step = ( pre_step * x + coefficient_010 ) ) end function real ( real64 ) elemental function horner_011 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_011 = horner_010 ( x = x , pre_step = ( pre_step * x + coefficient_011 ) ) end function real ( real64 ) elemental function horner_012 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_012 = horner_011 ( x = x , pre_step = ( pre_step * x + coefficient_012 ) ) end function real ( real64 ) elemental function horner_013 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_013 = horner_012 ( x = x , pre_step = ( pre_step * x + coefficient_013 ) ) end function real ( real64 ) elemental function horner_014 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_014 = horner_013 ( x = x , pre_step = ( pre_step * x + coefficient_014 ) ) end function real ( real64 ) elemental function horner_015 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_015 = horner_014 ( x = x , pre_step = ( pre_step * x + coefficient_015 ) ) end function real ( real64 ) elemental function horner_016 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_016 = horner_015 ( x = x , pre_step = ( pre_step * x + coefficient_016 ) ) end function real ( real64 ) elemental function horner_017 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_017 = horner_016 ( x = x , pre_step = ( pre_step * x + coefficient_017 ) ) end function real ( real64 ) elemental function horner_018 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_018 = horner_017 ( x = x , pre_step = ( pre_step * x + coefficient_018 ) ) end function real ( real64 ) elemental function horner_019 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_019 = horner_018 ( x = x , pre_step = ( pre_step * x + coefficient_019 ) ) end function real ( real64 ) elemental function horner_020 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_020 = horner_019 ( x = x , pre_step = ( pre_step * x + coefficient_020 ) ) end function real ( real64 ) elemental function horner_021 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_021 = horner_020 ( x = x , pre_step = ( pre_step * x + coefficient_021 ) ) end function real ( real64 ) elemental function horner_022 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_022 = horner_021 ( x = x , pre_step = ( pre_step * x + coefficient_022 ) ) end function real ( real64 ) elemental function horner_023 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_023 = horner_022 ( x = x , pre_step = ( pre_step * x + coefficient_023 ) ) end function real ( real64 ) elemental function horner_024 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_024 = horner_023 ( x = x , pre_step = ( pre_step * x + coefficient_024 ) ) end function real ( real64 ) elemental function horner_025 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_025 = horner_024 ( x = x , pre_step = ( pre_step * x + coefficient_025 ) ) end function real ( real64 ) elemental function horner_026 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_026 = horner_025 ( x = x , pre_step = ( pre_step * x + coefficient_026 ) ) end function real ( real64 ) elemental function horner_027 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_027 = horner_026 ( x = x , pre_step = ( pre_step * x + coefficient_027 ) ) end function real ( real64 ) elemental function horner_028 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_028 = horner_027 ( x = x , pre_step = ( pre_step * x + coefficient_028 ) ) end function real ( real64 ) elemental function horner_029 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_029 = horner_028 ( x = x , pre_step = ( pre_step * x + coefficient_029 ) ) end function real ( real64 ) elemental function horner_030 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_030 = horner_029 ( x = x , pre_step = ( pre_step * x + coefficient_030 ) ) end function real ( real64 ) elemental function horner_031 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_031 = horner_030 ( x = x , pre_step = ( pre_step * x + coefficient_031 ) ) end function real ( real64 ) elemental function horner_032 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_032 = horner_031 ( x = x , pre_step = ( pre_step * x + coefficient_032 ) ) end function real ( real64 ) elemental function horner_033 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_033 = horner_032 ( x = x , pre_step = ( pre_step * x + coefficient_033 ) ) end function real ( real64 ) elemental function horner_034 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_034 = horner_033 ( x = x , pre_step = ( pre_step * x + coefficient_034 ) ) end function real ( real64 ) elemental function horner_035 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_035 = horner_034 ( x = x , pre_step = ( pre_step * x + coefficient_035 ) ) end function real ( real64 ) elemental function horner_036 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_036 = horner_035 ( x = x , pre_step = ( pre_step * x + coefficient_036 ) ) end function real ( real64 ) elemental function horner_037 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_037 = horner_036 ( x = x , pre_step = ( pre_step * x + coefficient_037 ) ) end function real ( real64 ) elemental function horner_038 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_038 = horner_037 ( x = x , pre_step = ( pre_step * x + coefficient_038 ) ) end function real ( real64 ) elemental function horner_039 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_039 = horner_038 ( x = x , pre_step = ( pre_step * x + coefficient_039 ) ) end function real ( real64 ) elemental function horner_040 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_040 = horner_039 ( x = x , pre_step = ( pre_step * x + coefficient_040 ) ) end function real ( real64 ) elemental function horner_041 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_041 = horner_040 ( x = x , pre_step = ( pre_step * x + coefficient_041 ) ) end function real ( real64 ) elemental function horner_042 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_042 = horner_041 ( x = x , pre_step = ( pre_step * x + coefficient_042 ) ) end function real ( real64 ) elemental function horner_043 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_043 = horner_042 ( x = x , pre_step = ( pre_step * x + coefficient_043 ) ) end function real ( real64 ) elemental function horner_044 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_044 = horner_043 ( x = x , pre_step = ( pre_step * x + coefficient_044 ) ) end function real ( real64 ) elemental function horner_045 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_045 = horner_044 ( x = x , pre_step = ( pre_step * x + coefficient_045 ) ) end function real ( real64 ) elemental function horner_046 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_046 = horner_045 ( x = x , pre_step = ( pre_step * x + coefficient_046 ) ) end function real ( real64 ) elemental function horner_047 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_047 = horner_046 ( x = x , pre_step = ( pre_step * x + coefficient_047 ) ) end function real ( real64 ) elemental function horner_048 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_048 = horner_047 ( x = x , pre_step = ( pre_step * x + coefficient_048 ) ) end function real ( real64 ) elemental function horner_049 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_049 = horner_048 ( x = x , pre_step = ( pre_step * x + coefficient_049 ) ) end function real ( real64 ) elemental function horner_050 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_050 = horner_049 ( x = x , pre_step = ( pre_step * x + coefficient_050 ) ) end function real ( real64 ) elemental function horner_051 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_051 = horner_050 ( x = x , pre_step = ( pre_step * x + coefficient_051 ) ) end function real ( real64 ) elemental function horner_052 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_052 = horner_051 ( x = x , pre_step = ( pre_step * x + coefficient_052 ) ) end function real ( real64 ) elemental function horner_053 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_053 = horner_052 ( x = x , pre_step = ( pre_step * x + coefficient_053 ) ) end function real ( real64 ) elemental function horner_054 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_054 = horner_053 ( x = x , pre_step = ( pre_step * x + coefficient_054 ) ) end function real ( real64 ) elemental function horner_055 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_055 = horner_054 ( x = x , pre_step = ( pre_step * x + coefficient_055 ) ) end function real ( real64 ) elemental function horner_056 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_056 = horner_055 ( x = x , pre_step = ( pre_step * x + coefficient_056 ) ) end function real ( real64 ) elemental function horner_057 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_057 = horner_056 ( x = x , pre_step = ( pre_step * x + coefficient_057 ) ) end function real ( real64 ) elemental function horner_058 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_058 = horner_057 ( x = x , pre_step = ( pre_step * x + coefficient_058 ) ) end function real ( real64 ) elemental function horner_059 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_059 = horner_058 ( x = x , pre_step = ( pre_step * x + coefficient_059 ) ) end function real ( real64 ) elemental function horner_060 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_060 = horner_059 ( x = x , pre_step = ( pre_step * x + coefficient_060 ) ) end function real ( real64 ) elemental function horner_061 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_061 = horner_060 ( x = x , pre_step = ( pre_step * x + coefficient_061 ) ) end function real ( real64 ) elemental function horner_062 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_062 = horner_061 ( x = x , pre_step = ( pre_step * x + coefficient_062 ) ) end function real ( real64 ) elemental function horner_063 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_063 = horner_062 ( x = x , pre_step = ( pre_step * x + coefficient_063 ) ) end function real ( real64 ) elemental function horner_064 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_064 = horner_063 ( x = x , pre_step = ( pre_step * x + coefficient_064 ) ) end function real ( real64 ) elemental function horner_065 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_065 = horner_064 ( x = x , pre_step = ( pre_step * x + coefficient_065 ) ) end function real ( real64 ) elemental function horner_066 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_066 = horner_065 ( x = x , pre_step = ( pre_step * x + coefficient_066 ) ) end function real ( real64 ) elemental function horner_067 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_067 = horner_066 ( x = x , pre_step = ( pre_step * x + coefficient_067 ) ) end function real ( real64 ) elemental function horner_068 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_068 = horner_067 ( x = x , pre_step = ( pre_step * x + coefficient_068 ) ) end function real ( real64 ) elemental function horner_069 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_069 = horner_068 ( x = x , pre_step = ( pre_step * x + coefficient_069 ) ) end function real ( real64 ) elemental function horner_070 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_070 = horner_069 ( x = x , pre_step = ( pre_step * x + coefficient_070 ) ) end function real ( real64 ) elemental function horner_071 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_071 = horner_070 ( x = x , pre_step = ( pre_step * x + coefficient_071 ) ) end function real ( real64 ) elemental function horner_072 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_072 = horner_071 ( x = x , pre_step = ( pre_step * x + coefficient_072 ) ) end function real ( real64 ) elemental function horner_073 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_073 = horner_072 ( x = x , pre_step = ( pre_step * x + coefficient_073 ) ) end function real ( real64 ) elemental function horner_074 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_074 = horner_073 ( x = x , pre_step = ( pre_step * x + coefficient_074 ) ) end function real ( real64 ) elemental function horner_075 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_075 = horner_074 ( x = x , pre_step = ( pre_step * x + coefficient_075 ) ) end function real ( real64 ) elemental function horner_076 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_076 = horner_075 ( x = x , pre_step = ( pre_step * x + coefficient_076 ) ) end function real ( real64 ) elemental function horner_077 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_077 = horner_076 ( x = x , pre_step = ( pre_step * x + coefficient_077 ) ) end function real ( real64 ) elemental function horner_078 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_078 = horner_077 ( x = x , pre_step = ( pre_step * x + coefficient_078 ) ) end function real ( real64 ) elemental function horner_079 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_079 = horner_078 ( x = x , pre_step = ( pre_step * x + coefficient_079 ) ) end function real ( real64 ) elemental function horner_080 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_080 = horner_079 ( x = x , pre_step = ( pre_step * x + coefficient_080 ) ) end function real ( real64 ) elemental function horner_081 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_081 = horner_080 ( x = x , pre_step = ( pre_step * x + coefficient_081 ) ) end function real ( real64 ) elemental function horner_082 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_082 = horner_081 ( x = x , pre_step = ( pre_step * x + coefficient_082 ) ) end function real ( real64 ) elemental function horner_083 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_083 = horner_082 ( x = x , pre_step = ( pre_step * x + coefficient_083 ) ) end function real ( real64 ) elemental function horner_084 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_084 = horner_083 ( x = x , pre_step = ( pre_step * x + coefficient_084 ) ) end function real ( real64 ) elemental function horner_085 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_085 = horner_084 ( x = x , pre_step = ( pre_step * x + coefficient_085 ) ) end function real ( real64 ) elemental function horner_086 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_086 = horner_085 ( x = x , pre_step = ( pre_step * x + coefficient_086 ) ) end function real ( real64 ) elemental function horner_087 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_087 = horner_086 ( x = x , pre_step = ( pre_step * x + coefficient_087 ) ) end function real ( real64 ) elemental function horner_088 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_088 = horner_087 ( x = x , pre_step = ( pre_step * x + coefficient_088 ) ) end function real ( real64 ) elemental function horner_089 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_089 = horner_088 ( x = x , pre_step = ( pre_step * x + coefficient_089 ) ) end function real ( real64 ) elemental function horner_090 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_090 = horner_089 ( x = x , pre_step = ( pre_step * x + coefficient_090 ) ) end function real ( real64 ) elemental function horner_091 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_091 = horner_090 ( x = x , pre_step = ( pre_step * x + coefficient_091 ) ) end function real ( real64 ) elemental function horner_092 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_092 = horner_091 ( x = x , pre_step = ( pre_step * x + coefficient_092 ) ) end function real ( real64 ) elemental function horner_093 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_093 = horner_092 ( x = x , pre_step = ( pre_step * x + coefficient_093 ) ) end function real ( real64 ) elemental function horner_094 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_094 = horner_093 ( x = x , pre_step = ( pre_step * x + coefficient_094 ) ) end function real ( real64 ) elemental function horner_095 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_095 = horner_094 ( x = x , pre_step = ( pre_step * x + coefficient_095 ) ) end function real ( real64 ) elemental function horner_096 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_096 = horner_095 ( x = x , pre_step = ( pre_step * x + coefficient_096 ) ) end function real ( real64 ) elemental function horner_097 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_097 = horner_096 ( x = x , pre_step = ( pre_step * x + coefficient_097 ) ) end function real ( real64 ) elemental function horner_098 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_098 = horner_097 ( x = x , pre_step = ( pre_step * x + coefficient_098 ) ) end function real ( real64 ) elemental function horner_099 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_099 = horner_098 ( x = x , pre_step = ( pre_step * x + coefficient_099 ) ) end function real ( real64 ) elemental function horner_100 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_100 = horner_099 ( x = x , pre_step = ( pre_step * x + coefficient_100 ) ) end function real ( real64 ) elemental function horner_101 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_101 = horner_100 ( x = x , pre_step = ( pre_step * x + coefficient_101 ) ) end function real ( real64 ) elemental function horner_102 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_102 = horner_101 ( x = x , pre_step = ( pre_step * x + coefficient_102 ) ) end function real ( real64 ) elemental function horner_103 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_103 = horner_102 ( x = x , pre_step = ( pre_step * x + coefficient_103 ) ) end function real ( real64 ) elemental function horner_104 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_104 = horner_103 ( x = x , pre_step = ( pre_step * x + coefficient_104 ) ) end function real ( real64 ) elemental function horner_105 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_105 = horner_104 ( x = x , pre_step = ( pre_step * x + coefficient_105 ) ) end function real ( real64 ) elemental function horner_106 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_106 = horner_105 ( x = x , pre_step = ( pre_step * x + coefficient_106 ) ) end function real ( real64 ) elemental function horner_107 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_107 = horner_106 ( x = x , pre_step = ( pre_step * x + coefficient_107 ) ) end function real ( real64 ) elemental function horner_108 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_108 = horner_107 ( x = x , pre_step = ( pre_step * x + coefficient_108 ) ) end function real ( real64 ) elemental function horner_109 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_109 = horner_108 ( x = x , pre_step = ( pre_step * x + coefficient_109 ) ) end function real ( real64 ) elemental function horner_110 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_110 = horner_109 ( x = x , pre_step = ( pre_step * x + coefficient_110 ) ) end function real ( real64 ) elemental function horner_111 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_111 = horner_110 ( x = x , pre_step = ( pre_step * x + coefficient_111 ) ) end function real ( real64 ) elemental function horner_112 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_112 = horner_111 ( x = x , pre_step = ( pre_step * x + coefficient_112 ) ) end function real ( real64 ) elemental function horner_113 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_113 = horner_112 ( x = x , pre_step = ( pre_step * x + coefficient_113 ) ) end function real ( real64 ) elemental function horner_114 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_114 = horner_113 ( x = x , pre_step = ( pre_step * x + coefficient_114 ) ) end function real ( real64 ) elemental function horner_115 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_115 = horner_114 ( x = x , pre_step = ( pre_step * x + coefficient_115 ) ) end function real ( real64 ) elemental function horner_116 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_116 = horner_115 ( x = x , pre_step = ( pre_step * x + coefficient_116 ) ) end function real ( real64 ) elemental function horner_117 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_117 = horner_116 ( x = x , pre_step = ( pre_step * x + coefficient_117 ) ) end function real ( real64 ) elemental function horner_118 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_118 = horner_117 ( x = x , pre_step = ( pre_step * x + coefficient_118 ) ) end function real ( real64 ) elemental function horner_119 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_119 = horner_118 ( x = x , pre_step = ( pre_step * x + coefficient_119 ) ) end function real ( real64 ) elemental function horner_120 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_120 = horner_119 ( x = x , pre_step = ( pre_step * x + coefficient_120 ) ) end function real ( real64 ) elemental function horner_121 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_121 = horner_120 ( x = x , pre_step = ( pre_step * x + coefficient_121 ) ) end function real ( real64 ) elemental function horner_122 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_122 = horner_121 ( x = x , pre_step = ( pre_step * x + coefficient_122 ) ) end function real ( real64 ) elemental function horner_123 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_123 = horner_122 ( x = x , pre_step = ( pre_step * x + coefficient_123 ) ) end function real ( real64 ) elemental function horner_124 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_124 = horner_123 ( x = x , pre_step = ( pre_step * x + coefficient_124 ) ) end function real ( real64 ) elemental function horner_125 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_125 = horner_124 ( x = x , pre_step = ( pre_step * x + coefficient_125 ) ) end function real ( real64 ) elemental function horner_126 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_126 = horner_125 ( x = x , pre_step = ( pre_step * x + coefficient_126 ) ) end function real ( real64 ) elemental function horner_127 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_127 = horner_126 ( x = x , pre_step = ( pre_step * x + coefficient_127 ) ) end function real ( real64 ) elemental function horner_128 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_128 = horner_127 ( x = x , pre_step = ( pre_step * x + coefficient_128 ) ) end function real ( real64 ) elemental function horner_129 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_129 = horner_128 ( x = x , pre_step = ( pre_step * x + coefficient_129 ) ) end function real ( real64 ) elemental function horner_130 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_130 = horner_129 ( x = x , pre_step = ( pre_step * x + coefficient_130 ) ) end function real ( real64 ) elemental function horner_131 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_131 = horner_130 ( x = x , pre_step = ( pre_step * x + coefficient_131 ) ) end function real ( real64 ) elemental function horner_132 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_132 = horner_131 ( x = x , pre_step = ( pre_step * x + coefficient_132 ) ) end function real ( real64 ) elemental function horner_133 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_133 = horner_132 ( x = x , pre_step = ( pre_step * x + coefficient_133 ) ) end function real ( real64 ) elemental function horner_134 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_134 = horner_133 ( x = x , pre_step = ( pre_step * x + coefficient_134 ) ) end function real ( real64 ) elemental function horner_135 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_135 = horner_134 ( x = x , pre_step = ( pre_step * x + coefficient_135 ) ) end function real ( real64 ) elemental function horner_136 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_136 = horner_135 ( x = x , pre_step = ( pre_step * x + coefficient_136 ) ) end function real ( real64 ) elemental function horner_137 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_137 = horner_136 ( x = x , pre_step = ( pre_step * x + coefficient_137 ) ) end function real ( real64 ) elemental function horner_138 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_138 = horner_137 ( x = x , pre_step = ( pre_step * x + coefficient_138 ) ) end function real ( real64 ) elemental function horner_139 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_139 = horner_138 ( x = x , pre_step = ( pre_step * x + coefficient_139 ) ) end function real ( real64 ) elemental function horner_140 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_140 = horner_139 ( x = x , pre_step = ( pre_step * x + coefficient_140 ) ) end function real ( real64 ) elemental function horner_141 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_141 = horner_140 ( x = x , pre_step = ( pre_step * x + coefficient_141 ) ) end function real ( real64 ) elemental function horner_142 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_142 = horner_141 ( x = x , pre_step = ( pre_step * x + coefficient_142 ) ) end function real ( real64 ) elemental function horner_143 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_143 = horner_142 ( x = x , pre_step = ( pre_step * x + coefficient_143 ) ) end function real ( real64 ) elemental function horner_144 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_144 = horner_143 ( x = x , pre_step = ( pre_step * x + coefficient_144 ) ) end function real ( real64 ) elemental function horner_145 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_145 = horner_144 ( x = x , pre_step = ( pre_step * x + coefficient_145 ) ) end function real ( real64 ) elemental function horner_146 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_146 = horner_145 ( x = x , pre_step = ( pre_step * x + coefficient_146 ) ) end function real ( real64 ) elemental function horner_147 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_147 = horner_146 ( x = x , pre_step = ( pre_step * x + coefficient_147 ) ) end function real ( real64 ) elemental function horner_148 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_148 = horner_147 ( x = x , pre_step = ( pre_step * x + coefficient_148 ) ) end function real ( real64 ) elemental function horner_149 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_149 = horner_148 ( x = x , pre_step = ( pre_step * x + coefficient_149 ) ) end function real ( real64 ) elemental function horner_150 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_150 = horner_149 ( x = x , pre_step = ( pre_step * x + coefficient_150 ) ) end function real ( real64 ) elemental function horner_151 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_151 = horner_150 ( x = x , pre_step = ( pre_step * x + coefficient_151 ) ) end function real ( real64 ) elemental function horner_152 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_152 = horner_151 ( x = x , pre_step = ( pre_step * x + coefficient_152 ) ) end function real ( real64 ) elemental function horner_153 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_153 = horner_152 ( x = x , pre_step = ( pre_step * x + coefficient_153 ) ) end function real ( real64 ) elemental function horner_154 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_154 = horner_153 ( x = x , pre_step = ( pre_step * x + coefficient_154 ) ) end function real ( real64 ) elemental function horner_155 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_155 = horner_154 ( x = x , pre_step = ( pre_step * x + coefficient_155 ) ) end function real ( real64 ) elemental function horner_156 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_156 = horner_155 ( x = x , pre_step = ( pre_step * x + coefficient_156 ) ) end function real ( real64 ) elemental function horner_157 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_157 = horner_156 ( x = x , pre_step = ( pre_step * x + coefficient_157 ) ) end function real ( real64 ) elemental function horner_158 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_158 = horner_157 ( x = x , pre_step = ( pre_step * x + coefficient_158 ) ) end function real ( real64 ) elemental function horner_159 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_159 = horner_158 ( x = x , pre_step = ( pre_step * x + coefficient_159 ) ) end function real ( real64 ) elemental function horner_160 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_160 = horner_159 ( x = x , pre_step = ( pre_step * x + coefficient_160 ) ) end function real ( real64 ) elemental function horner_161 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_161 = horner_160 ( x = x , pre_step = ( pre_step * x + coefficient_161 ) ) end function real ( real64 ) elemental function horner_162 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_162 = horner_161 ( x = x , pre_step = ( pre_step * x + coefficient_162 ) ) end function real ( real64 ) elemental function horner_163 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_163 = horner_162 ( x = x , pre_step = ( pre_step * x + coefficient_163 ) ) end function real ( real64 ) elemental function horner_164 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_164 = horner_163 ( x = x , pre_step = ( pre_step * x + coefficient_164 ) ) end function real ( real64 ) elemental function horner_165 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_165 = horner_164 ( x = x , pre_step = ( pre_step * x + coefficient_165 ) ) end function real ( real64 ) elemental function horner_166 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_166 = horner_165 ( x = x , pre_step = ( pre_step * x + coefficient_166 ) ) end function real ( real64 ) elemental function horner_167 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_167 = horner_166 ( x = x , pre_step = ( pre_step * x + coefficient_167 ) ) end function real ( real64 ) elemental function horner_168 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_168 = horner_167 ( x = x , pre_step = ( pre_step * x + coefficient_168 ) ) end function real ( real64 ) elemental function horner_169 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_169 = horner_168 ( x = x , pre_step = ( pre_step * x + coefficient_169 ) ) end function real ( real64 ) elemental function horner_170 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_170 = horner_169 ( x = x , pre_step = ( pre_step * x + coefficient_170 ) ) end function real ( real64 ) elemental function horner_171 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_171 = horner_170 ( x = x , pre_step = ( pre_step * x + coefficient_171 ) ) end function real ( real64 ) elemental function horner_172 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_172 = horner_171 ( x = x , pre_step = ( pre_step * x + coefficient_172 ) ) end function real ( real64 ) elemental function horner_173 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_173 = horner_172 ( x = x , pre_step = ( pre_step * x + coefficient_173 ) ) end function real ( real64 ) elemental function horner_174 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_174 = horner_173 ( x = x , pre_step = ( pre_step * x + coefficient_174 ) ) end function real ( real64 ) elemental function horner_175 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_175 = horner_174 ( x = x , pre_step = ( pre_step * x + coefficient_175 ) ) end function real ( real64 ) elemental function horner_176 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_176 = horner_175 ( x = x , pre_step = ( pre_step * x + coefficient_176 ) ) end function end submodule imp_taylor_series_sin_real64","tags":"","url":"sourcefile/main_submodule_sin_real64.f90.html"},{"title":"main_submodule_cos_real64.f90 – taylor_series_fortran","text":"Source Code !> Implementation of `taylor_series_cos_***` for `real64`. submodule ( taylor_series_fortran ) imp_taylor_series_cos_real64 use , non_intrinsic :: inv_factorial_real64 , only : & ! inv_factorial_002 , & ! coefficient_004 => inv_factorial_004 , & ! inv_factorial_006 , & ! coefficient_008 => inv_factorial_008 , & ! inv_factorial_010 , & ! coefficient_012 => inv_factorial_012 , & ! inv_factorial_014 , & ! coefficient_016 => inv_factorial_016 , & ! inv_factorial_018 , & ! coefficient_020 => inv_factorial_020 , & ! inv_factorial_022 , & ! coefficient_024 => inv_factorial_024 , & ! inv_factorial_026 , & ! coefficient_028 => inv_factorial_028 , & ! inv_factorial_030 , & ! coefficient_032 => inv_factorial_032 , & ! inv_factorial_034 , & ! coefficient_036 => inv_factorial_036 , & ! inv_factorial_038 , & ! coefficient_040 => inv_factorial_040 , & ! inv_factorial_042 , & ! coefficient_044 => inv_factorial_044 , & ! inv_factorial_046 , & ! coefficient_048 => inv_factorial_048 , & ! inv_factorial_050 , & ! coefficient_052 => inv_factorial_052 , & ! inv_factorial_054 , & ! coefficient_056 => inv_factorial_056 , & ! inv_factorial_058 , & ! coefficient_060 => inv_factorial_060 , & ! inv_factorial_062 , & ! coefficient_064 => inv_factorial_064 , & ! inv_factorial_066 , & ! coefficient_068 => inv_factorial_068 , & ! inv_factorial_070 , & ! coefficient_072 => inv_factorial_072 , & ! inv_factorial_074 , & ! coefficient_076 => inv_factorial_076 , & ! inv_factorial_078 , & ! coefficient_080 => inv_factorial_080 , & ! inv_factorial_082 , & ! coefficient_084 => inv_factorial_084 , & ! inv_factorial_086 , & ! coefficient_088 => inv_factorial_088 , & ! inv_factorial_090 , & ! coefficient_092 => inv_factorial_092 , & ! inv_factorial_094 , & ! coefficient_096 => inv_factorial_096 , & ! inv_factorial_098 , & ! coefficient_100 => inv_factorial_100 , & ! inv_factorial_102 , & ! coefficient_104 => inv_factorial_104 , & ! inv_factorial_106 , & ! coefficient_108 => inv_factorial_108 , & ! inv_factorial_110 , & ! coefficient_112 => inv_factorial_112 , & ! inv_factorial_114 , & ! coefficient_116 => inv_factorial_116 , & ! inv_factorial_118 , & ! coefficient_120 => inv_factorial_120 , & ! inv_factorial_122 , & ! coefficient_124 => inv_factorial_124 , & ! inv_factorial_126 , & ! coefficient_128 => inv_factorial_128 , & ! inv_factorial_130 , & ! coefficient_132 => inv_factorial_132 , & ! inv_factorial_134 , & ! coefficient_136 => inv_factorial_136 , & ! inv_factorial_138 , & ! coefficient_140 => inv_factorial_140 , & ! inv_factorial_142 , & ! coefficient_144 => inv_factorial_144 , & ! inv_factorial_146 , & ! coefficient_148 => inv_factorial_148 , & ! inv_factorial_150 , & ! coefficient_152 => inv_factorial_152 , & ! inv_factorial_154 , & ! coefficient_156 => inv_factorial_156 , & ! inv_factorial_158 , & ! coefficient_160 => inv_factorial_160 , & ! inv_factorial_162 , & ! coefficient_164 => inv_factorial_164 , & ! inv_factorial_166 , & ! coefficient_168 => inv_factorial_168 , & ! inv_factorial_170 , & ! coefficient_172 => inv_factorial_172 , & ! inv_factorial_174 , & ! coefficient_176 => inv_factorial_176 implicit none real ( real64 ), parameter :: coefficient_000 = 1.0_real64 real ( real64 ), parameter :: coefficient_001 = 0.0_real64 real ( real64 ), parameter :: coefficient_002 = - inv_factorial_002 real ( real64 ), parameter :: coefficient_003 = 0.0_real64 real ( real64 ), parameter :: coefficient_005 = 0.0_real64 real ( real64 ), parameter :: coefficient_006 = - inv_factorial_006 real ( real64 ), parameter :: coefficient_007 = 0.0_real64 real ( real64 ), parameter :: coefficient_009 = 0.0_real64 real ( real64 ), parameter :: coefficient_010 = - inv_factorial_010 real ( real64 ), parameter :: coefficient_011 = 0.0_real64 real ( real64 ), parameter :: coefficient_013 = 0.0_real64 real ( real64 ), parameter :: coefficient_014 = - inv_factorial_014 real ( real64 ), parameter :: coefficient_015 = 0.0_real64 real ( real64 ), parameter :: coefficient_017 = 0.0_real64 real ( real64 ), parameter :: coefficient_018 = - inv_factorial_018 real ( real64 ), parameter :: coefficient_019 = 0.0_real64 real ( real64 ), parameter :: coefficient_021 = 0.0_real64 real ( real64 ), parameter :: coefficient_022 = - inv_factorial_022 real ( real64 ), parameter :: coefficient_023 = 0.0_real64 real ( real64 ), parameter :: coefficient_025 = 0.0_real64 real ( real64 ), parameter :: coefficient_026 = - inv_factorial_026 real ( real64 ), parameter :: coefficient_027 = 0.0_real64 real ( real64 ), parameter :: coefficient_029 = 0.0_real64 real ( real64 ), parameter :: coefficient_030 = - inv_factorial_030 real ( real64 ), parameter :: coefficient_031 = 0.0_real64 real ( real64 ), parameter :: coefficient_033 = 0.0_real64 real ( real64 ), parameter :: coefficient_034 = - inv_factorial_034 real ( real64 ), parameter :: coefficient_035 = 0.0_real64 real ( real64 ), parameter :: coefficient_037 = 0.0_real64 real ( real64 ), parameter :: coefficient_038 = - inv_factorial_038 real ( real64 ), parameter :: coefficient_039 = 0.0_real64 real ( real64 ), parameter :: coefficient_041 = 0.0_real64 real ( real64 ), parameter :: coefficient_042 = - inv_factorial_042 real ( real64 ), parameter :: coefficient_043 = 0.0_real64 real ( real64 ), parameter :: coefficient_045 = 0.0_real64 real ( real64 ), parameter :: coefficient_046 = - inv_factorial_046 real ( real64 ), parameter :: coefficient_047 = 0.0_real64 real ( real64 ), parameter :: coefficient_049 = 0.0_real64 real ( real64 ), parameter :: coefficient_050 = - inv_factorial_050 real ( real64 ), parameter :: coefficient_051 = 0.0_real64 real ( real64 ), parameter :: coefficient_053 = 0.0_real64 real ( real64 ), parameter :: coefficient_054 = - inv_factorial_054 real ( real64 ), parameter :: coefficient_055 = 0.0_real64 real ( real64 ), parameter :: coefficient_057 = 0.0_real64 real ( real64 ), parameter :: coefficient_058 = - inv_factorial_058 real ( real64 ), parameter :: coefficient_059 = 0.0_real64 real ( real64 ), parameter :: coefficient_061 = 0.0_real64 real ( real64 ), parameter :: coefficient_062 = - inv_factorial_062 real ( real64 ), parameter :: coefficient_063 = 0.0_real64 real ( real64 ), parameter :: coefficient_065 = 0.0_real64 real ( real64 ), parameter :: coefficient_066 = - inv_factorial_066 real ( real64 ), parameter :: coefficient_067 = 0.0_real64 real ( real64 ), parameter :: coefficient_069 = 0.0_real64 real ( real64 ), parameter :: coefficient_070 = - inv_factorial_070 real ( real64 ), parameter :: coefficient_071 = 0.0_real64 real ( real64 ), parameter :: coefficient_073 = 0.0_real64 real ( real64 ), parameter :: coefficient_074 = - inv_factorial_074 real ( real64 ), parameter :: coefficient_075 = 0.0_real64 real ( real64 ), parameter :: coefficient_077 = 0.0_real64 real ( real64 ), parameter :: coefficient_078 = - inv_factorial_078 real ( real64 ), parameter :: coefficient_079 = 0.0_real64 real ( real64 ), parameter :: coefficient_081 = 0.0_real64 real ( real64 ), parameter :: coefficient_082 = - inv_factorial_082 real ( real64 ), parameter :: coefficient_083 = 0.0_real64 real ( real64 ), parameter :: coefficient_085 = 0.0_real64 real ( real64 ), parameter :: coefficient_086 = - inv_factorial_086 real ( real64 ), parameter :: coefficient_087 = 0.0_real64 real ( real64 ), parameter :: coefficient_089 = 0.0_real64 real ( real64 ), parameter :: coefficient_090 = - inv_factorial_090 real ( real64 ), parameter :: coefficient_091 = 0.0_real64 real ( real64 ), parameter :: coefficient_093 = 0.0_real64 real ( real64 ), parameter :: coefficient_094 = - inv_factorial_094 real ( real64 ), parameter :: coefficient_095 = 0.0_real64 real ( real64 ), parameter :: coefficient_097 = 0.0_real64 real ( real64 ), parameter :: coefficient_098 = - inv_factorial_098 real ( real64 ), parameter :: coefficient_099 = 0.0_real64 real ( real64 ), parameter :: coefficient_101 = 0.0_real64 real ( real64 ), parameter :: coefficient_102 = - inv_factorial_102 real ( real64 ), parameter :: coefficient_103 = 0.0_real64 real ( real64 ), parameter :: coefficient_105 = 0.0_real64 real ( real64 ), parameter :: coefficient_106 = - inv_factorial_106 real ( real64 ), parameter :: coefficient_107 = 0.0_real64 real ( real64 ), parameter :: coefficient_109 = 0.0_real64 real ( real64 ), parameter :: coefficient_110 = - inv_factorial_110 real ( real64 ), parameter :: coefficient_111 = 0.0_real64 real ( real64 ), parameter :: coefficient_113 = 0.0_real64 real ( real64 ), parameter :: coefficient_114 = - inv_factorial_114 real ( real64 ), parameter :: coefficient_115 = 0.0_real64 real ( real64 ), parameter :: coefficient_117 = 0.0_real64 real ( real64 ), parameter :: coefficient_118 = - inv_factorial_118 real ( real64 ), parameter :: coefficient_119 = 0.0_real64 real ( real64 ), parameter :: coefficient_121 = 0.0_real64 real ( real64 ), parameter :: coefficient_122 = - inv_factorial_122 real ( real64 ), parameter :: coefficient_123 = 0.0_real64 real ( real64 ), parameter :: coefficient_125 = 0.0_real64 real ( real64 ), parameter :: coefficient_126 = - inv_factorial_126 real ( real64 ), parameter :: coefficient_127 = 0.0_real64 real ( real64 ), parameter :: coefficient_129 = 0.0_real64 real ( real64 ), parameter :: coefficient_130 = - inv_factorial_130 real ( real64 ), parameter :: coefficient_131 = 0.0_real64 real ( real64 ), parameter :: coefficient_133 = 0.0_real64 real ( real64 ), parameter :: coefficient_134 = - inv_factorial_134 real ( real64 ), parameter :: coefficient_135 = 0.0_real64 real ( real64 ), parameter :: coefficient_137 = 0.0_real64 real ( real64 ), parameter :: coefficient_138 = - inv_factorial_138 real ( real64 ), parameter :: coefficient_139 = 0.0_real64 real ( real64 ), parameter :: coefficient_141 = 0.0_real64 real ( real64 ), parameter :: coefficient_142 = - inv_factorial_142 real ( real64 ), parameter :: coefficient_143 = 0.0_real64 real ( real64 ), parameter :: coefficient_145 = 0.0_real64 real ( real64 ), parameter :: coefficient_146 = - inv_factorial_146 real ( real64 ), parameter :: coefficient_147 = 0.0_real64 real ( real64 ), parameter :: coefficient_149 = 0.0_real64 real ( real64 ), parameter :: coefficient_150 = - inv_factorial_150 real ( real64 ), parameter :: coefficient_151 = 0.0_real64 real ( real64 ), parameter :: coefficient_153 = 0.0_real64 real ( real64 ), parameter :: coefficient_154 = - inv_factorial_154 real ( real64 ), parameter :: coefficient_155 = 0.0_real64 real ( real64 ), parameter :: coefficient_157 = 0.0_real64 real ( real64 ), parameter :: coefficient_158 = - inv_factorial_158 real ( real64 ), parameter :: coefficient_159 = 0.0_real64 real ( real64 ), parameter :: coefficient_161 = 0.0_real64 real ( real64 ), parameter :: coefficient_162 = - inv_factorial_162 real ( real64 ), parameter :: coefficient_163 = 0.0_real64 real ( real64 ), parameter :: coefficient_165 = 0.0_real64 real ( real64 ), parameter :: coefficient_166 = - inv_factorial_166 real ( real64 ), parameter :: coefficient_167 = 0.0_real64 real ( real64 ), parameter :: coefficient_169 = 0.0_real64 real ( real64 ), parameter :: coefficient_170 = - inv_factorial_170 real ( real64 ), parameter :: coefficient_171 = 0.0_real64 real ( real64 ), parameter :: coefficient_173 = 0.0_real64 real ( real64 ), parameter :: coefficient_174 = - inv_factorial_174 real ( real64 ), parameter :: coefficient_175 = 0.0_real64 contains module procedure taylor_series_cos_000_real64 res = horner_000 ( x = x , pre_step = 0.0_real64 ) end procedure taylor_series_cos_000_real64 module procedure taylor_series_cos_001_real64 res = taylor_series_cos_000_real64 ( x ) end procedure taylor_series_cos_001_real64 module procedure taylor_series_cos_002_real64 res = horner_001 ( x = x , pre_step = coefficient_002 ) end procedure taylor_series_cos_002_real64 module procedure taylor_series_cos_003_real64 res = taylor_series_cos_002_real64 ( x ) end procedure taylor_series_cos_003_real64 module procedure taylor_series_cos_004_real64 res = horner_003 ( x = x , pre_step = coefficient_004 ) end procedure taylor_series_cos_004_real64 module procedure taylor_series_cos_005_real64 res = taylor_series_cos_004_real64 ( x ) end procedure taylor_series_cos_005_real64 module procedure taylor_series_cos_006_real64 res = horner_005 ( x = x , pre_step = coefficient_006 ) end procedure taylor_series_cos_006_real64 module procedure taylor_series_cos_007_real64 res = taylor_series_cos_006_real64 ( x ) end procedure taylor_series_cos_007_real64 module procedure taylor_series_cos_008_real64 res = horner_007 ( x = x , pre_step = coefficient_008 ) end procedure taylor_series_cos_008_real64 module procedure taylor_series_cos_009_real64 res = taylor_series_cos_008_real64 ( x ) end procedure taylor_series_cos_009_real64 module procedure taylor_series_cos_010_real64 res = horner_009 ( x = x , pre_step = coefficient_010 ) end procedure taylor_series_cos_010_real64 module procedure taylor_series_cos_011_real64 res = taylor_series_cos_010_real64 ( x ) end procedure taylor_series_cos_011_real64 module procedure taylor_series_cos_012_real64 res = horner_011 ( x = x , pre_step = coefficient_012 ) end procedure taylor_series_cos_012_real64 module procedure taylor_series_cos_013_real64 res = taylor_series_cos_012_real64 ( x ) end procedure taylor_series_cos_013_real64 module procedure taylor_series_cos_014_real64 res = horner_013 ( x = x , pre_step = coefficient_014 ) end procedure taylor_series_cos_014_real64 module procedure taylor_series_cos_015_real64 res = taylor_series_cos_014_real64 ( x ) end procedure taylor_series_cos_015_real64 module procedure taylor_series_cos_016_real64 res = horner_015 ( x = x , pre_step = coefficient_016 ) end procedure taylor_series_cos_016_real64 module procedure taylor_series_cos_017_real64 res = taylor_series_cos_016_real64 ( x ) end procedure taylor_series_cos_017_real64 module procedure taylor_series_cos_018_real64 res = horner_017 ( x = x , pre_step = coefficient_018 ) end procedure taylor_series_cos_018_real64 module procedure taylor_series_cos_019_real64 res = taylor_series_cos_018_real64 ( x ) end procedure taylor_series_cos_019_real64 module procedure taylor_series_cos_020_real64 res = horner_019 ( x = x , pre_step = coefficient_020 ) end procedure taylor_series_cos_020_real64 module procedure taylor_series_cos_021_real64 res = taylor_series_cos_020_real64 ( x ) end procedure taylor_series_cos_021_real64 module procedure taylor_series_cos_022_real64 res = horner_021 ( x = x , pre_step = coefficient_022 ) end procedure taylor_series_cos_022_real64 module procedure taylor_series_cos_023_real64 res = taylor_series_cos_022_real64 ( x ) end procedure taylor_series_cos_023_real64 module procedure taylor_series_cos_024_real64 res = horner_023 ( x = x , pre_step = coefficient_024 ) end procedure taylor_series_cos_024_real64 module procedure taylor_series_cos_025_real64 res = taylor_series_cos_024_real64 ( x ) end procedure taylor_series_cos_025_real64 module procedure taylor_series_cos_026_real64 res = horner_025 ( x = x , pre_step = coefficient_026 ) end procedure taylor_series_cos_026_real64 module procedure taylor_series_cos_027_real64 res = taylor_series_cos_026_real64 ( x ) end procedure taylor_series_cos_027_real64 module procedure taylor_series_cos_028_real64 res = horner_027 ( x = x , pre_step = coefficient_028 ) end procedure taylor_series_cos_028_real64 module procedure taylor_series_cos_029_real64 res = taylor_series_cos_028_real64 ( x ) end procedure taylor_series_cos_029_real64 module procedure taylor_series_cos_030_real64 res = horner_029 ( x = x , pre_step = coefficient_030 ) end procedure taylor_series_cos_030_real64 module procedure taylor_series_cos_031_real64 res = taylor_series_cos_030_real64 ( x ) end procedure taylor_series_cos_031_real64 module procedure taylor_series_cos_032_real64 res = horner_031 ( x = x , pre_step = coefficient_032 ) end procedure taylor_series_cos_032_real64 module procedure taylor_series_cos_033_real64 res = taylor_series_cos_032_real64 ( x ) end procedure taylor_series_cos_033_real64 module procedure taylor_series_cos_034_real64 res = horner_033 ( x = x , pre_step = coefficient_034 ) end procedure taylor_series_cos_034_real64 module procedure taylor_series_cos_035_real64 res = taylor_series_cos_034_real64 ( x ) end procedure taylor_series_cos_035_real64 module procedure taylor_series_cos_036_real64 res = horner_035 ( x = x , pre_step = coefficient_036 ) end procedure taylor_series_cos_036_real64 module procedure taylor_series_cos_037_real64 res = taylor_series_cos_036_real64 ( x ) end procedure taylor_series_cos_037_real64 module procedure taylor_series_cos_038_real64 res = horner_037 ( x = x , pre_step = coefficient_038 ) end procedure taylor_series_cos_038_real64 module procedure taylor_series_cos_039_real64 res = taylor_series_cos_038_real64 ( x ) end procedure taylor_series_cos_039_real64 module procedure taylor_series_cos_040_real64 res = horner_039 ( x = x , pre_step = coefficient_040 ) end procedure taylor_series_cos_040_real64 module procedure taylor_series_cos_041_real64 res = taylor_series_cos_040_real64 ( x ) end procedure taylor_series_cos_041_real64 module procedure taylor_series_cos_042_real64 res = horner_041 ( x = x , pre_step = coefficient_042 ) end procedure taylor_series_cos_042_real64 module procedure taylor_series_cos_043_real64 res = taylor_series_cos_042_real64 ( x ) end procedure taylor_series_cos_043_real64 module procedure taylor_series_cos_044_real64 res = horner_043 ( x = x , pre_step = coefficient_044 ) end procedure taylor_series_cos_044_real64 module procedure taylor_series_cos_045_real64 res = taylor_series_cos_044_real64 ( x ) end procedure taylor_series_cos_045_real64 module procedure taylor_series_cos_046_real64 res = horner_045 ( x = x , pre_step = coefficient_046 ) end procedure taylor_series_cos_046_real64 module procedure taylor_series_cos_047_real64 res = taylor_series_cos_046_real64 ( x ) end procedure taylor_series_cos_047_real64 module procedure taylor_series_cos_048_real64 res = horner_047 ( x = x , pre_step = coefficient_048 ) end procedure taylor_series_cos_048_real64 module procedure taylor_series_cos_049_real64 res = taylor_series_cos_048_real64 ( x ) end procedure taylor_series_cos_049_real64 module procedure taylor_series_cos_050_real64 res = horner_049 ( x = x , pre_step = coefficient_050 ) end procedure taylor_series_cos_050_real64 module procedure taylor_series_cos_051_real64 res = taylor_series_cos_050_real64 ( x ) end procedure taylor_series_cos_051_real64 module procedure taylor_series_cos_052_real64 res = horner_051 ( x = x , pre_step = coefficient_052 ) end procedure taylor_series_cos_052_real64 module procedure taylor_series_cos_053_real64 res = taylor_series_cos_052_real64 ( x ) end procedure taylor_series_cos_053_real64 module procedure taylor_series_cos_054_real64 res = horner_053 ( x = x , pre_step = coefficient_054 ) end procedure taylor_series_cos_054_real64 module procedure taylor_series_cos_055_real64 res = taylor_series_cos_054_real64 ( x ) end procedure taylor_series_cos_055_real64 module procedure taylor_series_cos_056_real64 res = horner_055 ( x = x , pre_step = coefficient_056 ) end procedure taylor_series_cos_056_real64 module procedure taylor_series_cos_057_real64 res = taylor_series_cos_056_real64 ( x ) end procedure taylor_series_cos_057_real64 module procedure taylor_series_cos_058_real64 res = horner_057 ( x = x , pre_step = coefficient_058 ) end procedure taylor_series_cos_058_real64 module procedure taylor_series_cos_059_real64 res = taylor_series_cos_058_real64 ( x ) end procedure taylor_series_cos_059_real64 module procedure taylor_series_cos_060_real64 res = horner_059 ( x = x , pre_step = coefficient_060 ) end procedure taylor_series_cos_060_real64 module procedure taylor_series_cos_061_real64 res = taylor_series_cos_060_real64 ( x ) end procedure taylor_series_cos_061_real64 module procedure taylor_series_cos_062_real64 res = horner_061 ( x = x , pre_step = coefficient_062 ) end procedure taylor_series_cos_062_real64 module procedure taylor_series_cos_063_real64 res = taylor_series_cos_062_real64 ( x ) end procedure taylor_series_cos_063_real64 module procedure taylor_series_cos_064_real64 res = horner_063 ( x = x , pre_step = coefficient_064 ) end procedure taylor_series_cos_064_real64 module procedure taylor_series_cos_065_real64 res = taylor_series_cos_064_real64 ( x ) end procedure taylor_series_cos_065_real64 module procedure taylor_series_cos_066_real64 res = horner_065 ( x = x , pre_step = coefficient_066 ) end procedure taylor_series_cos_066_real64 module procedure taylor_series_cos_067_real64 res = taylor_series_cos_066_real64 ( x ) end procedure taylor_series_cos_067_real64 module procedure taylor_series_cos_068_real64 res = horner_067 ( x = x , pre_step = coefficient_068 ) end procedure taylor_series_cos_068_real64 module procedure taylor_series_cos_069_real64 res = taylor_series_cos_068_real64 ( x ) end procedure taylor_series_cos_069_real64 module procedure taylor_series_cos_070_real64 res = horner_069 ( x = x , pre_step = coefficient_070 ) end procedure taylor_series_cos_070_real64 module procedure taylor_series_cos_071_real64 res = taylor_series_cos_070_real64 ( x ) end procedure taylor_series_cos_071_real64 module procedure taylor_series_cos_072_real64 res = horner_071 ( x = x , pre_step = coefficient_072 ) end procedure taylor_series_cos_072_real64 module procedure taylor_series_cos_073_real64 res = taylor_series_cos_072_real64 ( x ) end procedure taylor_series_cos_073_real64 module procedure taylor_series_cos_074_real64 res = horner_073 ( x = x , pre_step = coefficient_074 ) end procedure taylor_series_cos_074_real64 module procedure taylor_series_cos_075_real64 res = taylor_series_cos_074_real64 ( x ) end procedure taylor_series_cos_075_real64 module procedure taylor_series_cos_076_real64 res = horner_075 ( x = x , pre_step = coefficient_076 ) end procedure taylor_series_cos_076_real64 module procedure taylor_series_cos_077_real64 res = taylor_series_cos_076_real64 ( x ) end procedure taylor_series_cos_077_real64 module procedure taylor_series_cos_078_real64 res = horner_077 ( x = x , pre_step = coefficient_078 ) end procedure taylor_series_cos_078_real64 module procedure taylor_series_cos_079_real64 res = taylor_series_cos_078_real64 ( x ) end procedure taylor_series_cos_079_real64 module procedure taylor_series_cos_080_real64 res = horner_079 ( x = x , pre_step = coefficient_080 ) end procedure taylor_series_cos_080_real64 module procedure taylor_series_cos_081_real64 res = taylor_series_cos_080_real64 ( x ) end procedure taylor_series_cos_081_real64 module procedure taylor_series_cos_082_real64 res = horner_081 ( x = x , pre_step = coefficient_082 ) end procedure taylor_series_cos_082_real64 module procedure taylor_series_cos_083_real64 res = taylor_series_cos_082_real64 ( x ) end procedure taylor_series_cos_083_real64 module procedure taylor_series_cos_084_real64 res = horner_083 ( x = x , pre_step = coefficient_084 ) end procedure taylor_series_cos_084_real64 module procedure taylor_series_cos_085_real64 res = taylor_series_cos_084_real64 ( x ) end procedure taylor_series_cos_085_real64 module procedure taylor_series_cos_086_real64 res = horner_085 ( x = x , pre_step = coefficient_086 ) end procedure taylor_series_cos_086_real64 module procedure taylor_series_cos_087_real64 res = taylor_series_cos_086_real64 ( x ) end procedure taylor_series_cos_087_real64 module procedure taylor_series_cos_088_real64 res = horner_087 ( x = x , pre_step = coefficient_088 ) end procedure taylor_series_cos_088_real64 module procedure taylor_series_cos_089_real64 res = taylor_series_cos_088_real64 ( x ) end procedure taylor_series_cos_089_real64 module procedure taylor_series_cos_090_real64 res = horner_089 ( x = x , pre_step = coefficient_090 ) end procedure taylor_series_cos_090_real64 module procedure taylor_series_cos_091_real64 res = taylor_series_cos_090_real64 ( x ) end procedure taylor_series_cos_091_real64 module procedure taylor_series_cos_092_real64 res = horner_091 ( x = x , pre_step = coefficient_092 ) end procedure taylor_series_cos_092_real64 module procedure taylor_series_cos_093_real64 res = taylor_series_cos_092_real64 ( x ) end procedure taylor_series_cos_093_real64 module procedure taylor_series_cos_094_real64 res = horner_093 ( x = x , pre_step = coefficient_094 ) end procedure taylor_series_cos_094_real64 module procedure taylor_series_cos_095_real64 res = taylor_series_cos_094_real64 ( x ) end procedure taylor_series_cos_095_real64 module procedure taylor_series_cos_096_real64 res = horner_095 ( x = x , pre_step = coefficient_096 ) end procedure taylor_series_cos_096_real64 module procedure taylor_series_cos_097_real64 res = taylor_series_cos_096_real64 ( x ) end procedure taylor_series_cos_097_real64 module procedure taylor_series_cos_098_real64 res = horner_097 ( x = x , pre_step = coefficient_098 ) end procedure taylor_series_cos_098_real64 module procedure taylor_series_cos_099_real64 res = taylor_series_cos_098_real64 ( x ) end procedure taylor_series_cos_099_real64 module procedure taylor_series_cos_100_real64 res = horner_099 ( x = x , pre_step = coefficient_100 ) end procedure taylor_series_cos_100_real64 module procedure taylor_series_cos_101_real64 res = taylor_series_cos_100_real64 ( x ) end procedure taylor_series_cos_101_real64 module procedure taylor_series_cos_102_real64 res = horner_101 ( x = x , pre_step = coefficient_102 ) end procedure taylor_series_cos_102_real64 module procedure taylor_series_cos_103_real64 res = taylor_series_cos_102_real64 ( x ) end procedure taylor_series_cos_103_real64 module procedure taylor_series_cos_104_real64 res = horner_103 ( x = x , pre_step = coefficient_104 ) end procedure taylor_series_cos_104_real64 module procedure taylor_series_cos_105_real64 res = taylor_series_cos_104_real64 ( x ) end procedure taylor_series_cos_105_real64 module procedure taylor_series_cos_106_real64 res = horner_105 ( x = x , pre_step = coefficient_106 ) end procedure taylor_series_cos_106_real64 module procedure taylor_series_cos_107_real64 res = taylor_series_cos_106_real64 ( x ) end procedure taylor_series_cos_107_real64 module procedure taylor_series_cos_108_real64 res = horner_107 ( x = x , pre_step = coefficient_108 ) end procedure taylor_series_cos_108_real64 module procedure taylor_series_cos_109_real64 res = taylor_series_cos_108_real64 ( x ) end procedure taylor_series_cos_109_real64 module procedure taylor_series_cos_110_real64 res = horner_109 ( x = x , pre_step = coefficient_110 ) end procedure taylor_series_cos_110_real64 module procedure taylor_series_cos_111_real64 res = taylor_series_cos_110_real64 ( x ) end procedure taylor_series_cos_111_real64 module procedure taylor_series_cos_112_real64 res = horner_111 ( x = x , pre_step = coefficient_112 ) end procedure taylor_series_cos_112_real64 module procedure taylor_series_cos_113_real64 res = taylor_series_cos_112_real64 ( x ) end procedure taylor_series_cos_113_real64 module procedure taylor_series_cos_114_real64 res = horner_113 ( x = x , pre_step = coefficient_114 ) end procedure taylor_series_cos_114_real64 module procedure taylor_series_cos_115_real64 res = taylor_series_cos_114_real64 ( x ) end procedure taylor_series_cos_115_real64 module procedure taylor_series_cos_116_real64 res = horner_115 ( x = x , pre_step = coefficient_116 ) end procedure taylor_series_cos_116_real64 module procedure taylor_series_cos_117_real64 res = taylor_series_cos_116_real64 ( x ) end procedure taylor_series_cos_117_real64 module procedure taylor_series_cos_118_real64 res = horner_117 ( x = x , pre_step = coefficient_118 ) end procedure taylor_series_cos_118_real64 module procedure taylor_series_cos_119_real64 res = taylor_series_cos_118_real64 ( x ) end procedure taylor_series_cos_119_real64 module procedure taylor_series_cos_120_real64 res = horner_119 ( x = x , pre_step = coefficient_120 ) end procedure taylor_series_cos_120_real64 module procedure taylor_series_cos_121_real64 res = taylor_series_cos_120_real64 ( x ) end procedure taylor_series_cos_121_real64 module procedure taylor_series_cos_122_real64 res = horner_121 ( x = x , pre_step = coefficient_122 ) end procedure taylor_series_cos_122_real64 module procedure taylor_series_cos_123_real64 res = taylor_series_cos_122_real64 ( x ) end procedure taylor_series_cos_123_real64 module procedure taylor_series_cos_124_real64 res = horner_123 ( x = x , pre_step = coefficient_124 ) end procedure taylor_series_cos_124_real64 module procedure taylor_series_cos_125_real64 res = taylor_series_cos_124_real64 ( x ) end procedure taylor_series_cos_125_real64 module procedure taylor_series_cos_126_real64 res = horner_125 ( x = x , pre_step = coefficient_126 ) end procedure taylor_series_cos_126_real64 module procedure taylor_series_cos_127_real64 res = taylor_series_cos_126_real64 ( x ) end procedure taylor_series_cos_127_real64 module procedure taylor_series_cos_128_real64 res = horner_127 ( x = x , pre_step = coefficient_128 ) end procedure taylor_series_cos_128_real64 module procedure taylor_series_cos_129_real64 res = taylor_series_cos_128_real64 ( x ) end procedure taylor_series_cos_129_real64 module procedure taylor_series_cos_130_real64 res = horner_129 ( x = x , pre_step = coefficient_130 ) end procedure taylor_series_cos_130_real64 module procedure taylor_series_cos_131_real64 res = taylor_series_cos_130_real64 ( x ) end procedure taylor_series_cos_131_real64 module procedure taylor_series_cos_132_real64 res = horner_131 ( x = x , pre_step = coefficient_132 ) end procedure taylor_series_cos_132_real64 module procedure taylor_series_cos_133_real64 res = taylor_series_cos_132_real64 ( x ) end procedure taylor_series_cos_133_real64 module procedure taylor_series_cos_134_real64 res = horner_133 ( x = x , pre_step = coefficient_134 ) end procedure taylor_series_cos_134_real64 module procedure taylor_series_cos_135_real64 res = taylor_series_cos_134_real64 ( x ) end procedure taylor_series_cos_135_real64 module procedure taylor_series_cos_136_real64 res = horner_135 ( x = x , pre_step = coefficient_136 ) end procedure taylor_series_cos_136_real64 module procedure taylor_series_cos_137_real64 res = taylor_series_cos_136_real64 ( x ) end procedure taylor_series_cos_137_real64 module procedure taylor_series_cos_138_real64 res = horner_137 ( x = x , pre_step = coefficient_138 ) end procedure taylor_series_cos_138_real64 module procedure taylor_series_cos_139_real64 res = taylor_series_cos_138_real64 ( x ) end procedure taylor_series_cos_139_real64 module procedure taylor_series_cos_140_real64 res = horner_139 ( x = x , pre_step = coefficient_140 ) end procedure taylor_series_cos_140_real64 module procedure taylor_series_cos_141_real64 res = taylor_series_cos_140_real64 ( x ) end procedure taylor_series_cos_141_real64 module procedure taylor_series_cos_142_real64 res = horner_141 ( x = x , pre_step = coefficient_142 ) end procedure taylor_series_cos_142_real64 module procedure taylor_series_cos_143_real64 res = taylor_series_cos_142_real64 ( x ) end procedure taylor_series_cos_143_real64 module procedure taylor_series_cos_144_real64 res = horner_143 ( x = x , pre_step = coefficient_144 ) end procedure taylor_series_cos_144_real64 module procedure taylor_series_cos_145_real64 res = taylor_series_cos_144_real64 ( x ) end procedure taylor_series_cos_145_real64 module procedure taylor_series_cos_146_real64 res = horner_145 ( x = x , pre_step = coefficient_146 ) end procedure taylor_series_cos_146_real64 module procedure taylor_series_cos_147_real64 res = taylor_series_cos_146_real64 ( x ) end procedure taylor_series_cos_147_real64 module procedure taylor_series_cos_148_real64 res = horner_147 ( x = x , pre_step = coefficient_148 ) end procedure taylor_series_cos_148_real64 module procedure taylor_series_cos_149_real64 res = taylor_series_cos_148_real64 ( x ) end procedure taylor_series_cos_149_real64 module procedure taylor_series_cos_150_real64 res = horner_149 ( x = x , pre_step = coefficient_150 ) end procedure taylor_series_cos_150_real64 module procedure taylor_series_cos_151_real64 res = taylor_series_cos_150_real64 ( x ) end procedure taylor_series_cos_151_real64 module procedure taylor_series_cos_152_real64 res = horner_151 ( x = x , pre_step = coefficient_152 ) end procedure taylor_series_cos_152_real64 module procedure taylor_series_cos_153_real64 res = taylor_series_cos_152_real64 ( x ) end procedure taylor_series_cos_153_real64 module procedure taylor_series_cos_154_real64 res = horner_153 ( x = x , pre_step = coefficient_154 ) end procedure taylor_series_cos_154_real64 module procedure taylor_series_cos_155_real64 res = taylor_series_cos_154_real64 ( x ) end procedure taylor_series_cos_155_real64 module procedure taylor_series_cos_156_real64 res = horner_155 ( x = x , pre_step = coefficient_156 ) end procedure taylor_series_cos_156_real64 module procedure taylor_series_cos_157_real64 res = taylor_series_cos_156_real64 ( x ) end procedure taylor_series_cos_157_real64 module procedure taylor_series_cos_158_real64 res = horner_157 ( x = x , pre_step = coefficient_158 ) end procedure taylor_series_cos_158_real64 module procedure taylor_series_cos_159_real64 res = taylor_series_cos_158_real64 ( x ) end procedure taylor_series_cos_159_real64 module procedure taylor_series_cos_160_real64 res = horner_159 ( x = x , pre_step = coefficient_160 ) end procedure taylor_series_cos_160_real64 module procedure taylor_series_cos_161_real64 res = taylor_series_cos_160_real64 ( x ) end procedure taylor_series_cos_161_real64 module procedure taylor_series_cos_162_real64 res = horner_161 ( x = x , pre_step = coefficient_162 ) end procedure taylor_series_cos_162_real64 module procedure taylor_series_cos_163_real64 res = taylor_series_cos_162_real64 ( x ) end procedure taylor_series_cos_163_real64 module procedure taylor_series_cos_164_real64 res = horner_163 ( x = x , pre_step = coefficient_164 ) end procedure taylor_series_cos_164_real64 module procedure taylor_series_cos_165_real64 res = taylor_series_cos_164_real64 ( x ) end procedure taylor_series_cos_165_real64 module procedure taylor_series_cos_166_real64 res = horner_165 ( x = x , pre_step = coefficient_166 ) end procedure taylor_series_cos_166_real64 module procedure taylor_series_cos_167_real64 res = taylor_series_cos_166_real64 ( x ) end procedure taylor_series_cos_167_real64 module procedure taylor_series_cos_168_real64 res = horner_167 ( x = x , pre_step = coefficient_168 ) end procedure taylor_series_cos_168_real64 module procedure taylor_series_cos_169_real64 res = taylor_series_cos_168_real64 ( x ) end procedure taylor_series_cos_169_real64 module procedure taylor_series_cos_170_real64 res = horner_169 ( x = x , pre_step = coefficient_170 ) end procedure taylor_series_cos_170_real64 module procedure taylor_series_cos_171_real64 res = taylor_series_cos_170_real64 ( x ) end procedure taylor_series_cos_171_real64 module procedure taylor_series_cos_172_real64 res = horner_171 ( x = x , pre_step = coefficient_172 ) end procedure taylor_series_cos_172_real64 module procedure taylor_series_cos_173_real64 res = taylor_series_cos_172_real64 ( x ) end procedure taylor_series_cos_173_real64 module procedure taylor_series_cos_174_real64 res = horner_173 ( x = x , pre_step = coefficient_174 ) end procedure taylor_series_cos_174_real64 module procedure taylor_series_cos_175_real64 res = taylor_series_cos_174_real64 ( x ) end procedure taylor_series_cos_175_real64 module procedure taylor_series_cos_176_real64 res = horner_175 ( x = x , pre_step = coefficient_176 ) end procedure taylor_series_cos_176_real64 real ( real64 ) elemental function horner_000 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_000 = pre_step * x + coefficient_000 end function real ( real64 ) elemental function horner_001 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_001 = horner_000 ( x = x , pre_step = ( pre_step * x + coefficient_001 ) ) end function real ( real64 ) elemental function horner_002 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_002 = horner_001 ( x = x , pre_step = ( pre_step * x + coefficient_002 ) ) end function real ( real64 ) elemental function horner_003 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_003 = horner_002 ( x = x , pre_step = ( pre_step * x + coefficient_003 ) ) end function real ( real64 ) elemental function horner_004 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_004 = horner_003 ( x = x , pre_step = ( pre_step * x + coefficient_004 ) ) end function real ( real64 ) elemental function horner_005 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_005 = horner_004 ( x = x , pre_step = ( pre_step * x + coefficient_005 ) ) end function real ( real64 ) elemental function horner_006 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_006 = horner_005 ( x = x , pre_step = ( pre_step * x + coefficient_006 ) ) end function real ( real64 ) elemental function horner_007 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_007 = horner_006 ( x = x , pre_step = ( pre_step * x + coefficient_007 ) ) end function real ( real64 ) elemental function horner_008 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_008 = horner_007 ( x = x , pre_step = ( pre_step * x + coefficient_008 ) ) end function real ( real64 ) elemental function horner_009 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_009 = horner_008 ( x = x , pre_step = ( pre_step * x + coefficient_009 ) ) end function real ( real64 ) elemental function horner_010 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_010 = horner_009 ( x = x , pre_step = ( pre_step * x + coefficient_010 ) ) end function real ( real64 ) elemental function horner_011 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_011 = horner_010 ( x = x , pre_step = ( pre_step * x + coefficient_011 ) ) end function real ( real64 ) elemental function horner_012 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_012 = horner_011 ( x = x , pre_step = ( pre_step * x + coefficient_012 ) ) end function real ( real64 ) elemental function horner_013 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_013 = horner_012 ( x = x , pre_step = ( pre_step * x + coefficient_013 ) ) end function real ( real64 ) elemental function horner_014 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_014 = horner_013 ( x = x , pre_step = ( pre_step * x + coefficient_014 ) ) end function real ( real64 ) elemental function horner_015 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_015 = horner_014 ( x = x , pre_step = ( pre_step * x + coefficient_015 ) ) end function real ( real64 ) elemental function horner_016 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_016 = horner_015 ( x = x , pre_step = ( pre_step * x + coefficient_016 ) ) end function real ( real64 ) elemental function horner_017 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_017 = horner_016 ( x = x , pre_step = ( pre_step * x + coefficient_017 ) ) end function real ( real64 ) elemental function horner_018 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_018 = horner_017 ( x = x , pre_step = ( pre_step * x + coefficient_018 ) ) end function real ( real64 ) elemental function horner_019 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_019 = horner_018 ( x = x , pre_step = ( pre_step * x + coefficient_019 ) ) end function real ( real64 ) elemental function horner_020 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_020 = horner_019 ( x = x , pre_step = ( pre_step * x + coefficient_020 ) ) end function real ( real64 ) elemental function horner_021 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_021 = horner_020 ( x = x , pre_step = ( pre_step * x + coefficient_021 ) ) end function real ( real64 ) elemental function horner_022 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_022 = horner_021 ( x = x , pre_step = ( pre_step * x + coefficient_022 ) ) end function real ( real64 ) elemental function horner_023 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_023 = horner_022 ( x = x , pre_step = ( pre_step * x + coefficient_023 ) ) end function real ( real64 ) elemental function horner_024 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_024 = horner_023 ( x = x , pre_step = ( pre_step * x + coefficient_024 ) ) end function real ( real64 ) elemental function horner_025 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_025 = horner_024 ( x = x , pre_step = ( pre_step * x + coefficient_025 ) ) end function real ( real64 ) elemental function horner_026 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_026 = horner_025 ( x = x , pre_step = ( pre_step * x + coefficient_026 ) ) end function real ( real64 ) elemental function horner_027 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_027 = horner_026 ( x = x , pre_step = ( pre_step * x + coefficient_027 ) ) end function real ( real64 ) elemental function horner_028 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_028 = horner_027 ( x = x , pre_step = ( pre_step * x + coefficient_028 ) ) end function real ( real64 ) elemental function horner_029 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_029 = horner_028 ( x = x , pre_step = ( pre_step * x + coefficient_029 ) ) end function real ( real64 ) elemental function horner_030 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_030 = horner_029 ( x = x , pre_step = ( pre_step * x + coefficient_030 ) ) end function real ( real64 ) elemental function horner_031 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_031 = horner_030 ( x = x , pre_step = ( pre_step * x + coefficient_031 ) ) end function real ( real64 ) elemental function horner_032 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_032 = horner_031 ( x = x , pre_step = ( pre_step * x + coefficient_032 ) ) end function real ( real64 ) elemental function horner_033 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_033 = horner_032 ( x = x , pre_step = ( pre_step * x + coefficient_033 ) ) end function real ( real64 ) elemental function horner_034 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_034 = horner_033 ( x = x , pre_step = ( pre_step * x + coefficient_034 ) ) end function real ( real64 ) elemental function horner_035 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_035 = horner_034 ( x = x , pre_step = ( pre_step * x + coefficient_035 ) ) end function real ( real64 ) elemental function horner_036 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_036 = horner_035 ( x = x , pre_step = ( pre_step * x + coefficient_036 ) ) end function real ( real64 ) elemental function horner_037 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_037 = horner_036 ( x = x , pre_step = ( pre_step * x + coefficient_037 ) ) end function real ( real64 ) elemental function horner_038 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_038 = horner_037 ( x = x , pre_step = ( pre_step * x + coefficient_038 ) ) end function real ( real64 ) elemental function horner_039 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_039 = horner_038 ( x = x , pre_step = ( pre_step * x + coefficient_039 ) ) end function real ( real64 ) elemental function horner_040 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_040 = horner_039 ( x = x , pre_step = ( pre_step * x + coefficient_040 ) ) end function real ( real64 ) elemental function horner_041 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_041 = horner_040 ( x = x , pre_step = ( pre_step * x + coefficient_041 ) ) end function real ( real64 ) elemental function horner_042 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_042 = horner_041 ( x = x , pre_step = ( pre_step * x + coefficient_042 ) ) end function real ( real64 ) elemental function horner_043 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_043 = horner_042 ( x = x , pre_step = ( pre_step * x + coefficient_043 ) ) end function real ( real64 ) elemental function horner_044 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_044 = horner_043 ( x = x , pre_step = ( pre_step * x + coefficient_044 ) ) end function real ( real64 ) elemental function horner_045 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_045 = horner_044 ( x = x , pre_step = ( pre_step * x + coefficient_045 ) ) end function real ( real64 ) elemental function horner_046 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_046 = horner_045 ( x = x , pre_step = ( pre_step * x + coefficient_046 ) ) end function real ( real64 ) elemental function horner_047 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_047 = horner_046 ( x = x , pre_step = ( pre_step * x + coefficient_047 ) ) end function real ( real64 ) elemental function horner_048 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_048 = horner_047 ( x = x , pre_step = ( pre_step * x + coefficient_048 ) ) end function real ( real64 ) elemental function horner_049 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_049 = horner_048 ( x = x , pre_step = ( pre_step * x + coefficient_049 ) ) end function real ( real64 ) elemental function horner_050 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_050 = horner_049 ( x = x , pre_step = ( pre_step * x + coefficient_050 ) ) end function real ( real64 ) elemental function horner_051 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_051 = horner_050 ( x = x , pre_step = ( pre_step * x + coefficient_051 ) ) end function real ( real64 ) elemental function horner_052 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_052 = horner_051 ( x = x , pre_step = ( pre_step * x + coefficient_052 ) ) end function real ( real64 ) elemental function horner_053 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_053 = horner_052 ( x = x , pre_step = ( pre_step * x + coefficient_053 ) ) end function real ( real64 ) elemental function horner_054 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_054 = horner_053 ( x = x , pre_step = ( pre_step * x + coefficient_054 ) ) end function real ( real64 ) elemental function horner_055 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_055 = horner_054 ( x = x , pre_step = ( pre_step * x + coefficient_055 ) ) end function real ( real64 ) elemental function horner_056 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_056 = horner_055 ( x = x , pre_step = ( pre_step * x + coefficient_056 ) ) end function real ( real64 ) elemental function horner_057 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_057 = horner_056 ( x = x , pre_step = ( pre_step * x + coefficient_057 ) ) end function real ( real64 ) elemental function horner_058 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_058 = horner_057 ( x = x , pre_step = ( pre_step * x + coefficient_058 ) ) end function real ( real64 ) elemental function horner_059 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_059 = horner_058 ( x = x , pre_step = ( pre_step * x + coefficient_059 ) ) end function real ( real64 ) elemental function horner_060 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_060 = horner_059 ( x = x , pre_step = ( pre_step * x + coefficient_060 ) ) end function real ( real64 ) elemental function horner_061 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_061 = horner_060 ( x = x , pre_step = ( pre_step * x + coefficient_061 ) ) end function real ( real64 ) elemental function horner_062 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_062 = horner_061 ( x = x , pre_step = ( pre_step * x + coefficient_062 ) ) end function real ( real64 ) elemental function horner_063 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_063 = horner_062 ( x = x , pre_step = ( pre_step * x + coefficient_063 ) ) end function real ( real64 ) elemental function horner_064 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_064 = horner_063 ( x = x , pre_step = ( pre_step * x + coefficient_064 ) ) end function real ( real64 ) elemental function horner_065 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_065 = horner_064 ( x = x , pre_step = ( pre_step * x + coefficient_065 ) ) end function real ( real64 ) elemental function horner_066 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_066 = horner_065 ( x = x , pre_step = ( pre_step * x + coefficient_066 ) ) end function real ( real64 ) elemental function horner_067 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_067 = horner_066 ( x = x , pre_step = ( pre_step * x + coefficient_067 ) ) end function real ( real64 ) elemental function horner_068 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_068 = horner_067 ( x = x , pre_step = ( pre_step * x + coefficient_068 ) ) end function real ( real64 ) elemental function horner_069 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_069 = horner_068 ( x = x , pre_step = ( pre_step * x + coefficient_069 ) ) end function real ( real64 ) elemental function horner_070 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_070 = horner_069 ( x = x , pre_step = ( pre_step * x + coefficient_070 ) ) end function real ( real64 ) elemental function horner_071 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_071 = horner_070 ( x = x , pre_step = ( pre_step * x + coefficient_071 ) ) end function real ( real64 ) elemental function horner_072 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_072 = horner_071 ( x = x , pre_step = ( pre_step * x + coefficient_072 ) ) end function real ( real64 ) elemental function horner_073 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_073 = horner_072 ( x = x , pre_step = ( pre_step * x + coefficient_073 ) ) end function real ( real64 ) elemental function horner_074 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_074 = horner_073 ( x = x , pre_step = ( pre_step * x + coefficient_074 ) ) end function real ( real64 ) elemental function horner_075 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_075 = horner_074 ( x = x , pre_step = ( pre_step * x + coefficient_075 ) ) end function real ( real64 ) elemental function horner_076 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_076 = horner_075 ( x = x , pre_step = ( pre_step * x + coefficient_076 ) ) end function real ( real64 ) elemental function horner_077 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_077 = horner_076 ( x = x , pre_step = ( pre_step * x + coefficient_077 ) ) end function real ( real64 ) elemental function horner_078 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_078 = horner_077 ( x = x , pre_step = ( pre_step * x + coefficient_078 ) ) end function real ( real64 ) elemental function horner_079 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_079 = horner_078 ( x = x , pre_step = ( pre_step * x + coefficient_079 ) ) end function real ( real64 ) elemental function horner_080 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_080 = horner_079 ( x = x , pre_step = ( pre_step * x + coefficient_080 ) ) end function real ( real64 ) elemental function horner_081 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_081 = horner_080 ( x = x , pre_step = ( pre_step * x + coefficient_081 ) ) end function real ( real64 ) elemental function horner_082 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_082 = horner_081 ( x = x , pre_step = ( pre_step * x + coefficient_082 ) ) end function real ( real64 ) elemental function horner_083 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_083 = horner_082 ( x = x , pre_step = ( pre_step * x + coefficient_083 ) ) end function real ( real64 ) elemental function horner_084 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_084 = horner_083 ( x = x , pre_step = ( pre_step * x + coefficient_084 ) ) end function real ( real64 ) elemental function horner_085 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_085 = horner_084 ( x = x , pre_step = ( pre_step * x + coefficient_085 ) ) end function real ( real64 ) elemental function horner_086 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_086 = horner_085 ( x = x , pre_step = ( pre_step * x + coefficient_086 ) ) end function real ( real64 ) elemental function horner_087 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_087 = horner_086 ( x = x , pre_step = ( pre_step * x + coefficient_087 ) ) end function real ( real64 ) elemental function horner_088 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_088 = horner_087 ( x = x , pre_step = ( pre_step * x + coefficient_088 ) ) end function real ( real64 ) elemental function horner_089 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_089 = horner_088 ( x = x , pre_step = ( pre_step * x + coefficient_089 ) ) end function real ( real64 ) elemental function horner_090 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_090 = horner_089 ( x = x , pre_step = ( pre_step * x + coefficient_090 ) ) end function real ( real64 ) elemental function horner_091 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_091 = horner_090 ( x = x , pre_step = ( pre_step * x + coefficient_091 ) ) end function real ( real64 ) elemental function horner_092 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_092 = horner_091 ( x = x , pre_step = ( pre_step * x + coefficient_092 ) ) end function real ( real64 ) elemental function horner_093 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_093 = horner_092 ( x = x , pre_step = ( pre_step * x + coefficient_093 ) ) end function real ( real64 ) elemental function horner_094 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_094 = horner_093 ( x = x , pre_step = ( pre_step * x + coefficient_094 ) ) end function real ( real64 ) elemental function horner_095 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_095 = horner_094 ( x = x , pre_step = ( pre_step * x + coefficient_095 ) ) end function real ( real64 ) elemental function horner_096 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_096 = horner_095 ( x = x , pre_step = ( pre_step * x + coefficient_096 ) ) end function real ( real64 ) elemental function horner_097 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_097 = horner_096 ( x = x , pre_step = ( pre_step * x + coefficient_097 ) ) end function real ( real64 ) elemental function horner_098 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_098 = horner_097 ( x = x , pre_step = ( pre_step * x + coefficient_098 ) ) end function real ( real64 ) elemental function horner_099 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_099 = horner_098 ( x = x , pre_step = ( pre_step * x + coefficient_099 ) ) end function real ( real64 ) elemental function horner_100 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_100 = horner_099 ( x = x , pre_step = ( pre_step * x + coefficient_100 ) ) end function real ( real64 ) elemental function horner_101 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_101 = horner_100 ( x = x , pre_step = ( pre_step * x + coefficient_101 ) ) end function real ( real64 ) elemental function horner_102 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_102 = horner_101 ( x = x , pre_step = ( pre_step * x + coefficient_102 ) ) end function real ( real64 ) elemental function horner_103 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_103 = horner_102 ( x = x , pre_step = ( pre_step * x + coefficient_103 ) ) end function real ( real64 ) elemental function horner_104 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_104 = horner_103 ( x = x , pre_step = ( pre_step * x + coefficient_104 ) ) end function real ( real64 ) elemental function horner_105 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_105 = horner_104 ( x = x , pre_step = ( pre_step * x + coefficient_105 ) ) end function real ( real64 ) elemental function horner_106 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_106 = horner_105 ( x = x , pre_step = ( pre_step * x + coefficient_106 ) ) end function real ( real64 ) elemental function horner_107 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_107 = horner_106 ( x = x , pre_step = ( pre_step * x + coefficient_107 ) ) end function real ( real64 ) elemental function horner_108 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_108 = horner_107 ( x = x , pre_step = ( pre_step * x + coefficient_108 ) ) end function real ( real64 ) elemental function horner_109 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_109 = horner_108 ( x = x , pre_step = ( pre_step * x + coefficient_109 ) ) end function real ( real64 ) elemental function horner_110 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_110 = horner_109 ( x = x , pre_step = ( pre_step * x + coefficient_110 ) ) end function real ( real64 ) elemental function horner_111 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_111 = horner_110 ( x = x , pre_step = ( pre_step * x + coefficient_111 ) ) end function real ( real64 ) elemental function horner_112 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_112 = horner_111 ( x = x , pre_step = ( pre_step * x + coefficient_112 ) ) end function real ( real64 ) elemental function horner_113 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_113 = horner_112 ( x = x , pre_step = ( pre_step * x + coefficient_113 ) ) end function real ( real64 ) elemental function horner_114 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_114 = horner_113 ( x = x , pre_step = ( pre_step * x + coefficient_114 ) ) end function real ( real64 ) elemental function horner_115 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_115 = horner_114 ( x = x , pre_step = ( pre_step * x + coefficient_115 ) ) end function real ( real64 ) elemental function horner_116 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_116 = horner_115 ( x = x , pre_step = ( pre_step * x + coefficient_116 ) ) end function real ( real64 ) elemental function horner_117 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_117 = horner_116 ( x = x , pre_step = ( pre_step * x + coefficient_117 ) ) end function real ( real64 ) elemental function horner_118 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_118 = horner_117 ( x = x , pre_step = ( pre_step * x + coefficient_118 ) ) end function real ( real64 ) elemental function horner_119 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_119 = horner_118 ( x = x , pre_step = ( pre_step * x + coefficient_119 ) ) end function real ( real64 ) elemental function horner_120 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_120 = horner_119 ( x = x , pre_step = ( pre_step * x + coefficient_120 ) ) end function real ( real64 ) elemental function horner_121 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_121 = horner_120 ( x = x , pre_step = ( pre_step * x + coefficient_121 ) ) end function real ( real64 ) elemental function horner_122 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_122 = horner_121 ( x = x , pre_step = ( pre_step * x + coefficient_122 ) ) end function real ( real64 ) elemental function horner_123 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_123 = horner_122 ( x = x , pre_step = ( pre_step * x + coefficient_123 ) ) end function real ( real64 ) elemental function horner_124 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_124 = horner_123 ( x = x , pre_step = ( pre_step * x + coefficient_124 ) ) end function real ( real64 ) elemental function horner_125 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_125 = horner_124 ( x = x , pre_step = ( pre_step * x + coefficient_125 ) ) end function real ( real64 ) elemental function horner_126 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_126 = horner_125 ( x = x , pre_step = ( pre_step * x + coefficient_126 ) ) end function real ( real64 ) elemental function horner_127 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_127 = horner_126 ( x = x , pre_step = ( pre_step * x + coefficient_127 ) ) end function real ( real64 ) elemental function horner_128 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_128 = horner_127 ( x = x , pre_step = ( pre_step * x + coefficient_128 ) ) end function real ( real64 ) elemental function horner_129 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_129 = horner_128 ( x = x , pre_step = ( pre_step * x + coefficient_129 ) ) end function real ( real64 ) elemental function horner_130 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_130 = horner_129 ( x = x , pre_step = ( pre_step * x + coefficient_130 ) ) end function real ( real64 ) elemental function horner_131 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_131 = horner_130 ( x = x , pre_step = ( pre_step * x + coefficient_131 ) ) end function real ( real64 ) elemental function horner_132 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_132 = horner_131 ( x = x , pre_step = ( pre_step * x + coefficient_132 ) ) end function real ( real64 ) elemental function horner_133 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_133 = horner_132 ( x = x , pre_step = ( pre_step * x + coefficient_133 ) ) end function real ( real64 ) elemental function horner_134 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_134 = horner_133 ( x = x , pre_step = ( pre_step * x + coefficient_134 ) ) end function real ( real64 ) elemental function horner_135 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_135 = horner_134 ( x = x , pre_step = ( pre_step * x + coefficient_135 ) ) end function real ( real64 ) elemental function horner_136 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_136 = horner_135 ( x = x , pre_step = ( pre_step * x + coefficient_136 ) ) end function real ( real64 ) elemental function horner_137 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_137 = horner_136 ( x = x , pre_step = ( pre_step * x + coefficient_137 ) ) end function real ( real64 ) elemental function horner_138 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_138 = horner_137 ( x = x , pre_step = ( pre_step * x + coefficient_138 ) ) end function real ( real64 ) elemental function horner_139 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_139 = horner_138 ( x = x , pre_step = ( pre_step * x + coefficient_139 ) ) end function real ( real64 ) elemental function horner_140 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_140 = horner_139 ( x = x , pre_step = ( pre_step * x + coefficient_140 ) ) end function real ( real64 ) elemental function horner_141 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_141 = horner_140 ( x = x , pre_step = ( pre_step * x + coefficient_141 ) ) end function real ( real64 ) elemental function horner_142 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_142 = horner_141 ( x = x , pre_step = ( pre_step * x + coefficient_142 ) ) end function real ( real64 ) elemental function horner_143 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_143 = horner_142 ( x = x , pre_step = ( pre_step * x + coefficient_143 ) ) end function real ( real64 ) elemental function horner_144 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_144 = horner_143 ( x = x , pre_step = ( pre_step * x + coefficient_144 ) ) end function real ( real64 ) elemental function horner_145 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_145 = horner_144 ( x = x , pre_step = ( pre_step * x + coefficient_145 ) ) end function real ( real64 ) elemental function horner_146 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_146 = horner_145 ( x = x , pre_step = ( pre_step * x + coefficient_146 ) ) end function real ( real64 ) elemental function horner_147 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_147 = horner_146 ( x = x , pre_step = ( pre_step * x + coefficient_147 ) ) end function real ( real64 ) elemental function horner_148 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_148 = horner_147 ( x = x , pre_step = ( pre_step * x + coefficient_148 ) ) end function real ( real64 ) elemental function horner_149 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_149 = horner_148 ( x = x , pre_step = ( pre_step * x + coefficient_149 ) ) end function real ( real64 ) elemental function horner_150 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_150 = horner_149 ( x = x , pre_step = ( pre_step * x + coefficient_150 ) ) end function real ( real64 ) elemental function horner_151 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_151 = horner_150 ( x = x , pre_step = ( pre_step * x + coefficient_151 ) ) end function real ( real64 ) elemental function horner_152 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_152 = horner_151 ( x = x , pre_step = ( pre_step * x + coefficient_152 ) ) end function real ( real64 ) elemental function horner_153 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_153 = horner_152 ( x = x , pre_step = ( pre_step * x + coefficient_153 ) ) end function real ( real64 ) elemental function horner_154 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_154 = horner_153 ( x = x , pre_step = ( pre_step * x + coefficient_154 ) ) end function real ( real64 ) elemental function horner_155 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_155 = horner_154 ( x = x , pre_step = ( pre_step * x + coefficient_155 ) ) end function real ( real64 ) elemental function horner_156 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_156 = horner_155 ( x = x , pre_step = ( pre_step * x + coefficient_156 ) ) end function real ( real64 ) elemental function horner_157 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_157 = horner_156 ( x = x , pre_step = ( pre_step * x + coefficient_157 ) ) end function real ( real64 ) elemental function horner_158 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_158 = horner_157 ( x = x , pre_step = ( pre_step * x + coefficient_158 ) ) end function real ( real64 ) elemental function horner_159 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_159 = horner_158 ( x = x , pre_step = ( pre_step * x + coefficient_159 ) ) end function real ( real64 ) elemental function horner_160 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_160 = horner_159 ( x = x , pre_step = ( pre_step * x + coefficient_160 ) ) end function real ( real64 ) elemental function horner_161 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_161 = horner_160 ( x = x , pre_step = ( pre_step * x + coefficient_161 ) ) end function real ( real64 ) elemental function horner_162 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_162 = horner_161 ( x = x , pre_step = ( pre_step * x + coefficient_162 ) ) end function real ( real64 ) elemental function horner_163 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_163 = horner_162 ( x = x , pre_step = ( pre_step * x + coefficient_163 ) ) end function real ( real64 ) elemental function horner_164 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_164 = horner_163 ( x = x , pre_step = ( pre_step * x + coefficient_164 ) ) end function real ( real64 ) elemental function horner_165 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_165 = horner_164 ( x = x , pre_step = ( pre_step * x + coefficient_165 ) ) end function real ( real64 ) elemental function horner_166 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_166 = horner_165 ( x = x , pre_step = ( pre_step * x + coefficient_166 ) ) end function real ( real64 ) elemental function horner_167 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_167 = horner_166 ( x = x , pre_step = ( pre_step * x + coefficient_167 ) ) end function real ( real64 ) elemental function horner_168 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_168 = horner_167 ( x = x , pre_step = ( pre_step * x + coefficient_168 ) ) end function real ( real64 ) elemental function horner_169 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_169 = horner_168 ( x = x , pre_step = ( pre_step * x + coefficient_169 ) ) end function real ( real64 ) elemental function horner_170 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_170 = horner_169 ( x = x , pre_step = ( pre_step * x + coefficient_170 ) ) end function real ( real64 ) elemental function horner_171 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_171 = horner_170 ( x = x , pre_step = ( pre_step * x + coefficient_171 ) ) end function real ( real64 ) elemental function horner_172 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_172 = horner_171 ( x = x , pre_step = ( pre_step * x + coefficient_172 ) ) end function real ( real64 ) elemental function horner_173 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_173 = horner_172 ( x = x , pre_step = ( pre_step * x + coefficient_173 ) ) end function real ( real64 ) elemental function horner_174 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_174 = horner_173 ( x = x , pre_step = ( pre_step * x + coefficient_174 ) ) end function real ( real64 ) elemental function horner_175 ( x , pre_step ) real ( real64 ), intent ( in ) :: x , pre_step horner_175 = horner_174 ( x = x , pre_step = ( pre_step * x + coefficient_175 ) ) end function end submodule imp_taylor_series_cos_real64","tags":"","url":"sourcefile/main_submodule_cos_real64.f90.html"},{"title":"main_submodule_exp_real128.f90 – taylor_series_fortran","text":"Source Code !> Implementation of `taylor_series_exp_***` for `real128`. submodule ( taylor_series_fortran ) imp_taylor_series_exp_real128 use , non_intrinsic :: inv_factorial_real128 , only : & ! coefficient_000 => inv_factorial_000 , & ! coefficient_001 => inv_factorial_001 , & ! coefficient_002 => inv_factorial_002 , & ! coefficient_003 => inv_factorial_003 , & ! coefficient_004 => inv_factorial_004 , & ! coefficient_005 => inv_factorial_005 , & ! coefficient_006 => inv_factorial_006 , & ! coefficient_007 => inv_factorial_007 , & ! coefficient_008 => inv_factorial_008 , & ! coefficient_009 => inv_factorial_009 , & ! coefficient_010 => inv_factorial_010 , & ! coefficient_011 => inv_factorial_011 , & ! coefficient_012 => inv_factorial_012 , & ! coefficient_013 => inv_factorial_013 , & ! coefficient_014 => inv_factorial_014 , & ! coefficient_015 => inv_factorial_015 , & ! coefficient_016 => inv_factorial_016 , & ! coefficient_017 => inv_factorial_017 , & ! coefficient_018 => inv_factorial_018 , & ! coefficient_019 => inv_factorial_019 , & ! coefficient_020 => inv_factorial_020 , & ! coefficient_021 => inv_factorial_021 , & ! coefficient_022 => inv_factorial_022 , & ! coefficient_023 => inv_factorial_023 , & ! coefficient_024 => inv_factorial_024 , & ! coefficient_025 => inv_factorial_025 , & ! coefficient_026 => inv_factorial_026 , & ! coefficient_027 => inv_factorial_027 , & ! coefficient_028 => inv_factorial_028 , & ! coefficient_029 => inv_factorial_029 , & ! coefficient_030 => inv_factorial_030 , & ! coefficient_031 => inv_factorial_031 , & ! coefficient_032 => inv_factorial_032 , & ! coefficient_033 => inv_factorial_033 , & ! coefficient_034 => inv_factorial_034 , & ! coefficient_035 => inv_factorial_035 , & ! coefficient_036 => inv_factorial_036 , & ! coefficient_037 => inv_factorial_037 , & ! coefficient_038 => inv_factorial_038 , & ! coefficient_039 => inv_factorial_039 , & ! coefficient_040 => inv_factorial_040 , & ! coefficient_041 => inv_factorial_041 , & ! coefficient_042 => inv_factorial_042 , & ! coefficient_043 => inv_factorial_043 , & ! coefficient_044 => inv_factorial_044 , & ! coefficient_045 => inv_factorial_045 , & ! coefficient_046 => inv_factorial_046 , & ! coefficient_047 => inv_factorial_047 , & ! coefficient_048 => inv_factorial_048 , & ! coefficient_049 => inv_factorial_049 , & ! coefficient_050 => inv_factorial_050 , & ! coefficient_051 => inv_factorial_051 , & ! coefficient_052 => inv_factorial_052 , & ! coefficient_053 => inv_factorial_053 , & ! coefficient_054 => inv_factorial_054 , & ! coefficient_055 => inv_factorial_055 , & ! coefficient_056 => inv_factorial_056 , & ! coefficient_057 => inv_factorial_057 , & ! coefficient_058 => inv_factorial_058 , & ! coefficient_059 => inv_factorial_059 , & ! coefficient_060 => inv_factorial_060 , & ! coefficient_061 => inv_factorial_061 , & ! coefficient_062 => inv_factorial_062 , & ! coefficient_063 => inv_factorial_063 , & ! coefficient_064 => inv_factorial_064 , & ! coefficient_065 => inv_factorial_065 , & ! coefficient_066 => inv_factorial_066 , & ! coefficient_067 => inv_factorial_067 , & ! coefficient_068 => inv_factorial_068 , & ! coefficient_069 => inv_factorial_069 , & ! coefficient_070 => inv_factorial_070 , & ! coefficient_071 => inv_factorial_071 , & ! coefficient_072 => inv_factorial_072 , & ! coefficient_073 => inv_factorial_073 , & ! coefficient_074 => inv_factorial_074 , & ! coefficient_075 => inv_factorial_075 , & ! coefficient_076 => inv_factorial_076 , & ! coefficient_077 => inv_factorial_077 , & ! coefficient_078 => inv_factorial_078 , & ! coefficient_079 => inv_factorial_079 , & ! coefficient_080 => inv_factorial_080 , & ! coefficient_081 => inv_factorial_081 , & ! coefficient_082 => inv_factorial_082 , & ! coefficient_083 => inv_factorial_083 , & ! coefficient_084 => inv_factorial_084 , & ! coefficient_085 => inv_factorial_085 , & ! coefficient_086 => inv_factorial_086 , & ! coefficient_087 => inv_factorial_087 , & ! coefficient_088 => inv_factorial_088 , & ! coefficient_089 => inv_factorial_089 , & ! coefficient_090 => inv_factorial_090 , & ! coefficient_091 => inv_factorial_091 , & ! coefficient_092 => inv_factorial_092 , & ! coefficient_093 => inv_factorial_093 , & ! coefficient_094 => inv_factorial_094 , & ! coefficient_095 => inv_factorial_095 , & ! coefficient_096 => inv_factorial_096 , & ! coefficient_097 => inv_factorial_097 , & ! coefficient_098 => inv_factorial_098 , & ! coefficient_099 => inv_factorial_099 , & ! coefficient_100 => inv_factorial_100 , & ! coefficient_101 => inv_factorial_101 , & ! coefficient_102 => inv_factorial_102 , & ! coefficient_103 => inv_factorial_103 , & ! coefficient_104 => inv_factorial_104 , & ! coefficient_105 => inv_factorial_105 , & ! coefficient_106 => inv_factorial_106 , & ! coefficient_107 => inv_factorial_107 , & ! coefficient_108 => inv_factorial_108 , & ! coefficient_109 => inv_factorial_109 , & ! coefficient_110 => inv_factorial_110 , & ! coefficient_111 => inv_factorial_111 , & ! coefficient_112 => inv_factorial_112 , & ! coefficient_113 => inv_factorial_113 , & ! coefficient_114 => inv_factorial_114 , & ! coefficient_115 => inv_factorial_115 , & ! coefficient_116 => inv_factorial_116 , & ! coefficient_117 => inv_factorial_117 , & ! coefficient_118 => inv_factorial_118 , & ! coefficient_119 => inv_factorial_119 , & ! coefficient_120 => inv_factorial_120 , & ! coefficient_121 => inv_factorial_121 , & ! coefficient_122 => inv_factorial_122 , & ! coefficient_123 => inv_factorial_123 , & ! coefficient_124 => inv_factorial_124 , & ! coefficient_125 => inv_factorial_125 , & ! coefficient_126 => inv_factorial_126 , & ! coefficient_127 => inv_factorial_127 , & ! coefficient_128 => inv_factorial_128 , & ! coefficient_129 => inv_factorial_129 , & ! coefficient_130 => inv_factorial_130 , & ! coefficient_131 => inv_factorial_131 , & ! coefficient_132 => inv_factorial_132 , & ! coefficient_133 => inv_factorial_133 , & ! coefficient_134 => inv_factorial_134 , & ! coefficient_135 => inv_factorial_135 , & ! coefficient_136 => inv_factorial_136 , & ! coefficient_137 => inv_factorial_137 , & ! coefficient_138 => inv_factorial_138 , & ! coefficient_139 => inv_factorial_139 , & ! coefficient_140 => inv_factorial_140 , & ! coefficient_141 => inv_factorial_141 , & ! coefficient_142 => inv_factorial_142 , & ! coefficient_143 => inv_factorial_143 , & ! coefficient_144 => inv_factorial_144 , & ! coefficient_145 => inv_factorial_145 , & ! coefficient_146 => inv_factorial_146 , & ! coefficient_147 => inv_factorial_147 , & ! coefficient_148 => inv_factorial_148 , & ! coefficient_149 => inv_factorial_149 , & ! coefficient_150 => inv_factorial_150 , & ! coefficient_151 => inv_factorial_151 , & ! coefficient_152 => inv_factorial_152 , & ! coefficient_153 => inv_factorial_153 , & ! coefficient_154 => inv_factorial_154 , & ! coefficient_155 => inv_factorial_155 , & ! coefficient_156 => inv_factorial_156 , & ! coefficient_157 => inv_factorial_157 , & ! coefficient_158 => inv_factorial_158 , & ! coefficient_159 => inv_factorial_159 , & ! coefficient_160 => inv_factorial_160 , & ! coefficient_161 => inv_factorial_161 , & ! coefficient_162 => inv_factorial_162 , & ! coefficient_163 => inv_factorial_163 , & ! coefficient_164 => inv_factorial_164 , & ! coefficient_165 => inv_factorial_165 , & ! coefficient_166 => inv_factorial_166 , & ! coefficient_167 => inv_factorial_167 , & ! coefficient_168 => inv_factorial_168 , & ! coefficient_169 => inv_factorial_169 , & ! coefficient_170 => inv_factorial_170 , & ! coefficient_171 => inv_factorial_171 , & ! coefficient_172 => inv_factorial_172 , & ! coefficient_173 => inv_factorial_173 , & ! coefficient_174 => inv_factorial_174 , & ! coefficient_175 => inv_factorial_175 , & ! coefficient_176 => inv_factorial_176 , & ! coefficient_177 => inv_factorial_177 implicit none contains module procedure taylor_series_exp_000_real128 res = horner_000 ( x = x , pre_step = 0.0_real128 ) end procedure taylor_series_exp_000_real128 module procedure taylor_series_exp_001_real128 res = horner_000 ( x = x , pre_step = coefficient_001 ) end procedure taylor_series_exp_001_real128 module procedure taylor_series_exp_002_real128 res = horner_001 ( x = x , pre_step = coefficient_002 ) end procedure taylor_series_exp_002_real128 module procedure taylor_series_exp_003_real128 res = horner_002 ( x = x , pre_step = coefficient_003 ) end procedure taylor_series_exp_003_real128 module procedure taylor_series_exp_004_real128 res = horner_003 ( x = x , pre_step = coefficient_004 ) end procedure taylor_series_exp_004_real128 module procedure taylor_series_exp_005_real128 res = horner_004 ( x = x , pre_step = coefficient_005 ) end procedure taylor_series_exp_005_real128 module procedure taylor_series_exp_006_real128 res = horner_005 ( x = x , pre_step = coefficient_006 ) end procedure taylor_series_exp_006_real128 module procedure taylor_series_exp_007_real128 res = horner_006 ( x = x , pre_step = coefficient_007 ) end procedure taylor_series_exp_007_real128 module procedure taylor_series_exp_008_real128 res = horner_007 ( x = x , pre_step = coefficient_008 ) end procedure taylor_series_exp_008_real128 module procedure taylor_series_exp_009_real128 res = horner_008 ( x = x , pre_step = coefficient_009 ) end procedure taylor_series_exp_009_real128 module procedure taylor_series_exp_010_real128 res = horner_009 ( x = x , pre_step = coefficient_010 ) end procedure taylor_series_exp_010_real128 module procedure taylor_series_exp_011_real128 res = horner_010 ( x = x , pre_step = coefficient_011 ) end procedure taylor_series_exp_011_real128 module procedure taylor_series_exp_012_real128 res = horner_011 ( x = x , pre_step = coefficient_012 ) end procedure taylor_series_exp_012_real128 module procedure taylor_series_exp_013_real128 res = horner_012 ( x = x , pre_step = coefficient_013 ) end procedure taylor_series_exp_013_real128 module procedure taylor_series_exp_014_real128 res = horner_013 ( x = x , pre_step = coefficient_014 ) end procedure taylor_series_exp_014_real128 module procedure taylor_series_exp_015_real128 res = horner_014 ( x = x , pre_step = coefficient_015 ) end procedure taylor_series_exp_015_real128 module procedure taylor_series_exp_016_real128 res = horner_015 ( x = x , pre_step = coefficient_016 ) end procedure taylor_series_exp_016_real128 module procedure taylor_series_exp_017_real128 res = horner_016 ( x = x , pre_step = coefficient_017 ) end procedure taylor_series_exp_017_real128 module procedure taylor_series_exp_018_real128 res = horner_017 ( x = x , pre_step = coefficient_018 ) end procedure taylor_series_exp_018_real128 module procedure taylor_series_exp_019_real128 res = horner_018 ( x = x , pre_step = coefficient_019 ) end procedure taylor_series_exp_019_real128 module procedure taylor_series_exp_020_real128 res = horner_019 ( x = x , pre_step = coefficient_020 ) end procedure taylor_series_exp_020_real128 module procedure taylor_series_exp_021_real128 res = horner_020 ( x = x , pre_step = coefficient_021 ) end procedure taylor_series_exp_021_real128 module procedure taylor_series_exp_022_real128 res = horner_021 ( x = x , pre_step = coefficient_022 ) end procedure taylor_series_exp_022_real128 module procedure taylor_series_exp_023_real128 res = horner_022 ( x = x , pre_step = coefficient_023 ) end procedure taylor_series_exp_023_real128 module procedure taylor_series_exp_024_real128 res = horner_023 ( x = x , pre_step = coefficient_024 ) end procedure taylor_series_exp_024_real128 module procedure taylor_series_exp_025_real128 res = horner_024 ( x = x , pre_step = coefficient_025 ) end procedure taylor_series_exp_025_real128 module procedure taylor_series_exp_026_real128 res = horner_025 ( x = x , pre_step = coefficient_026 ) end procedure taylor_series_exp_026_real128 module procedure taylor_series_exp_027_real128 res = horner_026 ( x = x , pre_step = coefficient_027 ) end procedure taylor_series_exp_027_real128 module procedure taylor_series_exp_028_real128 res = horner_027 ( x = x , pre_step = coefficient_028 ) end procedure taylor_series_exp_028_real128 module procedure taylor_series_exp_029_real128 res = horner_028 ( x = x , pre_step = coefficient_029 ) end procedure taylor_series_exp_029_real128 module procedure taylor_series_exp_030_real128 res = horner_029 ( x = x , pre_step = coefficient_030 ) end procedure taylor_series_exp_030_real128 module procedure taylor_series_exp_031_real128 res = horner_030 ( x = x , pre_step = coefficient_031 ) end procedure taylor_series_exp_031_real128 module procedure taylor_series_exp_032_real128 res = horner_031 ( x = x , pre_step = coefficient_032 ) end procedure taylor_series_exp_032_real128 module procedure taylor_series_exp_033_real128 res = horner_032 ( x = x , pre_step = coefficient_033 ) end procedure taylor_series_exp_033_real128 module procedure taylor_series_exp_034_real128 res = horner_033 ( x = x , pre_step = coefficient_034 ) end procedure taylor_series_exp_034_real128 module procedure taylor_series_exp_035_real128 res = horner_034 ( x = x , pre_step = coefficient_035 ) end procedure taylor_series_exp_035_real128 module procedure taylor_series_exp_036_real128 res = horner_035 ( x = x , pre_step = coefficient_036 ) end procedure taylor_series_exp_036_real128 module procedure taylor_series_exp_037_real128 res = horner_036 ( x = x , pre_step = coefficient_037 ) end procedure taylor_series_exp_037_real128 module procedure taylor_series_exp_038_real128 res = horner_037 ( x = x , pre_step = coefficient_038 ) end procedure taylor_series_exp_038_real128 module procedure taylor_series_exp_039_real128 res = horner_038 ( x = x , pre_step = coefficient_039 ) end procedure taylor_series_exp_039_real128 module procedure taylor_series_exp_040_real128 res = horner_039 ( x = x , pre_step = coefficient_040 ) end procedure taylor_series_exp_040_real128 module procedure taylor_series_exp_041_real128 res = horner_040 ( x = x , pre_step = coefficient_041 ) end procedure taylor_series_exp_041_real128 module procedure taylor_series_exp_042_real128 res = horner_041 ( x = x , pre_step = coefficient_042 ) end procedure taylor_series_exp_042_real128 module procedure taylor_series_exp_043_real128 res = horner_042 ( x = x , pre_step = coefficient_043 ) end procedure taylor_series_exp_043_real128 module procedure taylor_series_exp_044_real128 res = horner_043 ( x = x , pre_step = coefficient_044 ) end procedure taylor_series_exp_044_real128 module procedure taylor_series_exp_045_real128 res = horner_044 ( x = x , pre_step = coefficient_045 ) end procedure taylor_series_exp_045_real128 module procedure taylor_series_exp_046_real128 res = horner_045 ( x = x , pre_step = coefficient_046 ) end procedure taylor_series_exp_046_real128 module procedure taylor_series_exp_047_real128 res = horner_046 ( x = x , pre_step = coefficient_047 ) end procedure taylor_series_exp_047_real128 module procedure taylor_series_exp_048_real128 res = horner_047 ( x = x , pre_step = coefficient_048 ) end procedure taylor_series_exp_048_real128 module procedure taylor_series_exp_049_real128 res = horner_048 ( x = x , pre_step = coefficient_049 ) end procedure taylor_series_exp_049_real128 module procedure taylor_series_exp_050_real128 res = horner_049 ( x = x , pre_step = coefficient_050 ) end procedure taylor_series_exp_050_real128 module procedure taylor_series_exp_051_real128 res = horner_050 ( x = x , pre_step = coefficient_051 ) end procedure taylor_series_exp_051_real128 module procedure taylor_series_exp_052_real128 res = horner_051 ( x = x , pre_step = coefficient_052 ) end procedure taylor_series_exp_052_real128 module procedure taylor_series_exp_053_real128 res = horner_052 ( x = x , pre_step = coefficient_053 ) end procedure taylor_series_exp_053_real128 module procedure taylor_series_exp_054_real128 res = horner_053 ( x = x , pre_step = coefficient_054 ) end procedure taylor_series_exp_054_real128 module procedure taylor_series_exp_055_real128 res = horner_054 ( x = x , pre_step = coefficient_055 ) end procedure taylor_series_exp_055_real128 module procedure taylor_series_exp_056_real128 res = horner_055 ( x = x , pre_step = coefficient_056 ) end procedure taylor_series_exp_056_real128 module procedure taylor_series_exp_057_real128 res = horner_056 ( x = x , pre_step = coefficient_057 ) end procedure taylor_series_exp_057_real128 module procedure taylor_series_exp_058_real128 res = horner_057 ( x = x , pre_step = coefficient_058 ) end procedure taylor_series_exp_058_real128 module procedure taylor_series_exp_059_real128 res = horner_058 ( x = x , pre_step = coefficient_059 ) end procedure taylor_series_exp_059_real128 module procedure taylor_series_exp_060_real128 res = horner_059 ( x = x , pre_step = coefficient_060 ) end procedure taylor_series_exp_060_real128 module procedure taylor_series_exp_061_real128 res = horner_060 ( x = x , pre_step = coefficient_061 ) end procedure taylor_series_exp_061_real128 module procedure taylor_series_exp_062_real128 res = horner_061 ( x = x , pre_step = coefficient_062 ) end procedure taylor_series_exp_062_real128 module procedure taylor_series_exp_063_real128 res = horner_062 ( x = x , pre_step = coefficient_063 ) end procedure taylor_series_exp_063_real128 module procedure taylor_series_exp_064_real128 res = horner_063 ( x = x , pre_step = coefficient_064 ) end procedure taylor_series_exp_064_real128 module procedure taylor_series_exp_065_real128 res = horner_064 ( x = x , pre_step = coefficient_065 ) end procedure taylor_series_exp_065_real128 module procedure taylor_series_exp_066_real128 res = horner_065 ( x = x , pre_step = coefficient_066 ) end procedure taylor_series_exp_066_real128 module procedure taylor_series_exp_067_real128 res = horner_066 ( x = x , pre_step = coefficient_067 ) end procedure taylor_series_exp_067_real128 module procedure taylor_series_exp_068_real128 res = horner_067 ( x = x , pre_step = coefficient_068 ) end procedure taylor_series_exp_068_real128 module procedure taylor_series_exp_069_real128 res = horner_068 ( x = x , pre_step = coefficient_069 ) end procedure taylor_series_exp_069_real128 module procedure taylor_series_exp_070_real128 res = horner_069 ( x = x , pre_step = coefficient_070 ) end procedure taylor_series_exp_070_real128 module procedure taylor_series_exp_071_real128 res = horner_070 ( x = x , pre_step = coefficient_071 ) end procedure taylor_series_exp_071_real128 module procedure taylor_series_exp_072_real128 res = horner_071 ( x = x , pre_step = coefficient_072 ) end procedure taylor_series_exp_072_real128 module procedure taylor_series_exp_073_real128 res = horner_072 ( x = x , pre_step = coefficient_073 ) end procedure taylor_series_exp_073_real128 module procedure taylor_series_exp_074_real128 res = horner_073 ( x = x , pre_step = coefficient_074 ) end procedure taylor_series_exp_074_real128 module procedure taylor_series_exp_075_real128 res = horner_074 ( x = x , pre_step = coefficient_075 ) end procedure taylor_series_exp_075_real128 module procedure taylor_series_exp_076_real128 res = horner_075 ( x = x , pre_step = coefficient_076 ) end procedure taylor_series_exp_076_real128 module procedure taylor_series_exp_077_real128 res = horner_076 ( x = x , pre_step = coefficient_077 ) end procedure taylor_series_exp_077_real128 module procedure taylor_series_exp_078_real128 res = horner_077 ( x = x , pre_step = coefficient_078 ) end procedure taylor_series_exp_078_real128 module procedure taylor_series_exp_079_real128 res = horner_078 ( x = x , pre_step = coefficient_079 ) end procedure taylor_series_exp_079_real128 module procedure taylor_series_exp_080_real128 res = horner_079 ( x = x , pre_step = coefficient_080 ) end procedure taylor_series_exp_080_real128 module procedure taylor_series_exp_081_real128 res = horner_080 ( x = x , pre_step = coefficient_081 ) end procedure taylor_series_exp_081_real128 module procedure taylor_series_exp_082_real128 res = horner_081 ( x = x , pre_step = coefficient_082 ) end procedure taylor_series_exp_082_real128 module procedure taylor_series_exp_083_real128 res = horner_082 ( x = x , pre_step = coefficient_083 ) end procedure taylor_series_exp_083_real128 module procedure taylor_series_exp_084_real128 res = horner_083 ( x = x , pre_step = coefficient_084 ) end procedure taylor_series_exp_084_real128 module procedure taylor_series_exp_085_real128 res = horner_084 ( x = x , pre_step = coefficient_085 ) end procedure taylor_series_exp_085_real128 module procedure taylor_series_exp_086_real128 res = horner_085 ( x = x , pre_step = coefficient_086 ) end procedure taylor_series_exp_086_real128 module procedure taylor_series_exp_087_real128 res = horner_086 ( x = x , pre_step = coefficient_087 ) end procedure taylor_series_exp_087_real128 module procedure taylor_series_exp_088_real128 res = horner_087 ( x = x , pre_step = coefficient_088 ) end procedure taylor_series_exp_088_real128 module procedure taylor_series_exp_089_real128 res = horner_088 ( x = x , pre_step = coefficient_089 ) end procedure taylor_series_exp_089_real128 module procedure taylor_series_exp_090_real128 res = horner_089 ( x = x , pre_step = coefficient_090 ) end procedure taylor_series_exp_090_real128 module procedure taylor_series_exp_091_real128 res = horner_090 ( x = x , pre_step = coefficient_091 ) end procedure taylor_series_exp_091_real128 module procedure taylor_series_exp_092_real128 res = horner_091 ( x = x , pre_step = coefficient_092 ) end procedure taylor_series_exp_092_real128 module procedure taylor_series_exp_093_real128 res = horner_092 ( x = x , pre_step = coefficient_093 ) end procedure taylor_series_exp_093_real128 module procedure taylor_series_exp_094_real128 res = horner_093 ( x = x , pre_step = coefficient_094 ) end procedure taylor_series_exp_094_real128 module procedure taylor_series_exp_095_real128 res = horner_094 ( x = x , pre_step = coefficient_095 ) end procedure taylor_series_exp_095_real128 module procedure taylor_series_exp_096_real128 res = horner_095 ( x = x , pre_step = coefficient_096 ) end procedure taylor_series_exp_096_real128 module procedure taylor_series_exp_097_real128 res = horner_096 ( x = x , pre_step = coefficient_097 ) end procedure taylor_series_exp_097_real128 module procedure taylor_series_exp_098_real128 res = horner_097 ( x = x , pre_step = coefficient_098 ) end procedure taylor_series_exp_098_real128 module procedure taylor_series_exp_099_real128 res = horner_098 ( x = x , pre_step = coefficient_099 ) end procedure taylor_series_exp_099_real128 module procedure taylor_series_exp_100_real128 res = horner_099 ( x = x , pre_step = coefficient_100 ) end procedure taylor_series_exp_100_real128 module procedure taylor_series_exp_101_real128 res = horner_100 ( x = x , pre_step = coefficient_101 ) end procedure taylor_series_exp_101_real128 module procedure taylor_series_exp_102_real128 res = horner_101 ( x = x , pre_step = coefficient_102 ) end procedure taylor_series_exp_102_real128 module procedure taylor_series_exp_103_real128 res = horner_102 ( x = x , pre_step = coefficient_103 ) end procedure taylor_series_exp_103_real128 module procedure taylor_series_exp_104_real128 res = horner_103 ( x = x , pre_step = coefficient_104 ) end procedure taylor_series_exp_104_real128 module procedure taylor_series_exp_105_real128 res = horner_104 ( x = x , pre_step = coefficient_105 ) end procedure taylor_series_exp_105_real128 module procedure taylor_series_exp_106_real128 res = horner_105 ( x = x , pre_step = coefficient_106 ) end procedure taylor_series_exp_106_real128 module procedure taylor_series_exp_107_real128 res = horner_106 ( x = x , pre_step = coefficient_107 ) end procedure taylor_series_exp_107_real128 module procedure taylor_series_exp_108_real128 res = horner_107 ( x = x , pre_step = coefficient_108 ) end procedure taylor_series_exp_108_real128 module procedure taylor_series_exp_109_real128 res = horner_108 ( x = x , pre_step = coefficient_109 ) end procedure taylor_series_exp_109_real128 module procedure taylor_series_exp_110_real128 res = horner_109 ( x = x , pre_step = coefficient_110 ) end procedure taylor_series_exp_110_real128 module procedure taylor_series_exp_111_real128 res = horner_110 ( x = x , pre_step = coefficient_111 ) end procedure taylor_series_exp_111_real128 module procedure taylor_series_exp_112_real128 res = horner_111 ( x = x , pre_step = coefficient_112 ) end procedure taylor_series_exp_112_real128 module procedure taylor_series_exp_113_real128 res = horner_112 ( x = x , pre_step = coefficient_113 ) end procedure taylor_series_exp_113_real128 module procedure taylor_series_exp_114_real128 res = horner_113 ( x = x , pre_step = coefficient_114 ) end procedure taylor_series_exp_114_real128 module procedure taylor_series_exp_115_real128 res = horner_114 ( x = x , pre_step = coefficient_115 ) end procedure taylor_series_exp_115_real128 module procedure taylor_series_exp_116_real128 res = horner_115 ( x = x , pre_step = coefficient_116 ) end procedure taylor_series_exp_116_real128 module procedure taylor_series_exp_117_real128 res = horner_116 ( x = x , pre_step = coefficient_117 ) end procedure taylor_series_exp_117_real128 module procedure taylor_series_exp_118_real128 res = horner_117 ( x = x , pre_step = coefficient_118 ) end procedure taylor_series_exp_118_real128 module procedure taylor_series_exp_119_real128 res = horner_118 ( x = x , pre_step = coefficient_119 ) end procedure taylor_series_exp_119_real128 module procedure taylor_series_exp_120_real128 res = horner_119 ( x = x , pre_step = coefficient_120 ) end procedure taylor_series_exp_120_real128 module procedure taylor_series_exp_121_real128 res = horner_120 ( x = x , pre_step = coefficient_121 ) end procedure taylor_series_exp_121_real128 module procedure taylor_series_exp_122_real128 res = horner_121 ( x = x , pre_step = coefficient_122 ) end procedure taylor_series_exp_122_real128 module procedure taylor_series_exp_123_real128 res = horner_122 ( x = x , pre_step = coefficient_123 ) end procedure taylor_series_exp_123_real128 module procedure taylor_series_exp_124_real128 res = horner_123 ( x = x , pre_step = coefficient_124 ) end procedure taylor_series_exp_124_real128 module procedure taylor_series_exp_125_real128 res = horner_124 ( x = x , pre_step = coefficient_125 ) end procedure taylor_series_exp_125_real128 module procedure taylor_series_exp_126_real128 res = horner_125 ( x = x , pre_step = coefficient_126 ) end procedure taylor_series_exp_126_real128 module procedure taylor_series_exp_127_real128 res = horner_126 ( x = x , pre_step = coefficient_127 ) end procedure taylor_series_exp_127_real128 module procedure taylor_series_exp_128_real128 res = horner_127 ( x = x , pre_step = coefficient_128 ) end procedure taylor_series_exp_128_real128 module procedure taylor_series_exp_129_real128 res = horner_128 ( x = x , pre_step = coefficient_129 ) end procedure taylor_series_exp_129_real128 module procedure taylor_series_exp_130_real128 res = horner_129 ( x = x , pre_step = coefficient_130 ) end procedure taylor_series_exp_130_real128 module procedure taylor_series_exp_131_real128 res = horner_130 ( x = x , pre_step = coefficient_131 ) end procedure taylor_series_exp_131_real128 module procedure taylor_series_exp_132_real128 res = horner_131 ( x = x , pre_step = coefficient_132 ) end procedure taylor_series_exp_132_real128 module procedure taylor_series_exp_133_real128 res = horner_132 ( x = x , pre_step = coefficient_133 ) end procedure taylor_series_exp_133_real128 module procedure taylor_series_exp_134_real128 res = horner_133 ( x = x , pre_step = coefficient_134 ) end procedure taylor_series_exp_134_real128 module procedure taylor_series_exp_135_real128 res = horner_134 ( x = x , pre_step = coefficient_135 ) end procedure taylor_series_exp_135_real128 module procedure taylor_series_exp_136_real128 res = horner_135 ( x = x , pre_step = coefficient_136 ) end procedure taylor_series_exp_136_real128 module procedure taylor_series_exp_137_real128 res = horner_136 ( x = x , pre_step = coefficient_137 ) end procedure taylor_series_exp_137_real128 module procedure taylor_series_exp_138_real128 res = horner_137 ( x = x , pre_step = coefficient_138 ) end procedure taylor_series_exp_138_real128 module procedure taylor_series_exp_139_real128 res = horner_138 ( x = x , pre_step = coefficient_139 ) end procedure taylor_series_exp_139_real128 module procedure taylor_series_exp_140_real128 res = horner_139 ( x = x , pre_step = coefficient_140 ) end procedure taylor_series_exp_140_real128 module procedure taylor_series_exp_141_real128 res = horner_140 ( x = x , pre_step = coefficient_141 ) end procedure taylor_series_exp_141_real128 module procedure taylor_series_exp_142_real128 res = horner_141 ( x = x , pre_step = coefficient_142 ) end procedure taylor_series_exp_142_real128 module procedure taylor_series_exp_143_real128 res = horner_142 ( x = x , pre_step = coefficient_143 ) end procedure taylor_series_exp_143_real128 module procedure taylor_series_exp_144_real128 res = horner_143 ( x = x , pre_step = coefficient_144 ) end procedure taylor_series_exp_144_real128 module procedure taylor_series_exp_145_real128 res = horner_144 ( x = x , pre_step = coefficient_145 ) end procedure taylor_series_exp_145_real128 module procedure taylor_series_exp_146_real128 res = horner_145 ( x = x , pre_step = coefficient_146 ) end procedure taylor_series_exp_146_real128 module procedure taylor_series_exp_147_real128 res = horner_146 ( x = x , pre_step = coefficient_147 ) end procedure taylor_series_exp_147_real128 module procedure taylor_series_exp_148_real128 res = horner_147 ( x = x , pre_step = coefficient_148 ) end procedure taylor_series_exp_148_real128 module procedure taylor_series_exp_149_real128 res = horner_148 ( x = x , pre_step = coefficient_149 ) end procedure taylor_series_exp_149_real128 module procedure taylor_series_exp_150_real128 res = horner_149 ( x = x , pre_step = coefficient_150 ) end procedure taylor_series_exp_150_real128 module procedure taylor_series_exp_151_real128 res = horner_150 ( x = x , pre_step = coefficient_151 ) end procedure taylor_series_exp_151_real128 module procedure taylor_series_exp_152_real128 res = horner_151 ( x = x , pre_step = coefficient_152 ) end procedure taylor_series_exp_152_real128 module procedure taylor_series_exp_153_real128 res = horner_152 ( x = x , pre_step = coefficient_153 ) end procedure taylor_series_exp_153_real128 module procedure taylor_series_exp_154_real128 res = horner_153 ( x = x , pre_step = coefficient_154 ) end procedure taylor_series_exp_154_real128 module procedure taylor_series_exp_155_real128 res = horner_154 ( x = x , pre_step = coefficient_155 ) end procedure taylor_series_exp_155_real128 module procedure taylor_series_exp_156_real128 res = horner_155 ( x = x , pre_step = coefficient_156 ) end procedure taylor_series_exp_156_real128 module procedure taylor_series_exp_157_real128 res = horner_156 ( x = x , pre_step = coefficient_157 ) end procedure taylor_series_exp_157_real128 module procedure taylor_series_exp_158_real128 res = horner_157 ( x = x , pre_step = coefficient_158 ) end procedure taylor_series_exp_158_real128 module procedure taylor_series_exp_159_real128 res = horner_158 ( x = x , pre_step = coefficient_159 ) end procedure taylor_series_exp_159_real128 module procedure taylor_series_exp_160_real128 res = horner_159 ( x = x , pre_step = coefficient_160 ) end procedure taylor_series_exp_160_real128 module procedure taylor_series_exp_161_real128 res = horner_160 ( x = x , pre_step = coefficient_161 ) end procedure taylor_series_exp_161_real128 module procedure taylor_series_exp_162_real128 res = horner_161 ( x = x , pre_step = coefficient_162 ) end procedure taylor_series_exp_162_real128 module procedure taylor_series_exp_163_real128 res = horner_162 ( x = x , pre_step = coefficient_163 ) end procedure taylor_series_exp_163_real128 module procedure taylor_series_exp_164_real128 res = horner_163 ( x = x , pre_step = coefficient_164 ) end procedure taylor_series_exp_164_real128 module procedure taylor_series_exp_165_real128 res = horner_164 ( x = x , pre_step = coefficient_165 ) end procedure taylor_series_exp_165_real128 module procedure taylor_series_exp_166_real128 res = horner_165 ( x = x , pre_step = coefficient_166 ) end procedure taylor_series_exp_166_real128 module procedure taylor_series_exp_167_real128 res = horner_166 ( x = x , pre_step = coefficient_167 ) end procedure taylor_series_exp_167_real128 module procedure taylor_series_exp_168_real128 res = horner_167 ( x = x , pre_step = coefficient_168 ) end procedure taylor_series_exp_168_real128 module procedure taylor_series_exp_169_real128 res = horner_168 ( x = x , pre_step = coefficient_169 ) end procedure taylor_series_exp_169_real128 module procedure taylor_series_exp_170_real128 res = horner_169 ( x = x , pre_step = coefficient_170 ) end procedure taylor_series_exp_170_real128 module procedure taylor_series_exp_171_real128 res = horner_170 ( x = x , pre_step = coefficient_171 ) end procedure taylor_series_exp_171_real128 module procedure taylor_series_exp_172_real128 res = horner_171 ( x = x , pre_step = coefficient_172 ) end procedure taylor_series_exp_172_real128 module procedure taylor_series_exp_173_real128 res = horner_172 ( x = x , pre_step = coefficient_173 ) end procedure taylor_series_exp_173_real128 module procedure taylor_series_exp_174_real128 res = horner_173 ( x = x , pre_step = coefficient_174 ) end procedure taylor_series_exp_174_real128 module procedure taylor_series_exp_175_real128 res = horner_174 ( x = x , pre_step = coefficient_175 ) end procedure taylor_series_exp_175_real128 module procedure taylor_series_exp_176_real128 res = horner_175 ( x = x , pre_step = coefficient_176 ) end procedure taylor_series_exp_176_real128 module procedure taylor_series_exp_177_real128 res = horner_176 ( x = x , pre_step = coefficient_177 ) end procedure taylor_series_exp_177_real128 real ( real128 ) elemental function horner_000 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_000 = pre_step * x + coefficient_000 end function real ( real128 ) elemental function horner_001 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_001 = horner_000 ( x = x , pre_step = ( pre_step * x + coefficient_001 ) ) end function real ( real128 ) elemental function horner_002 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_002 = horner_001 ( x = x , pre_step = ( pre_step * x + coefficient_002 ) ) end function real ( real128 ) elemental function horner_003 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_003 = horner_002 ( x = x , pre_step = ( pre_step * x + coefficient_003 ) ) end function real ( real128 ) elemental function horner_004 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_004 = horner_003 ( x = x , pre_step = ( pre_step * x + coefficient_004 ) ) end function real ( real128 ) elemental function horner_005 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_005 = horner_004 ( x = x , pre_step = ( pre_step * x + coefficient_005 ) ) end function real ( real128 ) elemental function horner_006 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_006 = horner_005 ( x = x , pre_step = ( pre_step * x + coefficient_006 ) ) end function real ( real128 ) elemental function horner_007 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_007 = horner_006 ( x = x , pre_step = ( pre_step * x + coefficient_007 ) ) end function real ( real128 ) elemental function horner_008 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_008 = horner_007 ( x = x , pre_step = ( pre_step * x + coefficient_008 ) ) end function real ( real128 ) elemental function horner_009 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_009 = horner_008 ( x = x , pre_step = ( pre_step * x + coefficient_009 ) ) end function real ( real128 ) elemental function horner_010 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_010 = horner_009 ( x = x , pre_step = ( pre_step * x + coefficient_010 ) ) end function real ( real128 ) elemental function horner_011 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_011 = horner_010 ( x = x , pre_step = ( pre_step * x + coefficient_011 ) ) end function real ( real128 ) elemental function horner_012 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_012 = horner_011 ( x = x , pre_step = ( pre_step * x + coefficient_012 ) ) end function real ( real128 ) elemental function horner_013 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_013 = horner_012 ( x = x , pre_step = ( pre_step * x + coefficient_013 ) ) end function real ( real128 ) elemental function horner_014 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_014 = horner_013 ( x = x , pre_step = ( pre_step * x + coefficient_014 ) ) end function real ( real128 ) elemental function horner_015 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_015 = horner_014 ( x = x , pre_step = ( pre_step * x + coefficient_015 ) ) end function real ( real128 ) elemental function horner_016 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_016 = horner_015 ( x = x , pre_step = ( pre_step * x + coefficient_016 ) ) end function real ( real128 ) elemental function horner_017 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_017 = horner_016 ( x = x , pre_step = ( pre_step * x + coefficient_017 ) ) end function real ( real128 ) elemental function horner_018 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_018 = horner_017 ( x = x , pre_step = ( pre_step * x + coefficient_018 ) ) end function real ( real128 ) elemental function horner_019 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_019 = horner_018 ( x = x , pre_step = ( pre_step * x + coefficient_019 ) ) end function real ( real128 ) elemental function horner_020 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_020 = horner_019 ( x = x , pre_step = ( pre_step * x + coefficient_020 ) ) end function real ( real128 ) elemental function horner_021 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_021 = horner_020 ( x = x , pre_step = ( pre_step * x + coefficient_021 ) ) end function real ( real128 ) elemental function horner_022 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_022 = horner_021 ( x = x , pre_step = ( pre_step * x + coefficient_022 ) ) end function real ( real128 ) elemental function horner_023 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_023 = horner_022 ( x = x , pre_step = ( pre_step * x + coefficient_023 ) ) end function real ( real128 ) elemental function horner_024 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_024 = horner_023 ( x = x , pre_step = ( pre_step * x + coefficient_024 ) ) end function real ( real128 ) elemental function horner_025 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_025 = horner_024 ( x = x , pre_step = ( pre_step * x + coefficient_025 ) ) end function real ( real128 ) elemental function horner_026 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_026 = horner_025 ( x = x , pre_step = ( pre_step * x + coefficient_026 ) ) end function real ( real128 ) elemental function horner_027 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_027 = horner_026 ( x = x , pre_step = ( pre_step * x + coefficient_027 ) ) end function real ( real128 ) elemental function horner_028 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_028 = horner_027 ( x = x , pre_step = ( pre_step * x + coefficient_028 ) ) end function real ( real128 ) elemental function horner_029 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_029 = horner_028 ( x = x , pre_step = ( pre_step * x + coefficient_029 ) ) end function real ( real128 ) elemental function horner_030 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_030 = horner_029 ( x = x , pre_step = ( pre_step * x + coefficient_030 ) ) end function real ( real128 ) elemental function horner_031 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_031 = horner_030 ( x = x , pre_step = ( pre_step * x + coefficient_031 ) ) end function real ( real128 ) elemental function horner_032 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_032 = horner_031 ( x = x , pre_step = ( pre_step * x + coefficient_032 ) ) end function real ( real128 ) elemental function horner_033 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_033 = horner_032 ( x = x , pre_step = ( pre_step * x + coefficient_033 ) ) end function real ( real128 ) elemental function horner_034 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_034 = horner_033 ( x = x , pre_step = ( pre_step * x + coefficient_034 ) ) end function real ( real128 ) elemental function horner_035 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_035 = horner_034 ( x = x , pre_step = ( pre_step * x + coefficient_035 ) ) end function real ( real128 ) elemental function horner_036 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_036 = horner_035 ( x = x , pre_step = ( pre_step * x + coefficient_036 ) ) end function real ( real128 ) elemental function horner_037 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_037 = horner_036 ( x = x , pre_step = ( pre_step * x + coefficient_037 ) ) end function real ( real128 ) elemental function horner_038 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_038 = horner_037 ( x = x , pre_step = ( pre_step * x + coefficient_038 ) ) end function real ( real128 ) elemental function horner_039 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_039 = horner_038 ( x = x , pre_step = ( pre_step * x + coefficient_039 ) ) end function real ( real128 ) elemental function horner_040 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_040 = horner_039 ( x = x , pre_step = ( pre_step * x + coefficient_040 ) ) end function real ( real128 ) elemental function horner_041 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_041 = horner_040 ( x = x , pre_step = ( pre_step * x + coefficient_041 ) ) end function real ( real128 ) elemental function horner_042 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_042 = horner_041 ( x = x , pre_step = ( pre_step * x + coefficient_042 ) ) end function real ( real128 ) elemental function horner_043 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_043 = horner_042 ( x = x , pre_step = ( pre_step * x + coefficient_043 ) ) end function real ( real128 ) elemental function horner_044 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_044 = horner_043 ( x = x , pre_step = ( pre_step * x + coefficient_044 ) ) end function real ( real128 ) elemental function horner_045 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_045 = horner_044 ( x = x , pre_step = ( pre_step * x + coefficient_045 ) ) end function real ( real128 ) elemental function horner_046 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_046 = horner_045 ( x = x , pre_step = ( pre_step * x + coefficient_046 ) ) end function real ( real128 ) elemental function horner_047 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_047 = horner_046 ( x = x , pre_step = ( pre_step * x + coefficient_047 ) ) end function real ( real128 ) elemental function horner_048 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_048 = horner_047 ( x = x , pre_step = ( pre_step * x + coefficient_048 ) ) end function real ( real128 ) elemental function horner_049 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_049 = horner_048 ( x = x , pre_step = ( pre_step * x + coefficient_049 ) ) end function real ( real128 ) elemental function horner_050 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_050 = horner_049 ( x = x , pre_step = ( pre_step * x + coefficient_050 ) ) end function real ( real128 ) elemental function horner_051 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_051 = horner_050 ( x = x , pre_step = ( pre_step * x + coefficient_051 ) ) end function real ( real128 ) elemental function horner_052 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_052 = horner_051 ( x = x , pre_step = ( pre_step * x + coefficient_052 ) ) end function real ( real128 ) elemental function horner_053 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_053 = horner_052 ( x = x , pre_step = ( pre_step * x + coefficient_053 ) ) end function real ( real128 ) elemental function horner_054 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_054 = horner_053 ( x = x , pre_step = ( pre_step * x + coefficient_054 ) ) end function real ( real128 ) elemental function horner_055 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_055 = horner_054 ( x = x , pre_step = ( pre_step * x + coefficient_055 ) ) end function real ( real128 ) elemental function horner_056 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_056 = horner_055 ( x = x , pre_step = ( pre_step * x + coefficient_056 ) ) end function real ( real128 ) elemental function horner_057 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_057 = horner_056 ( x = x , pre_step = ( pre_step * x + coefficient_057 ) ) end function real ( real128 ) elemental function horner_058 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_058 = horner_057 ( x = x , pre_step = ( pre_step * x + coefficient_058 ) ) end function real ( real128 ) elemental function horner_059 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_059 = horner_058 ( x = x , pre_step = ( pre_step * x + coefficient_059 ) ) end function real ( real128 ) elemental function horner_060 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_060 = horner_059 ( x = x , pre_step = ( pre_step * x + coefficient_060 ) ) end function real ( real128 ) elemental function horner_061 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_061 = horner_060 ( x = x , pre_step = ( pre_step * x + coefficient_061 ) ) end function real ( real128 ) elemental function horner_062 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_062 = horner_061 ( x = x , pre_step = ( pre_step * x + coefficient_062 ) ) end function real ( real128 ) elemental function horner_063 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_063 = horner_062 ( x = x , pre_step = ( pre_step * x + coefficient_063 ) ) end function real ( real128 ) elemental function horner_064 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_064 = horner_063 ( x = x , pre_step = ( pre_step * x + coefficient_064 ) ) end function real ( real128 ) elemental function horner_065 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_065 = horner_064 ( x = x , pre_step = ( pre_step * x + coefficient_065 ) ) end function real ( real128 ) elemental function horner_066 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_066 = horner_065 ( x = x , pre_step = ( pre_step * x + coefficient_066 ) ) end function real ( real128 ) elemental function horner_067 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_067 = horner_066 ( x = x , pre_step = ( pre_step * x + coefficient_067 ) ) end function real ( real128 ) elemental function horner_068 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_068 = horner_067 ( x = x , pre_step = ( pre_step * x + coefficient_068 ) ) end function real ( real128 ) elemental function horner_069 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_069 = horner_068 ( x = x , pre_step = ( pre_step * x + coefficient_069 ) ) end function real ( real128 ) elemental function horner_070 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_070 = horner_069 ( x = x , pre_step = ( pre_step * x + coefficient_070 ) ) end function real ( real128 ) elemental function horner_071 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_071 = horner_070 ( x = x , pre_step = ( pre_step * x + coefficient_071 ) ) end function real ( real128 ) elemental function horner_072 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_072 = horner_071 ( x = x , pre_step = ( pre_step * x + coefficient_072 ) ) end function real ( real128 ) elemental function horner_073 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_073 = horner_072 ( x = x , pre_step = ( pre_step * x + coefficient_073 ) ) end function real ( real128 ) elemental function horner_074 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_074 = horner_073 ( x = x , pre_step = ( pre_step * x + coefficient_074 ) ) end function real ( real128 ) elemental function horner_075 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_075 = horner_074 ( x = x , pre_step = ( pre_step * x + coefficient_075 ) ) end function real ( real128 ) elemental function horner_076 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_076 = horner_075 ( x = x , pre_step = ( pre_step * x + coefficient_076 ) ) end function real ( real128 ) elemental function horner_077 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_077 = horner_076 ( x = x , pre_step = ( pre_step * x + coefficient_077 ) ) end function real ( real128 ) elemental function horner_078 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_078 = horner_077 ( x = x , pre_step = ( pre_step * x + coefficient_078 ) ) end function real ( real128 ) elemental function horner_079 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_079 = horner_078 ( x = x , pre_step = ( pre_step * x + coefficient_079 ) ) end function real ( real128 ) elemental function horner_080 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_080 = horner_079 ( x = x , pre_step = ( pre_step * x + coefficient_080 ) ) end function real ( real128 ) elemental function horner_081 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_081 = horner_080 ( x = x , pre_step = ( pre_step * x + coefficient_081 ) ) end function real ( real128 ) elemental function horner_082 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_082 = horner_081 ( x = x , pre_step = ( pre_step * x + coefficient_082 ) ) end function real ( real128 ) elemental function horner_083 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_083 = horner_082 ( x = x , pre_step = ( pre_step * x + coefficient_083 ) ) end function real ( real128 ) elemental function horner_084 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_084 = horner_083 ( x = x , pre_step = ( pre_step * x + coefficient_084 ) ) end function real ( real128 ) elemental function horner_085 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_085 = horner_084 ( x = x , pre_step = ( pre_step * x + coefficient_085 ) ) end function real ( real128 ) elemental function horner_086 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_086 = horner_085 ( x = x , pre_step = ( pre_step * x + coefficient_086 ) ) end function real ( real128 ) elemental function horner_087 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_087 = horner_086 ( x = x , pre_step = ( pre_step * x + coefficient_087 ) ) end function real ( real128 ) elemental function horner_088 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_088 = horner_087 ( x = x , pre_step = ( pre_step * x + coefficient_088 ) ) end function real ( real128 ) elemental function horner_089 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_089 = horner_088 ( x = x , pre_step = ( pre_step * x + coefficient_089 ) ) end function real ( real128 ) elemental function horner_090 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_090 = horner_089 ( x = x , pre_step = ( pre_step * x + coefficient_090 ) ) end function real ( real128 ) elemental function horner_091 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_091 = horner_090 ( x = x , pre_step = ( pre_step * x + coefficient_091 ) ) end function real ( real128 ) elemental function horner_092 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_092 = horner_091 ( x = x , pre_step = ( pre_step * x + coefficient_092 ) ) end function real ( real128 ) elemental function horner_093 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_093 = horner_092 ( x = x , pre_step = ( pre_step * x + coefficient_093 ) ) end function real ( real128 ) elemental function horner_094 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_094 = horner_093 ( x = x , pre_step = ( pre_step * x + coefficient_094 ) ) end function real ( real128 ) elemental function horner_095 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_095 = horner_094 ( x = x , pre_step = ( pre_step * x + coefficient_095 ) ) end function real ( real128 ) elemental function horner_096 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_096 = horner_095 ( x = x , pre_step = ( pre_step * x + coefficient_096 ) ) end function real ( real128 ) elemental function horner_097 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_097 = horner_096 ( x = x , pre_step = ( pre_step * x + coefficient_097 ) ) end function real ( real128 ) elemental function horner_098 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_098 = horner_097 ( x = x , pre_step = ( pre_step * x + coefficient_098 ) ) end function real ( real128 ) elemental function horner_099 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_099 = horner_098 ( x = x , pre_step = ( pre_step * x + coefficient_099 ) ) end function real ( real128 ) elemental function horner_100 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_100 = horner_099 ( x = x , pre_step = ( pre_step * x + coefficient_100 ) ) end function real ( real128 ) elemental function horner_101 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_101 = horner_100 ( x = x , pre_step = ( pre_step * x + coefficient_101 ) ) end function real ( real128 ) elemental function horner_102 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_102 = horner_101 ( x = x , pre_step = ( pre_step * x + coefficient_102 ) ) end function real ( real128 ) elemental function horner_103 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_103 = horner_102 ( x = x , pre_step = ( pre_step * x + coefficient_103 ) ) end function real ( real128 ) elemental function horner_104 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_104 = horner_103 ( x = x , pre_step = ( pre_step * x + coefficient_104 ) ) end function real ( real128 ) elemental function horner_105 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_105 = horner_104 ( x = x , pre_step = ( pre_step * x + coefficient_105 ) ) end function real ( real128 ) elemental function horner_106 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_106 = horner_105 ( x = x , pre_step = ( pre_step * x + coefficient_106 ) ) end function real ( real128 ) elemental function horner_107 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_107 = horner_106 ( x = x , pre_step = ( pre_step * x + coefficient_107 ) ) end function real ( real128 ) elemental function horner_108 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_108 = horner_107 ( x = x , pre_step = ( pre_step * x + coefficient_108 ) ) end function real ( real128 ) elemental function horner_109 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_109 = horner_108 ( x = x , pre_step = ( pre_step * x + coefficient_109 ) ) end function real ( real128 ) elemental function horner_110 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_110 = horner_109 ( x = x , pre_step = ( pre_step * x + coefficient_110 ) ) end function real ( real128 ) elemental function horner_111 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_111 = horner_110 ( x = x , pre_step = ( pre_step * x + coefficient_111 ) ) end function real ( real128 ) elemental function horner_112 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_112 = horner_111 ( x = x , pre_step = ( pre_step * x + coefficient_112 ) ) end function real ( real128 ) elemental function horner_113 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_113 = horner_112 ( x = x , pre_step = ( pre_step * x + coefficient_113 ) ) end function real ( real128 ) elemental function horner_114 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_114 = horner_113 ( x = x , pre_step = ( pre_step * x + coefficient_114 ) ) end function real ( real128 ) elemental function horner_115 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_115 = horner_114 ( x = x , pre_step = ( pre_step * x + coefficient_115 ) ) end function real ( real128 ) elemental function horner_116 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_116 = horner_115 ( x = x , pre_step = ( pre_step * x + coefficient_116 ) ) end function real ( real128 ) elemental function horner_117 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_117 = horner_116 ( x = x , pre_step = ( pre_step * x + coefficient_117 ) ) end function real ( real128 ) elemental function horner_118 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_118 = horner_117 ( x = x , pre_step = ( pre_step * x + coefficient_118 ) ) end function real ( real128 ) elemental function horner_119 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_119 = horner_118 ( x = x , pre_step = ( pre_step * x + coefficient_119 ) ) end function real ( real128 ) elemental function horner_120 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_120 = horner_119 ( x = x , pre_step = ( pre_step * x + coefficient_120 ) ) end function real ( real128 ) elemental function horner_121 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_121 = horner_120 ( x = x , pre_step = ( pre_step * x + coefficient_121 ) ) end function real ( real128 ) elemental function horner_122 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_122 = horner_121 ( x = x , pre_step = ( pre_step * x + coefficient_122 ) ) end function real ( real128 ) elemental function horner_123 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_123 = horner_122 ( x = x , pre_step = ( pre_step * x + coefficient_123 ) ) end function real ( real128 ) elemental function horner_124 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_124 = horner_123 ( x = x , pre_step = ( pre_step * x + coefficient_124 ) ) end function real ( real128 ) elemental function horner_125 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_125 = horner_124 ( x = x , pre_step = ( pre_step * x + coefficient_125 ) ) end function real ( real128 ) elemental function horner_126 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_126 = horner_125 ( x = x , pre_step = ( pre_step * x + coefficient_126 ) ) end function real ( real128 ) elemental function horner_127 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_127 = horner_126 ( x = x , pre_step = ( pre_step * x + coefficient_127 ) ) end function real ( real128 ) elemental function horner_128 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_128 = horner_127 ( x = x , pre_step = ( pre_step * x + coefficient_128 ) ) end function real ( real128 ) elemental function horner_129 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_129 = horner_128 ( x = x , pre_step = ( pre_step * x + coefficient_129 ) ) end function real ( real128 ) elemental function horner_130 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_130 = horner_129 ( x = x , pre_step = ( pre_step * x + coefficient_130 ) ) end function real ( real128 ) elemental function horner_131 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_131 = horner_130 ( x = x , pre_step = ( pre_step * x + coefficient_131 ) ) end function real ( real128 ) elemental function horner_132 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_132 = horner_131 ( x = x , pre_step = ( pre_step * x + coefficient_132 ) ) end function real ( real128 ) elemental function horner_133 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_133 = horner_132 ( x = x , pre_step = ( pre_step * x + coefficient_133 ) ) end function real ( real128 ) elemental function horner_134 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_134 = horner_133 ( x = x , pre_step = ( pre_step * x + coefficient_134 ) ) end function real ( real128 ) elemental function horner_135 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_135 = horner_134 ( x = x , pre_step = ( pre_step * x + coefficient_135 ) ) end function real ( real128 ) elemental function horner_136 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_136 = horner_135 ( x = x , pre_step = ( pre_step * x + coefficient_136 ) ) end function real ( real128 ) elemental function horner_137 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_137 = horner_136 ( x = x , pre_step = ( pre_step * x + coefficient_137 ) ) end function real ( real128 ) elemental function horner_138 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_138 = horner_137 ( x = x , pre_step = ( pre_step * x + coefficient_138 ) ) end function real ( real128 ) elemental function horner_139 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_139 = horner_138 ( x = x , pre_step = ( pre_step * x + coefficient_139 ) ) end function real ( real128 ) elemental function horner_140 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_140 = horner_139 ( x = x , pre_step = ( pre_step * x + coefficient_140 ) ) end function real ( real128 ) elemental function horner_141 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_141 = horner_140 ( x = x , pre_step = ( pre_step * x + coefficient_141 ) ) end function real ( real128 ) elemental function horner_142 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_142 = horner_141 ( x = x , pre_step = ( pre_step * x + coefficient_142 ) ) end function real ( real128 ) elemental function horner_143 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_143 = horner_142 ( x = x , pre_step = ( pre_step * x + coefficient_143 ) ) end function real ( real128 ) elemental function horner_144 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_144 = horner_143 ( x = x , pre_step = ( pre_step * x + coefficient_144 ) ) end function real ( real128 ) elemental function horner_145 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_145 = horner_144 ( x = x , pre_step = ( pre_step * x + coefficient_145 ) ) end function real ( real128 ) elemental function horner_146 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_146 = horner_145 ( x = x , pre_step = ( pre_step * x + coefficient_146 ) ) end function real ( real128 ) elemental function horner_147 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_147 = horner_146 ( x = x , pre_step = ( pre_step * x + coefficient_147 ) ) end function real ( real128 ) elemental function horner_148 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_148 = horner_147 ( x = x , pre_step = ( pre_step * x + coefficient_148 ) ) end function real ( real128 ) elemental function horner_149 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_149 = horner_148 ( x = x , pre_step = ( pre_step * x + coefficient_149 ) ) end function real ( real128 ) elemental function horner_150 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_150 = horner_149 ( x = x , pre_step = ( pre_step * x + coefficient_150 ) ) end function real ( real128 ) elemental function horner_151 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_151 = horner_150 ( x = x , pre_step = ( pre_step * x + coefficient_151 ) ) end function real ( real128 ) elemental function horner_152 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_152 = horner_151 ( x = x , pre_step = ( pre_step * x + coefficient_152 ) ) end function real ( real128 ) elemental function horner_153 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_153 = horner_152 ( x = x , pre_step = ( pre_step * x + coefficient_153 ) ) end function real ( real128 ) elemental function horner_154 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_154 = horner_153 ( x = x , pre_step = ( pre_step * x + coefficient_154 ) ) end function real ( real128 ) elemental function horner_155 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_155 = horner_154 ( x = x , pre_step = ( pre_step * x + coefficient_155 ) ) end function real ( real128 ) elemental function horner_156 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_156 = horner_155 ( x = x , pre_step = ( pre_step * x + coefficient_156 ) ) end function real ( real128 ) elemental function horner_157 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_157 = horner_156 ( x = x , pre_step = ( pre_step * x + coefficient_157 ) ) end function real ( real128 ) elemental function horner_158 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_158 = horner_157 ( x = x , pre_step = ( pre_step * x + coefficient_158 ) ) end function real ( real128 ) elemental function horner_159 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_159 = horner_158 ( x = x , pre_step = ( pre_step * x + coefficient_159 ) ) end function real ( real128 ) elemental function horner_160 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_160 = horner_159 ( x = x , pre_step = ( pre_step * x + coefficient_160 ) ) end function real ( real128 ) elemental function horner_161 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_161 = horner_160 ( x = x , pre_step = ( pre_step * x + coefficient_161 ) ) end function real ( real128 ) elemental function horner_162 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_162 = horner_161 ( x = x , pre_step = ( pre_step * x + coefficient_162 ) ) end function real ( real128 ) elemental function horner_163 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_163 = horner_162 ( x = x , pre_step = ( pre_step * x + coefficient_163 ) ) end function real ( real128 ) elemental function horner_164 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_164 = horner_163 ( x = x , pre_step = ( pre_step * x + coefficient_164 ) ) end function real ( real128 ) elemental function horner_165 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_165 = horner_164 ( x = x , pre_step = ( pre_step * x + coefficient_165 ) ) end function real ( real128 ) elemental function horner_166 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_166 = horner_165 ( x = x , pre_step = ( pre_step * x + coefficient_166 ) ) end function real ( real128 ) elemental function horner_167 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_167 = horner_166 ( x = x , pre_step = ( pre_step * x + coefficient_167 ) ) end function real ( real128 ) elemental function horner_168 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_168 = horner_167 ( x = x , pre_step = ( pre_step * x + coefficient_168 ) ) end function real ( real128 ) elemental function horner_169 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_169 = horner_168 ( x = x , pre_step = ( pre_step * x + coefficient_169 ) ) end function real ( real128 ) elemental function horner_170 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_170 = horner_169 ( x = x , pre_step = ( pre_step * x + coefficient_170 ) ) end function real ( real128 ) elemental function horner_171 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_171 = horner_170 ( x = x , pre_step = ( pre_step * x + coefficient_171 ) ) end function real ( real128 ) elemental function horner_172 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_172 = horner_171 ( x = x , pre_step = ( pre_step * x + coefficient_172 ) ) end function real ( real128 ) elemental function horner_173 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_173 = horner_172 ( x = x , pre_step = ( pre_step * x + coefficient_173 ) ) end function real ( real128 ) elemental function horner_174 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_174 = horner_173 ( x = x , pre_step = ( pre_step * x + coefficient_174 ) ) end function real ( real128 ) elemental function horner_175 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_175 = horner_174 ( x = x , pre_step = ( pre_step * x + coefficient_175 ) ) end function real ( real128 ) elemental function horner_176 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_176 = horner_175 ( x = x , pre_step = ( pre_step * x + coefficient_176 ) ) end function end submodule imp_taylor_series_exp_real128","tags":"","url":"sourcefile/main_submodule_exp_real128.f90.html"},{"title":"inv_factorial_real128.f90 – taylor_series_fortran","text":"Source Code module inv_factorial_real128 use , intrinsic :: iso_fortran_env , only : real128 implicit none private real ( real128 ), parameter , public :: inv_factorial_000 = 1.0_real128 real ( real128 ), parameter , public :: inv_factorial_001 = inv_factorial_000 / 1 real ( real128 ), parameter , public :: inv_factorial_002 = inv_factorial_001 / 2 real ( real128 ), parameter , public :: inv_factorial_003 = inv_factorial_002 / 3 real ( real128 ), parameter , public :: inv_factorial_004 = inv_factorial_003 / 4 real ( real128 ), parameter , public :: inv_factorial_005 = inv_factorial_004 / 5 real ( real128 ), parameter , public :: inv_factorial_006 = inv_factorial_005 / 6 real ( real128 ), parameter , public :: inv_factorial_007 = inv_factorial_006 / 7 real ( real128 ), parameter , public :: inv_factorial_008 = inv_factorial_007 / 8 real ( real128 ), parameter , public :: inv_factorial_009 = inv_factorial_008 / 9 real ( real128 ), parameter , public :: inv_factorial_010 = inv_factorial_009 / 10 real ( real128 ), parameter , public :: inv_factorial_011 = inv_factorial_010 / 11 real ( real128 ), parameter , public :: inv_factorial_012 = inv_factorial_011 / 12 real ( real128 ), parameter , public :: inv_factorial_013 = inv_factorial_012 / 13 real ( real128 ), parameter , public :: inv_factorial_014 = inv_factorial_013 / 14 real ( real128 ), parameter , public :: inv_factorial_015 = inv_factorial_014 / 15 real ( real128 ), parameter , public :: inv_factorial_016 = inv_factorial_015 / 16 real ( real128 ), parameter , public :: inv_factorial_017 = inv_factorial_016 / 17 real ( real128 ), parameter , public :: inv_factorial_018 = inv_factorial_017 / 18 real ( real128 ), parameter , public :: inv_factorial_019 = inv_factorial_018 / 19 real ( real128 ), parameter , public :: inv_factorial_020 = inv_factorial_019 / 20 real ( real128 ), parameter , public :: inv_factorial_021 = inv_factorial_020 / 21 real ( real128 ), parameter , public :: inv_factorial_022 = inv_factorial_021 / 22 real ( real128 ), parameter , public :: inv_factorial_023 = inv_factorial_022 / 23 real ( real128 ), parameter , public :: inv_factorial_024 = inv_factorial_023 / 24 real ( real128 ), parameter , public :: inv_factorial_025 = inv_factorial_024 / 25 real ( real128 ), parameter , public :: inv_factorial_026 = inv_factorial_025 / 26 real ( real128 ), parameter , public :: inv_factorial_027 = inv_factorial_026 / 27 real ( real128 ), parameter , public :: inv_factorial_028 = inv_factorial_027 / 28 real ( real128 ), parameter , public :: inv_factorial_029 = inv_factorial_028 / 29 real ( real128 ), parameter , public :: inv_factorial_030 = inv_factorial_029 / 30 real ( real128 ), parameter , public :: inv_factorial_031 = inv_factorial_030 / 31 real ( real128 ), parameter , public :: inv_factorial_032 = inv_factorial_031 / 32 real ( real128 ), parameter , public :: inv_factorial_033 = inv_factorial_032 / 33 real ( real128 ), parameter , public :: inv_factorial_034 = inv_factorial_033 / 34 real ( real128 ), parameter , public :: inv_factorial_035 = inv_factorial_034 / 35 real ( real128 ), parameter , public :: inv_factorial_036 = inv_factorial_035 / 36 real ( real128 ), parameter , public :: inv_factorial_037 = inv_factorial_036 / 37 real ( real128 ), parameter , public :: inv_factorial_038 = inv_factorial_037 / 38 real ( real128 ), parameter , public :: inv_factorial_039 = inv_factorial_038 / 39 real ( real128 ), parameter , public :: inv_factorial_040 = inv_factorial_039 / 40 real ( real128 ), parameter , public :: inv_factorial_041 = inv_factorial_040 / 41 real ( real128 ), parameter , public :: inv_factorial_042 = inv_factorial_041 / 42 real ( real128 ), parameter , public :: inv_factorial_043 = inv_factorial_042 / 43 real ( real128 ), parameter , public :: inv_factorial_044 = inv_factorial_043 / 44 real ( real128 ), parameter , public :: inv_factorial_045 = inv_factorial_044 / 45 real ( real128 ), parameter , public :: inv_factorial_046 = inv_factorial_045 / 46 real ( real128 ), parameter , public :: inv_factorial_047 = inv_factorial_046 / 47 real ( real128 ), parameter , public :: inv_factorial_048 = inv_factorial_047 / 48 real ( real128 ), parameter , public :: inv_factorial_049 = inv_factorial_048 / 49 real ( real128 ), parameter , public :: inv_factorial_050 = inv_factorial_049 / 50 real ( real128 ), parameter , public :: inv_factorial_051 = inv_factorial_050 / 51 real ( real128 ), parameter , public :: inv_factorial_052 = inv_factorial_051 / 52 real ( real128 ), parameter , public :: inv_factorial_053 = inv_factorial_052 / 53 real ( real128 ), parameter , public :: inv_factorial_054 = inv_factorial_053 / 54 real ( real128 ), parameter , public :: inv_factorial_055 = inv_factorial_054 / 55 real ( real128 ), parameter , public :: inv_factorial_056 = inv_factorial_055 / 56 real ( real128 ), parameter , public :: inv_factorial_057 = inv_factorial_056 / 57 real ( real128 ), parameter , public :: inv_factorial_058 = inv_factorial_057 / 58 real ( real128 ), parameter , public :: inv_factorial_059 = inv_factorial_058 / 59 real ( real128 ), parameter , public :: inv_factorial_060 = inv_factorial_059 / 60 real ( real128 ), parameter , public :: inv_factorial_061 = inv_factorial_060 / 61 real ( real128 ), parameter , public :: inv_factorial_062 = inv_factorial_061 / 62 real ( real128 ), parameter , public :: inv_factorial_063 = inv_factorial_062 / 63 real ( real128 ), parameter , public :: inv_factorial_064 = inv_factorial_063 / 64 real ( real128 ), parameter , public :: inv_factorial_065 = inv_factorial_064 / 65 real ( real128 ), parameter , public :: inv_factorial_066 = inv_factorial_065 / 66 real ( real128 ), parameter , public :: inv_factorial_067 = inv_factorial_066 / 67 real ( real128 ), parameter , public :: inv_factorial_068 = inv_factorial_067 / 68 real ( real128 ), parameter , public :: inv_factorial_069 = inv_factorial_068 / 69 real ( real128 ), parameter , public :: inv_factorial_070 = inv_factorial_069 / 70 real ( real128 ), parameter , public :: inv_factorial_071 = inv_factorial_070 / 71 real ( real128 ), parameter , public :: inv_factorial_072 = inv_factorial_071 / 72 real ( real128 ), parameter , public :: inv_factorial_073 = inv_factorial_072 / 73 real ( real128 ), parameter , public :: inv_factorial_074 = inv_factorial_073 / 74 real ( real128 ), parameter , public :: inv_factorial_075 = inv_factorial_074 / 75 real ( real128 ), parameter , public :: inv_factorial_076 = inv_factorial_075 / 76 real ( real128 ), parameter , public :: inv_factorial_077 = inv_factorial_076 / 77 real ( real128 ), parameter , public :: inv_factorial_078 = inv_factorial_077 / 78 real ( real128 ), parameter , public :: inv_factorial_079 = inv_factorial_078 / 79 real ( real128 ), parameter , public :: inv_factorial_080 = inv_factorial_079 / 80 real ( real128 ), parameter , public :: inv_factorial_081 = inv_factorial_080 / 81 real ( real128 ), parameter , public :: inv_factorial_082 = inv_factorial_081 / 82 real ( real128 ), parameter , public :: inv_factorial_083 = inv_factorial_082 / 83 real ( real128 ), parameter , public :: inv_factorial_084 = inv_factorial_083 / 84 real ( real128 ), parameter , public :: inv_factorial_085 = inv_factorial_084 / 85 real ( real128 ), parameter , public :: inv_factorial_086 = inv_factorial_085 / 86 real ( real128 ), parameter , public :: inv_factorial_087 = inv_factorial_086 / 87 real ( real128 ), parameter , public :: inv_factorial_088 = inv_factorial_087 / 88 real ( real128 ), parameter , public :: inv_factorial_089 = inv_factorial_088 / 89 real ( real128 ), parameter , public :: inv_factorial_090 = inv_factorial_089 / 90 real ( real128 ), parameter , public :: inv_factorial_091 = inv_factorial_090 / 91 real ( real128 ), parameter , public :: inv_factorial_092 = inv_factorial_091 / 92 real ( real128 ), parameter , public :: inv_factorial_093 = inv_factorial_092 / 93 real ( real128 ), parameter , public :: inv_factorial_094 = inv_factorial_093 / 94 real ( real128 ), parameter , public :: inv_factorial_095 = inv_factorial_094 / 95 real ( real128 ), parameter , public :: inv_factorial_096 = inv_factorial_095 / 96 real ( real128 ), parameter , public :: inv_factorial_097 = inv_factorial_096 / 97 real ( real128 ), parameter , public :: inv_factorial_098 = inv_factorial_097 / 98 real ( real128 ), parameter , public :: inv_factorial_099 = inv_factorial_098 / 99 real ( real128 ), parameter , public :: inv_factorial_100 = inv_factorial_099 / 100 real ( real128 ), parameter , public :: inv_factorial_101 = inv_factorial_100 / 101 real ( real128 ), parameter , public :: inv_factorial_102 = inv_factorial_101 / 102 real ( real128 ), parameter , public :: inv_factorial_103 = inv_factorial_102 / 103 real ( real128 ), parameter , public :: inv_factorial_104 = inv_factorial_103 / 104 real ( real128 ), parameter , public :: inv_factorial_105 = inv_factorial_104 / 105 real ( real128 ), parameter , public :: inv_factorial_106 = inv_factorial_105 / 106 real ( real128 ), parameter , public :: inv_factorial_107 = inv_factorial_106 / 107 real ( real128 ), parameter , public :: inv_factorial_108 = inv_factorial_107 / 108 real ( real128 ), parameter , public :: inv_factorial_109 = inv_factorial_108 / 109 real ( real128 ), parameter , public :: inv_factorial_110 = inv_factorial_109 / 110 real ( real128 ), parameter , public :: inv_factorial_111 = inv_factorial_110 / 111 real ( real128 ), parameter , public :: inv_factorial_112 = inv_factorial_111 / 112 real ( real128 ), parameter , public :: inv_factorial_113 = inv_factorial_112 / 113 real ( real128 ), parameter , public :: inv_factorial_114 = inv_factorial_113 / 114 real ( real128 ), parameter , public :: inv_factorial_115 = inv_factorial_114 / 115 real ( real128 ), parameter , public :: inv_factorial_116 = inv_factorial_115 / 116 real ( real128 ), parameter , public :: inv_factorial_117 = inv_factorial_116 / 117 real ( real128 ), parameter , public :: inv_factorial_118 = inv_factorial_117 / 118 real ( real128 ), parameter , public :: inv_factorial_119 = inv_factorial_118 / 119 real ( real128 ), parameter , public :: inv_factorial_120 = inv_factorial_119 / 120 real ( real128 ), parameter , public :: inv_factorial_121 = inv_factorial_120 / 121 real ( real128 ), parameter , public :: inv_factorial_122 = inv_factorial_121 / 122 real ( real128 ), parameter , public :: inv_factorial_123 = inv_factorial_122 / 123 real ( real128 ), parameter , public :: inv_factorial_124 = inv_factorial_123 / 124 real ( real128 ), parameter , public :: inv_factorial_125 = inv_factorial_124 / 125 real ( real128 ), parameter , public :: inv_factorial_126 = inv_factorial_125 / 126 real ( real128 ), parameter , public :: inv_factorial_127 = inv_factorial_126 / 127 real ( real128 ), parameter , public :: inv_factorial_128 = inv_factorial_127 / 128 real ( real128 ), parameter , public :: inv_factorial_129 = inv_factorial_128 / 129 real ( real128 ), parameter , public :: inv_factorial_130 = inv_factorial_129 / 130 real ( real128 ), parameter , public :: inv_factorial_131 = inv_factorial_130 / 131 real ( real128 ), parameter , public :: inv_factorial_132 = inv_factorial_131 / 132 real ( real128 ), parameter , public :: inv_factorial_133 = inv_factorial_132 / 133 real ( real128 ), parameter , public :: inv_factorial_134 = inv_factorial_133 / 134 real ( real128 ), parameter , public :: inv_factorial_135 = inv_factorial_134 / 135 real ( real128 ), parameter , public :: inv_factorial_136 = inv_factorial_135 / 136 real ( real128 ), parameter , public :: inv_factorial_137 = inv_factorial_136 / 137 real ( real128 ), parameter , public :: inv_factorial_138 = inv_factorial_137 / 138 real ( real128 ), parameter , public :: inv_factorial_139 = inv_factorial_138 / 139 real ( real128 ), parameter , public :: inv_factorial_140 = inv_factorial_139 / 140 real ( real128 ), parameter , public :: inv_factorial_141 = inv_factorial_140 / 141 real ( real128 ), parameter , public :: inv_factorial_142 = inv_factorial_141 / 142 real ( real128 ), parameter , public :: inv_factorial_143 = inv_factorial_142 / 143 real ( real128 ), parameter , public :: inv_factorial_144 = inv_factorial_143 / 144 real ( real128 ), parameter , public :: inv_factorial_145 = inv_factorial_144 / 145 real ( real128 ), parameter , public :: inv_factorial_146 = inv_factorial_145 / 146 real ( real128 ), parameter , public :: inv_factorial_147 = inv_factorial_146 / 147 real ( real128 ), parameter , public :: inv_factorial_148 = inv_factorial_147 / 148 real ( real128 ), parameter , public :: inv_factorial_149 = inv_factorial_148 / 149 real ( real128 ), parameter , public :: inv_factorial_150 = inv_factorial_149 / 150 real ( real128 ), parameter , public :: inv_factorial_151 = inv_factorial_150 / 151 real ( real128 ), parameter , public :: inv_factorial_152 = inv_factorial_151 / 152 real ( real128 ), parameter , public :: inv_factorial_153 = inv_factorial_152 / 153 real ( real128 ), parameter , public :: inv_factorial_154 = inv_factorial_153 / 154 real ( real128 ), parameter , public :: inv_factorial_155 = inv_factorial_154 / 155 real ( real128 ), parameter , public :: inv_factorial_156 = inv_factorial_155 / 156 real ( real128 ), parameter , public :: inv_factorial_157 = inv_factorial_156 / 157 real ( real128 ), parameter , public :: inv_factorial_158 = inv_factorial_157 / 158 real ( real128 ), parameter , public :: inv_factorial_159 = inv_factorial_158 / 159 real ( real128 ), parameter , public :: inv_factorial_160 = inv_factorial_159 / 160 real ( real128 ), parameter , public :: inv_factorial_161 = inv_factorial_160 / 161 real ( real128 ), parameter , public :: inv_factorial_162 = inv_factorial_161 / 162 real ( real128 ), parameter , public :: inv_factorial_163 = inv_factorial_162 / 163 real ( real128 ), parameter , public :: inv_factorial_164 = inv_factorial_163 / 164 real ( real128 ), parameter , public :: inv_factorial_165 = inv_factorial_164 / 165 real ( real128 ), parameter , public :: inv_factorial_166 = inv_factorial_165 / 166 real ( real128 ), parameter , public :: inv_factorial_167 = inv_factorial_166 / 167 real ( real128 ), parameter , public :: inv_factorial_168 = inv_factorial_167 / 168 real ( real128 ), parameter , public :: inv_factorial_169 = inv_factorial_168 / 169 real ( real128 ), parameter , public :: inv_factorial_170 = inv_factorial_169 / 170 real ( real128 ), parameter , public :: inv_factorial_171 = inv_factorial_170 / 171 real ( real128 ), parameter , public :: inv_factorial_172 = inv_factorial_171 / 172 real ( real128 ), parameter , public :: inv_factorial_173 = inv_factorial_172 / 173 real ( real128 ), parameter , public :: inv_factorial_174 = inv_factorial_173 / 174 real ( real128 ), parameter , public :: inv_factorial_175 = inv_factorial_174 / 175 real ( real128 ), parameter , public :: inv_factorial_176 = inv_factorial_175 / 176 real ( real128 ), parameter , public :: inv_factorial_177 = inv_factorial_176 / 177 end module inv_factorial_real128","tags":"","url":"sourcefile/inv_factorial_real128.f90.html"},{"title":"inv_factorial_real64.f90 – taylor_series_fortran","text":"Source Code module inv_factorial_real64 use , intrinsic :: iso_fortran_env , only : real64 implicit none private real ( real64 ), parameter , public :: inv_factorial_000 = 1.0_real64 real ( real64 ), parameter , public :: inv_factorial_001 = inv_factorial_000 / 1 real ( real64 ), parameter , public :: inv_factorial_002 = inv_factorial_001 / 2 real ( real64 ), parameter , public :: inv_factorial_003 = inv_factorial_002 / 3 real ( real64 ), parameter , public :: inv_factorial_004 = inv_factorial_003 / 4 real ( real64 ), parameter , public :: inv_factorial_005 = inv_factorial_004 / 5 real ( real64 ), parameter , public :: inv_factorial_006 = inv_factorial_005 / 6 real ( real64 ), parameter , public :: inv_factorial_007 = inv_factorial_006 / 7 real ( real64 ), parameter , public :: inv_factorial_008 = inv_factorial_007 / 8 real ( real64 ), parameter , public :: inv_factorial_009 = inv_factorial_008 / 9 real ( real64 ), parameter , public :: inv_factorial_010 = inv_factorial_009 / 10 real ( real64 ), parameter , public :: inv_factorial_011 = inv_factorial_010 / 11 real ( real64 ), parameter , public :: inv_factorial_012 = inv_factorial_011 / 12 real ( real64 ), parameter , public :: inv_factorial_013 = inv_factorial_012 / 13 real ( real64 ), parameter , public :: inv_factorial_014 = inv_factorial_013 / 14 real ( real64 ), parameter , public :: inv_factorial_015 = inv_factorial_014 / 15 real ( real64 ), parameter , public :: inv_factorial_016 = inv_factorial_015 / 16 real ( real64 ), parameter , public :: inv_factorial_017 = inv_factorial_016 / 17 real ( real64 ), parameter , public :: inv_factorial_018 = inv_factorial_017 / 18 real ( real64 ), parameter , public :: inv_factorial_019 = inv_factorial_018 / 19 real ( real64 ), parameter , public :: inv_factorial_020 = inv_factorial_019 / 20 real ( real64 ), parameter , public :: inv_factorial_021 = inv_factorial_020 / 21 real ( real64 ), parameter , public :: inv_factorial_022 = inv_factorial_021 / 22 real ( real64 ), parameter , public :: inv_factorial_023 = inv_factorial_022 / 23 real ( real64 ), parameter , public :: inv_factorial_024 = inv_factorial_023 / 24 real ( real64 ), parameter , public :: inv_factorial_025 = inv_factorial_024 / 25 real ( real64 ), parameter , public :: inv_factorial_026 = inv_factorial_025 / 26 real ( real64 ), parameter , public :: inv_factorial_027 = inv_factorial_026 / 27 real ( real64 ), parameter , public :: inv_factorial_028 = inv_factorial_027 / 28 real ( real64 ), parameter , public :: inv_factorial_029 = inv_factorial_028 / 29 real ( real64 ), parameter , public :: inv_factorial_030 = inv_factorial_029 / 30 real ( real64 ), parameter , public :: inv_factorial_031 = inv_factorial_030 / 31 real ( real64 ), parameter , public :: inv_factorial_032 = inv_factorial_031 / 32 real ( real64 ), parameter , public :: inv_factorial_033 = inv_factorial_032 / 33 real ( real64 ), parameter , public :: inv_factorial_034 = inv_factorial_033 / 34 real ( real64 ), parameter , public :: inv_factorial_035 = inv_factorial_034 / 35 real ( real64 ), parameter , public :: inv_factorial_036 = inv_factorial_035 / 36 real ( real64 ), parameter , public :: inv_factorial_037 = inv_factorial_036 / 37 real ( real64 ), parameter , public :: inv_factorial_038 = inv_factorial_037 / 38 real ( real64 ), parameter , public :: inv_factorial_039 = inv_factorial_038 / 39 real ( real64 ), parameter , public :: inv_factorial_040 = inv_factorial_039 / 40 real ( real64 ), parameter , public :: inv_factorial_041 = inv_factorial_040 / 41 real ( real64 ), parameter , public :: inv_factorial_042 = inv_factorial_041 / 42 real ( real64 ), parameter , public :: inv_factorial_043 = inv_factorial_042 / 43 real ( real64 ), parameter , public :: inv_factorial_044 = inv_factorial_043 / 44 real ( real64 ), parameter , public :: inv_factorial_045 = inv_factorial_044 / 45 real ( real64 ), parameter , public :: inv_factorial_046 = inv_factorial_045 / 46 real ( real64 ), parameter , public :: inv_factorial_047 = inv_factorial_046 / 47 real ( real64 ), parameter , public :: inv_factorial_048 = inv_factorial_047 / 48 real ( real64 ), parameter , public :: inv_factorial_049 = inv_factorial_048 / 49 real ( real64 ), parameter , public :: inv_factorial_050 = inv_factorial_049 / 50 real ( real64 ), parameter , public :: inv_factorial_051 = inv_factorial_050 / 51 real ( real64 ), parameter , public :: inv_factorial_052 = inv_factorial_051 / 52 real ( real64 ), parameter , public :: inv_factorial_053 = inv_factorial_052 / 53 real ( real64 ), parameter , public :: inv_factorial_054 = inv_factorial_053 / 54 real ( real64 ), parameter , public :: inv_factorial_055 = inv_factorial_054 / 55 real ( real64 ), parameter , public :: inv_factorial_056 = inv_factorial_055 / 56 real ( real64 ), parameter , public :: inv_factorial_057 = inv_factorial_056 / 57 real ( real64 ), parameter , public :: inv_factorial_058 = inv_factorial_057 / 58 real ( real64 ), parameter , public :: inv_factorial_059 = inv_factorial_058 / 59 real ( real64 ), parameter , public :: inv_factorial_060 = inv_factorial_059 / 60 real ( real64 ), parameter , public :: inv_factorial_061 = inv_factorial_060 / 61 real ( real64 ), parameter , public :: inv_factorial_062 = inv_factorial_061 / 62 real ( real64 ), parameter , public :: inv_factorial_063 = inv_factorial_062 / 63 real ( real64 ), parameter , public :: inv_factorial_064 = inv_factorial_063 / 64 real ( real64 ), parameter , public :: inv_factorial_065 = inv_factorial_064 / 65 real ( real64 ), parameter , public :: inv_factorial_066 = inv_factorial_065 / 66 real ( real64 ), parameter , public :: inv_factorial_067 = inv_factorial_066 / 67 real ( real64 ), parameter , public :: inv_factorial_068 = inv_factorial_067 / 68 real ( real64 ), parameter , public :: inv_factorial_069 = inv_factorial_068 / 69 real ( real64 ), parameter , public :: inv_factorial_070 = inv_factorial_069 / 70 real ( real64 ), parameter , public :: inv_factorial_071 = inv_factorial_070 / 71 real ( real64 ), parameter , public :: inv_factorial_072 = inv_factorial_071 / 72 real ( real64 ), parameter , public :: inv_factorial_073 = inv_factorial_072 / 73 real ( real64 ), parameter , public :: inv_factorial_074 = inv_factorial_073 / 74 real ( real64 ), parameter , public :: inv_factorial_075 = inv_factorial_074 / 75 real ( real64 ), parameter , public :: inv_factorial_076 = inv_factorial_075 / 76 real ( real64 ), parameter , public :: inv_factorial_077 = inv_factorial_076 / 77 real ( real64 ), parameter , public :: inv_factorial_078 = inv_factorial_077 / 78 real ( real64 ), parameter , public :: inv_factorial_079 = inv_factorial_078 / 79 real ( real64 ), parameter , public :: inv_factorial_080 = inv_factorial_079 / 80 real ( real64 ), parameter , public :: inv_factorial_081 = inv_factorial_080 / 81 real ( real64 ), parameter , public :: inv_factorial_082 = inv_factorial_081 / 82 real ( real64 ), parameter , public :: inv_factorial_083 = inv_factorial_082 / 83 real ( real64 ), parameter , public :: inv_factorial_084 = inv_factorial_083 / 84 real ( real64 ), parameter , public :: inv_factorial_085 = inv_factorial_084 / 85 real ( real64 ), parameter , public :: inv_factorial_086 = inv_factorial_085 / 86 real ( real64 ), parameter , public :: inv_factorial_087 = inv_factorial_086 / 87 real ( real64 ), parameter , public :: inv_factorial_088 = inv_factorial_087 / 88 real ( real64 ), parameter , public :: inv_factorial_089 = inv_factorial_088 / 89 real ( real64 ), parameter , public :: inv_factorial_090 = inv_factorial_089 / 90 real ( real64 ), parameter , public :: inv_factorial_091 = inv_factorial_090 / 91 real ( real64 ), parameter , public :: inv_factorial_092 = inv_factorial_091 / 92 real ( real64 ), parameter , public :: inv_factorial_093 = inv_factorial_092 / 93 real ( real64 ), parameter , public :: inv_factorial_094 = inv_factorial_093 / 94 real ( real64 ), parameter , public :: inv_factorial_095 = inv_factorial_094 / 95 real ( real64 ), parameter , public :: inv_factorial_096 = inv_factorial_095 / 96 real ( real64 ), parameter , public :: inv_factorial_097 = inv_factorial_096 / 97 real ( real64 ), parameter , public :: inv_factorial_098 = inv_factorial_097 / 98 real ( real64 ), parameter , public :: inv_factorial_099 = inv_factorial_098 / 99 real ( real64 ), parameter , public :: inv_factorial_100 = inv_factorial_099 / 100 real ( real64 ), parameter , public :: inv_factorial_101 = inv_factorial_100 / 101 real ( real64 ), parameter , public :: inv_factorial_102 = inv_factorial_101 / 102 real ( real64 ), parameter , public :: inv_factorial_103 = inv_factorial_102 / 103 real ( real64 ), parameter , public :: inv_factorial_104 = inv_factorial_103 / 104 real ( real64 ), parameter , public :: inv_factorial_105 = inv_factorial_104 / 105 real ( real64 ), parameter , public :: inv_factorial_106 = inv_factorial_105 / 106 real ( real64 ), parameter , public :: inv_factorial_107 = inv_factorial_106 / 107 real ( real64 ), parameter , public :: inv_factorial_108 = inv_factorial_107 / 108 real ( real64 ), parameter , public :: inv_factorial_109 = inv_factorial_108 / 109 real ( real64 ), parameter , public :: inv_factorial_110 = inv_factorial_109 / 110 real ( real64 ), parameter , public :: inv_factorial_111 = inv_factorial_110 / 111 real ( real64 ), parameter , public :: inv_factorial_112 = inv_factorial_111 / 112 real ( real64 ), parameter , public :: inv_factorial_113 = inv_factorial_112 / 113 real ( real64 ), parameter , public :: inv_factorial_114 = inv_factorial_113 / 114 real ( real64 ), parameter , public :: inv_factorial_115 = inv_factorial_114 / 115 real ( real64 ), parameter , public :: inv_factorial_116 = inv_factorial_115 / 116 real ( real64 ), parameter , public :: inv_factorial_117 = inv_factorial_116 / 117 real ( real64 ), parameter , public :: inv_factorial_118 = inv_factorial_117 / 118 real ( real64 ), parameter , public :: inv_factorial_119 = inv_factorial_118 / 119 real ( real64 ), parameter , public :: inv_factorial_120 = inv_factorial_119 / 120 real ( real64 ), parameter , public :: inv_factorial_121 = inv_factorial_120 / 121 real ( real64 ), parameter , public :: inv_factorial_122 = inv_factorial_121 / 122 real ( real64 ), parameter , public :: inv_factorial_123 = inv_factorial_122 / 123 real ( real64 ), parameter , public :: inv_factorial_124 = inv_factorial_123 / 124 real ( real64 ), parameter , public :: inv_factorial_125 = inv_factorial_124 / 125 real ( real64 ), parameter , public :: inv_factorial_126 = inv_factorial_125 / 126 real ( real64 ), parameter , public :: inv_factorial_127 = inv_factorial_126 / 127 real ( real64 ), parameter , public :: inv_factorial_128 = inv_factorial_127 / 128 real ( real64 ), parameter , public :: inv_factorial_129 = inv_factorial_128 / 129 real ( real64 ), parameter , public :: inv_factorial_130 = inv_factorial_129 / 130 real ( real64 ), parameter , public :: inv_factorial_131 = inv_factorial_130 / 131 real ( real64 ), parameter , public :: inv_factorial_132 = inv_factorial_131 / 132 real ( real64 ), parameter , public :: inv_factorial_133 = inv_factorial_132 / 133 real ( real64 ), parameter , public :: inv_factorial_134 = inv_factorial_133 / 134 real ( real64 ), parameter , public :: inv_factorial_135 = inv_factorial_134 / 135 real ( real64 ), parameter , public :: inv_factorial_136 = inv_factorial_135 / 136 real ( real64 ), parameter , public :: inv_factorial_137 = inv_factorial_136 / 137 real ( real64 ), parameter , public :: inv_factorial_138 = inv_factorial_137 / 138 real ( real64 ), parameter , public :: inv_factorial_139 = inv_factorial_138 / 139 real ( real64 ), parameter , public :: inv_factorial_140 = inv_factorial_139 / 140 real ( real64 ), parameter , public :: inv_factorial_141 = inv_factorial_140 / 141 real ( real64 ), parameter , public :: inv_factorial_142 = inv_factorial_141 / 142 real ( real64 ), parameter , public :: inv_factorial_143 = inv_factorial_142 / 143 real ( real64 ), parameter , public :: inv_factorial_144 = inv_factorial_143 / 144 real ( real64 ), parameter , public :: inv_factorial_145 = inv_factorial_144 / 145 real ( real64 ), parameter , public :: inv_factorial_146 = inv_factorial_145 / 146 real ( real64 ), parameter , public :: inv_factorial_147 = inv_factorial_146 / 147 real ( real64 ), parameter , public :: inv_factorial_148 = inv_factorial_147 / 148 real ( real64 ), parameter , public :: inv_factorial_149 = inv_factorial_148 / 149 real ( real64 ), parameter , public :: inv_factorial_150 = inv_factorial_149 / 150 real ( real64 ), parameter , public :: inv_factorial_151 = inv_factorial_150 / 151 real ( real64 ), parameter , public :: inv_factorial_152 = inv_factorial_151 / 152 real ( real64 ), parameter , public :: inv_factorial_153 = inv_factorial_152 / 153 real ( real64 ), parameter , public :: inv_factorial_154 = inv_factorial_153 / 154 real ( real64 ), parameter , public :: inv_factorial_155 = inv_factorial_154 / 155 real ( real64 ), parameter , public :: inv_factorial_156 = inv_factorial_155 / 156 real ( real64 ), parameter , public :: inv_factorial_157 = inv_factorial_156 / 157 real ( real64 ), parameter , public :: inv_factorial_158 = inv_factorial_157 / 158 real ( real64 ), parameter , public :: inv_factorial_159 = inv_factorial_158 / 159 real ( real64 ), parameter , public :: inv_factorial_160 = inv_factorial_159 / 160 real ( real64 ), parameter , public :: inv_factorial_161 = inv_factorial_160 / 161 real ( real64 ), parameter , public :: inv_factorial_162 = inv_factorial_161 / 162 real ( real64 ), parameter , public :: inv_factorial_163 = inv_factorial_162 / 163 real ( real64 ), parameter , public :: inv_factorial_164 = inv_factorial_163 / 164 real ( real64 ), parameter , public :: inv_factorial_165 = inv_factorial_164 / 165 real ( real64 ), parameter , public :: inv_factorial_166 = inv_factorial_165 / 166 real ( real64 ), parameter , public :: inv_factorial_167 = inv_factorial_166 / 167 real ( real64 ), parameter , public :: inv_factorial_168 = inv_factorial_167 / 168 real ( real64 ), parameter , public :: inv_factorial_169 = inv_factorial_168 / 169 real ( real64 ), parameter , public :: inv_factorial_170 = inv_factorial_169 / 170 real ( real64 ), parameter , public :: inv_factorial_171 = inv_factorial_170 / 171 real ( real64 ), parameter , public :: inv_factorial_172 = inv_factorial_171 / 172 real ( real64 ), parameter , public :: inv_factorial_173 = inv_factorial_172 / 173 real ( real64 ), parameter , public :: inv_factorial_174 = inv_factorial_173 / 174 real ( real64 ), parameter , public :: inv_factorial_175 = inv_factorial_174 / 175 real ( real64 ), parameter , public :: inv_factorial_176 = inv_factorial_175 / 176 real ( real64 ), parameter , public :: inv_factorial_177 = inv_factorial_176 / 177 end module inv_factorial_real64","tags":"","url":"sourcefile/inv_factorial_real64.f90.html"},{"title":"main_module.f90 – taylor_series_fortran","text":"Source Code module taylor_series_fortran use , intrinsic :: iso_fortran_env , only : real32 use , intrinsic :: iso_fortran_env , only : real64 use , intrinsic :: iso_fortran_env , only : real128 implicit none private public :: taylor_series_cos_000 public :: taylor_series_cos_001 public :: taylor_series_cos_002 public :: taylor_series_cos_003 public :: taylor_series_cos_004 public :: taylor_series_cos_005 public :: taylor_series_cos_006 public :: taylor_series_cos_007 public :: taylor_series_cos_008 public :: taylor_series_cos_009 public :: taylor_series_cos_010 public :: taylor_series_cos_011 public :: taylor_series_cos_012 public :: taylor_series_cos_013 public :: taylor_series_cos_014 public :: taylor_series_cos_015 public :: taylor_series_cos_016 public :: taylor_series_cos_017 public :: taylor_series_cos_018 public :: taylor_series_cos_019 public :: taylor_series_cos_020 public :: taylor_series_cos_021 public :: taylor_series_cos_022 public :: taylor_series_cos_023 public :: taylor_series_cos_024 public :: taylor_series_cos_025 public :: taylor_series_cos_026 public :: taylor_series_cos_027 public :: taylor_series_cos_028 public :: taylor_series_cos_029 public :: taylor_series_cos_030 public :: taylor_series_cos_031 public :: taylor_series_cos_032 public :: taylor_series_cos_033 public :: taylor_series_cos_034 public :: taylor_series_cos_035 public :: taylor_series_cos_036 public :: taylor_series_cos_037 public :: taylor_series_cos_038 public :: taylor_series_cos_039 public :: taylor_series_cos_040 public :: taylor_series_cos_041 public :: taylor_series_cos_042 public :: taylor_series_cos_043 public :: taylor_series_cos_044 public :: taylor_series_cos_045 public :: taylor_series_cos_046 public :: taylor_series_cos_047 public :: taylor_series_cos_048 public :: taylor_series_cos_049 public :: taylor_series_cos_050 public :: taylor_series_cos_051 public :: taylor_series_cos_052 public :: taylor_series_cos_053 public :: taylor_series_cos_054 public :: taylor_series_cos_055 public :: taylor_series_cos_056 public :: taylor_series_cos_057 public :: taylor_series_cos_058 public :: taylor_series_cos_059 public :: taylor_series_cos_060 public :: taylor_series_cos_061 public :: taylor_series_cos_062 public :: taylor_series_cos_063 public :: taylor_series_cos_064 public :: taylor_series_cos_065 public :: taylor_series_cos_066 public :: taylor_series_cos_067 public :: taylor_series_cos_068 public :: taylor_series_cos_069 public :: taylor_series_cos_070 public :: taylor_series_cos_071 public :: taylor_series_cos_072 public :: taylor_series_cos_073 public :: taylor_series_cos_074 public :: taylor_series_cos_075 public :: taylor_series_cos_076 public :: taylor_series_cos_077 public :: taylor_series_cos_078 public :: taylor_series_cos_079 public :: taylor_series_cos_080 public :: taylor_series_cos_081 public :: taylor_series_cos_082 public :: taylor_series_cos_083 public :: taylor_series_cos_084 public :: taylor_series_cos_085 public :: taylor_series_cos_086 public :: taylor_series_cos_087 public :: taylor_series_cos_088 public :: taylor_series_cos_089 public :: taylor_series_cos_090 public :: taylor_series_cos_091 public :: taylor_series_cos_092 public :: taylor_series_cos_093 public :: taylor_series_cos_094 public :: taylor_series_cos_095 public :: taylor_series_cos_096 public :: taylor_series_cos_097 public :: taylor_series_cos_098 public :: taylor_series_cos_099 public :: taylor_series_cos_100 public :: taylor_series_cos_101 public :: taylor_series_cos_102 public :: taylor_series_cos_103 public :: taylor_series_cos_104 public :: taylor_series_cos_105 public :: taylor_series_cos_106 public :: taylor_series_cos_107 public :: taylor_series_cos_108 public :: taylor_series_cos_109 public :: taylor_series_cos_110 public :: taylor_series_cos_111 public :: taylor_series_cos_112 public :: taylor_series_cos_113 public :: taylor_series_cos_114 public :: taylor_series_cos_115 public :: taylor_series_cos_116 public :: taylor_series_cos_117 public :: taylor_series_cos_118 public :: taylor_series_cos_119 public :: taylor_series_cos_120 public :: taylor_series_cos_121 public :: taylor_series_cos_122 public :: taylor_series_cos_123 public :: taylor_series_cos_124 public :: taylor_series_cos_125 public :: taylor_series_cos_126 public :: taylor_series_cos_127 public :: taylor_series_cos_128 public :: taylor_series_cos_129 public :: taylor_series_cos_130 public :: taylor_series_cos_131 public :: taylor_series_cos_132 public :: taylor_series_cos_133 public :: taylor_series_cos_134 public :: taylor_series_cos_135 public :: taylor_series_cos_136 public :: taylor_series_cos_137 public :: taylor_series_cos_138 public :: taylor_series_cos_139 public :: taylor_series_cos_140 public :: taylor_series_cos_141 public :: taylor_series_cos_142 public :: taylor_series_cos_143 public :: taylor_series_cos_144 public :: taylor_series_cos_145 public :: taylor_series_cos_146 public :: taylor_series_cos_147 public :: taylor_series_cos_148 public :: taylor_series_cos_149 public :: taylor_series_cos_150 public :: taylor_series_cos_151 public :: taylor_series_cos_152 public :: taylor_series_cos_153 public :: taylor_series_cos_154 public :: taylor_series_cos_155 public :: taylor_series_cos_156 public :: taylor_series_cos_157 public :: taylor_series_cos_158 public :: taylor_series_cos_159 public :: taylor_series_cos_160 public :: taylor_series_cos_161 public :: taylor_series_cos_162 public :: taylor_series_cos_163 public :: taylor_series_cos_164 public :: taylor_series_cos_165 public :: taylor_series_cos_166 public :: taylor_series_cos_167 public :: taylor_series_cos_168 public :: taylor_series_cos_169 public :: taylor_series_cos_170 public :: taylor_series_cos_171 public :: taylor_series_cos_172 public :: taylor_series_cos_173 public :: taylor_series_cos_174 public :: taylor_series_cos_175 public :: taylor_series_cos_176 public :: taylor_series_exp_000 public :: taylor_series_exp_001 public :: taylor_series_exp_002 public :: taylor_series_exp_003 public :: taylor_series_exp_004 public :: taylor_series_exp_005 public :: taylor_series_exp_006 public :: taylor_series_exp_007 public :: taylor_series_exp_008 public :: taylor_series_exp_009 public :: taylor_series_exp_010 public :: taylor_series_exp_011 public :: taylor_series_exp_012 public :: taylor_series_exp_013 public :: taylor_series_exp_014 public :: taylor_series_exp_015 public :: taylor_series_exp_016 public :: taylor_series_exp_017 public :: taylor_series_exp_018 public :: taylor_series_exp_019 public :: taylor_series_exp_020 public :: taylor_series_exp_021 public :: taylor_series_exp_022 public :: taylor_series_exp_023 public :: taylor_series_exp_024 public :: taylor_series_exp_025 public :: taylor_series_exp_026 public :: taylor_series_exp_027 public :: taylor_series_exp_028 public :: taylor_series_exp_029 public :: taylor_series_exp_030 public :: taylor_series_exp_031 public :: taylor_series_exp_032 public :: taylor_series_exp_033 public :: taylor_series_exp_034 public :: taylor_series_exp_035 public :: taylor_series_exp_036 public :: taylor_series_exp_037 public :: taylor_series_exp_038 public :: taylor_series_exp_039 public :: taylor_series_exp_040 public :: taylor_series_exp_041 public :: taylor_series_exp_042 public :: taylor_series_exp_043 public :: taylor_series_exp_044 public :: taylor_series_exp_045 public :: taylor_series_exp_046 public :: taylor_series_exp_047 public :: taylor_series_exp_048 public :: taylor_series_exp_049 public :: taylor_series_exp_050 public :: taylor_series_exp_051 public :: taylor_series_exp_052 public :: taylor_series_exp_053 public :: taylor_series_exp_054 public :: taylor_series_exp_055 public :: taylor_series_exp_056 public :: taylor_series_exp_057 public :: taylor_series_exp_058 public :: taylor_series_exp_059 public :: taylor_series_exp_060 public :: taylor_series_exp_061 public :: taylor_series_exp_062 public :: taylor_series_exp_063 public :: taylor_series_exp_064 public :: taylor_series_exp_065 public :: taylor_series_exp_066 public :: taylor_series_exp_067 public :: taylor_series_exp_068 public :: taylor_series_exp_069 public :: taylor_series_exp_070 public :: taylor_series_exp_071 public :: taylor_series_exp_072 public :: taylor_series_exp_073 public :: taylor_series_exp_074 public :: taylor_series_exp_075 public :: taylor_series_exp_076 public :: taylor_series_exp_077 public :: taylor_series_exp_078 public :: taylor_series_exp_079 public :: taylor_series_exp_080 public :: taylor_series_exp_081 public :: taylor_series_exp_082 public :: taylor_series_exp_083 public :: taylor_series_exp_084 public :: taylor_series_exp_085 public :: taylor_series_exp_086 public :: taylor_series_exp_087 public :: taylor_series_exp_088 public :: taylor_series_exp_089 public :: taylor_series_exp_090 public :: taylor_series_exp_091 public :: taylor_series_exp_092 public :: taylor_series_exp_093 public :: taylor_series_exp_094 public :: taylor_series_exp_095 public :: taylor_series_exp_096 public :: taylor_series_exp_097 public :: taylor_series_exp_098 public :: taylor_series_exp_099 public :: taylor_series_exp_100 public :: taylor_series_exp_101 public :: taylor_series_exp_102 public :: taylor_series_exp_103 public :: taylor_series_exp_104 public :: taylor_series_exp_105 public :: taylor_series_exp_106 public :: taylor_series_exp_107 public :: taylor_series_exp_108 public :: taylor_series_exp_109 public :: taylor_series_exp_110 public :: taylor_series_exp_111 public :: taylor_series_exp_112 public :: taylor_series_exp_113 public :: taylor_series_exp_114 public :: taylor_series_exp_115 public :: taylor_series_exp_116 public :: taylor_series_exp_117 public :: taylor_series_exp_118 public :: taylor_series_exp_119 public :: taylor_series_exp_120 public :: taylor_series_exp_121 public :: taylor_series_exp_122 public :: taylor_series_exp_123 public :: taylor_series_exp_124 public :: taylor_series_exp_125 public :: taylor_series_exp_126 public :: taylor_series_exp_127 public :: taylor_series_exp_128 public :: taylor_series_exp_129 public :: taylor_series_exp_130 public :: taylor_series_exp_131 public :: taylor_series_exp_132 public :: taylor_series_exp_133 public :: taylor_series_exp_134 public :: taylor_series_exp_135 public :: taylor_series_exp_136 public :: taylor_series_exp_137 public :: taylor_series_exp_138 public :: taylor_series_exp_139 public :: taylor_series_exp_140 public :: taylor_series_exp_141 public :: taylor_series_exp_142 public :: taylor_series_exp_143 public :: taylor_series_exp_144 public :: taylor_series_exp_145 public :: taylor_series_exp_146 public :: taylor_series_exp_147 public :: taylor_series_exp_148 public :: taylor_series_exp_149 public :: taylor_series_exp_150 public :: taylor_series_exp_151 public :: taylor_series_exp_152 public :: taylor_series_exp_153 public :: taylor_series_exp_154 public :: taylor_series_exp_155 public :: taylor_series_exp_156 public :: taylor_series_exp_157 public :: taylor_series_exp_158 public :: taylor_series_exp_159 public :: taylor_series_exp_160 public :: taylor_series_exp_161 public :: taylor_series_exp_162 public :: taylor_series_exp_163 public :: taylor_series_exp_164 public :: taylor_series_exp_165 public :: taylor_series_exp_166 public :: taylor_series_exp_167 public :: taylor_series_exp_168 public :: taylor_series_exp_169 public :: taylor_series_exp_170 public :: taylor_series_exp_171 public :: taylor_series_exp_172 public :: taylor_series_exp_173 public :: taylor_series_exp_174 public :: taylor_series_exp_175 public :: taylor_series_exp_176 public :: taylor_series_exp_177 public :: taylor_series_sin_000 public :: taylor_series_sin_001 public :: taylor_series_sin_002 public :: taylor_series_sin_003 public :: taylor_series_sin_004 public :: taylor_series_sin_005 public :: taylor_series_sin_006 public :: taylor_series_sin_007 public :: taylor_series_sin_008 public :: taylor_series_sin_009 public :: taylor_series_sin_010 public :: taylor_series_sin_011 public :: taylor_series_sin_012 public :: taylor_series_sin_013 public :: taylor_series_sin_014 public :: taylor_series_sin_015 public :: taylor_series_sin_016 public :: taylor_series_sin_017 public :: taylor_series_sin_018 public :: taylor_series_sin_019 public :: taylor_series_sin_020 public :: taylor_series_sin_021 public :: taylor_series_sin_022 public :: taylor_series_sin_023 public :: taylor_series_sin_024 public :: taylor_series_sin_025 public :: taylor_series_sin_026 public :: taylor_series_sin_027 public :: taylor_series_sin_028 public :: taylor_series_sin_029 public :: taylor_series_sin_030 public :: taylor_series_sin_031 public :: taylor_series_sin_032 public :: taylor_series_sin_033 public :: taylor_series_sin_034 public :: taylor_series_sin_035 public :: taylor_series_sin_036 public :: taylor_series_sin_037 public :: taylor_series_sin_038 public :: taylor_series_sin_039 public :: taylor_series_sin_040 public :: taylor_series_sin_041 public :: taylor_series_sin_042 public :: taylor_series_sin_043 public :: taylor_series_sin_044 public :: taylor_series_sin_045 public :: taylor_series_sin_046 public :: taylor_series_sin_047 public :: taylor_series_sin_048 public :: taylor_series_sin_049 public :: taylor_series_sin_050 public :: taylor_series_sin_051 public :: taylor_series_sin_052 public :: taylor_series_sin_053 public :: taylor_series_sin_054 public :: taylor_series_sin_055 public :: taylor_series_sin_056 public :: taylor_series_sin_057 public :: taylor_series_sin_058 public :: taylor_series_sin_059 public :: taylor_series_sin_060 public :: taylor_series_sin_061 public :: taylor_series_sin_062 public :: taylor_series_sin_063 public :: taylor_series_sin_064 public :: taylor_series_sin_065 public :: taylor_series_sin_066 public :: taylor_series_sin_067 public :: taylor_series_sin_068 public :: taylor_series_sin_069 public :: taylor_series_sin_070 public :: taylor_series_sin_071 public :: taylor_series_sin_072 public :: taylor_series_sin_073 public :: taylor_series_sin_074 public :: taylor_series_sin_075 public :: taylor_series_sin_076 public :: taylor_series_sin_077 public :: taylor_series_sin_078 public :: taylor_series_sin_079 public :: taylor_series_sin_080 public :: taylor_series_sin_081 public :: taylor_series_sin_082 public :: taylor_series_sin_083 public :: taylor_series_sin_084 public :: taylor_series_sin_085 public :: taylor_series_sin_086 public :: taylor_series_sin_087 public :: taylor_series_sin_088 public :: taylor_series_sin_089 public :: taylor_series_sin_090 public :: taylor_series_sin_091 public :: taylor_series_sin_092 public :: taylor_series_sin_093 public :: taylor_series_sin_094 public :: taylor_series_sin_095 public :: taylor_series_sin_096 public :: taylor_series_sin_097 public :: taylor_series_sin_098 public :: taylor_series_sin_099 public :: taylor_series_sin_100 public :: taylor_series_sin_101 public :: taylor_series_sin_102 public :: taylor_series_sin_103 public :: taylor_series_sin_104 public :: taylor_series_sin_105 public :: taylor_series_sin_106 public :: taylor_series_sin_107 public :: taylor_series_sin_108 public :: taylor_series_sin_109 public :: taylor_series_sin_110 public :: taylor_series_sin_111 public :: taylor_series_sin_112 public :: taylor_series_sin_113 public :: taylor_series_sin_114 public :: taylor_series_sin_115 public :: taylor_series_sin_116 public :: taylor_series_sin_117 public :: taylor_series_sin_118 public :: taylor_series_sin_119 public :: taylor_series_sin_120 public :: taylor_series_sin_121 public :: taylor_series_sin_122 public :: taylor_series_sin_123 public :: taylor_series_sin_124 public :: taylor_series_sin_125 public :: taylor_series_sin_126 public :: taylor_series_sin_127 public :: taylor_series_sin_128 public :: taylor_series_sin_129 public :: taylor_series_sin_130 public :: taylor_series_sin_131 public :: taylor_series_sin_132 public :: taylor_series_sin_133 public :: taylor_series_sin_134 public :: taylor_series_sin_135 public :: taylor_series_sin_136 public :: taylor_series_sin_137 public :: taylor_series_sin_138 public :: taylor_series_sin_139 public :: taylor_series_sin_140 public :: taylor_series_sin_141 public :: taylor_series_sin_142 public :: taylor_series_sin_143 public :: taylor_series_sin_144 public :: taylor_series_sin_145 public :: taylor_series_sin_146 public :: taylor_series_sin_147 public :: taylor_series_sin_148 public :: taylor_series_sin_149 public :: taylor_series_sin_150 public :: taylor_series_sin_151 public :: taylor_series_sin_152 public :: taylor_series_sin_153 public :: taylor_series_sin_154 public :: taylor_series_sin_155 public :: taylor_series_sin_156 public :: taylor_series_sin_157 public :: taylor_series_sin_158 public :: taylor_series_sin_159 public :: taylor_series_sin_160 public :: taylor_series_sin_161 public :: taylor_series_sin_162 public :: taylor_series_sin_163 public :: taylor_series_sin_164 public :: taylor_series_sin_165 public :: taylor_series_sin_166 public :: taylor_series_sin_167 public :: taylor_series_sin_168 public :: taylor_series_sin_169 public :: taylor_series_sin_170 public :: taylor_series_sin_171 public :: taylor_series_sin_172 public :: taylor_series_sin_173 public :: taylor_series_sin_174 public :: taylor_series_sin_175 public :: taylor_series_sin_176 public :: taylor_series_sin_177 !> `cos(x)` approximation by a 0th order Taylor series interface taylor_series_cos_000 real ( real32 ) module elemental function taylor_series_cos_000_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_cos_000_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_000_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 1st order Taylor series interface taylor_series_cos_001 real ( real32 ) module elemental function taylor_series_cos_001_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_cos_001_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_001_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 2nd order Taylor series interface taylor_series_cos_002 real ( real32 ) module elemental function taylor_series_cos_002_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_cos_002_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_002_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 3rd order Taylor series interface taylor_series_cos_003 real ( real32 ) module elemental function taylor_series_cos_003_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_cos_003_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_003_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 4th order Taylor series interface taylor_series_cos_004 real ( real32 ) module elemental function taylor_series_cos_004_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_cos_004_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_004_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 5th order Taylor series interface taylor_series_cos_005 real ( real32 ) module elemental function taylor_series_cos_005_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_cos_005_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_005_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 6th order Taylor series interface taylor_series_cos_006 real ( real32 ) module elemental function taylor_series_cos_006_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_cos_006_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_006_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 7th order Taylor series interface taylor_series_cos_007 real ( real32 ) module elemental function taylor_series_cos_007_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_cos_007_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_007_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 8th order Taylor series interface taylor_series_cos_008 real ( real32 ) module elemental function taylor_series_cos_008_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_cos_008_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_008_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 9th order Taylor series interface taylor_series_cos_009 real ( real32 ) module elemental function taylor_series_cos_009_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_cos_009_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_009_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 10th order Taylor series interface taylor_series_cos_010 real ( real32 ) module elemental function taylor_series_cos_010_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_cos_010_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_010_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 11th order Taylor series interface taylor_series_cos_011 real ( real32 ) module elemental function taylor_series_cos_011_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_cos_011_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_011_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 12th order Taylor series interface taylor_series_cos_012 real ( real32 ) module elemental function taylor_series_cos_012_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_cos_012_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_012_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 13th order Taylor series interface taylor_series_cos_013 real ( real32 ) module elemental function taylor_series_cos_013_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_cos_013_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_013_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 14th order Taylor series interface taylor_series_cos_014 real ( real32 ) module elemental function taylor_series_cos_014_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_cos_014_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_014_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 15th order Taylor series interface taylor_series_cos_015 real ( real32 ) module elemental function taylor_series_cos_015_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_cos_015_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_015_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 16th order Taylor series interface taylor_series_cos_016 real ( real32 ) module elemental function taylor_series_cos_016_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_cos_016_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_016_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 17th order Taylor series interface taylor_series_cos_017 real ( real32 ) module elemental function taylor_series_cos_017_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_cos_017_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_017_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 18th order Taylor series interface taylor_series_cos_018 real ( real32 ) module elemental function taylor_series_cos_018_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_cos_018_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_018_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 19th order Taylor series interface taylor_series_cos_019 real ( real32 ) module elemental function taylor_series_cos_019_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_cos_019_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_019_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 20th order Taylor series interface taylor_series_cos_020 real ( real32 ) module elemental function taylor_series_cos_020_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_cos_020_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_020_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 21st order Taylor series interface taylor_series_cos_021 real ( real32 ) module elemental function taylor_series_cos_021_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_cos_021_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_021_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 22nd order Taylor series interface taylor_series_cos_022 real ( real32 ) module elemental function taylor_series_cos_022_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_cos_022_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_022_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 23rd order Taylor series interface taylor_series_cos_023 real ( real32 ) module elemental function taylor_series_cos_023_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_cos_023_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_023_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 24th order Taylor series interface taylor_series_cos_024 real ( real32 ) module elemental function taylor_series_cos_024_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_cos_024_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_024_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 25th order Taylor series interface taylor_series_cos_025 real ( real32 ) module elemental function taylor_series_cos_025_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_cos_025_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_025_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 26th order Taylor series interface taylor_series_cos_026 real ( real32 ) module elemental function taylor_series_cos_026_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_cos_026_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_026_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 27th order Taylor series interface taylor_series_cos_027 real ( real32 ) module elemental function taylor_series_cos_027_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_cos_027_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_027_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 28th order Taylor series interface taylor_series_cos_028 real ( real32 ) module elemental function taylor_series_cos_028_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_cos_028_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_028_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 29th order Taylor series interface taylor_series_cos_029 real ( real32 ) module elemental function taylor_series_cos_029_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_cos_029_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_029_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 30th order Taylor series interface taylor_series_cos_030 real ( real32 ) module elemental function taylor_series_cos_030_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_cos_030_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_030_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 31st order Taylor series interface taylor_series_cos_031 real ( real32 ) module elemental function taylor_series_cos_031_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_cos_031_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_031_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 32nd order Taylor series interface taylor_series_cos_032 real ( real32 ) module elemental function taylor_series_cos_032_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_cos_032_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_032_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 33rd order Taylor series interface taylor_series_cos_033 real ( real32 ) module elemental function taylor_series_cos_033_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_cos_033_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_033_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 34th order Taylor series interface taylor_series_cos_034 real ( real32 ) module elemental function taylor_series_cos_034_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_cos_034_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_034_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 35th order Taylor series interface taylor_series_cos_035 real ( real32 ) module elemental function taylor_series_cos_035_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_cos_035_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_035_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 36th order Taylor series interface taylor_series_cos_036 real ( real32 ) module elemental function taylor_series_cos_036_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_cos_036_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_036_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 37th order Taylor series interface taylor_series_cos_037 real ( real32 ) module elemental function taylor_series_cos_037_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_cos_037_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_037_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 38th order Taylor series interface taylor_series_cos_038 real ( real32 ) module elemental function taylor_series_cos_038_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_cos_038_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_038_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 39th order Taylor series interface taylor_series_cos_039 real ( real64 ) module elemental function taylor_series_cos_039_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_039_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 40th order Taylor series interface taylor_series_cos_040 real ( real64 ) module elemental function taylor_series_cos_040_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_040_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 41st order Taylor series interface taylor_series_cos_041 real ( real64 ) module elemental function taylor_series_cos_041_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_041_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 42nd order Taylor series interface taylor_series_cos_042 real ( real64 ) module elemental function taylor_series_cos_042_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_042_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 43rd order Taylor series interface taylor_series_cos_043 real ( real64 ) module elemental function taylor_series_cos_043_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_043_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 44th order Taylor series interface taylor_series_cos_044 real ( real64 ) module elemental function taylor_series_cos_044_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_044_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 45th order Taylor series interface taylor_series_cos_045 real ( real64 ) module elemental function taylor_series_cos_045_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_045_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 46th order Taylor series interface taylor_series_cos_046 real ( real64 ) module elemental function taylor_series_cos_046_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_046_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 47th order Taylor series interface taylor_series_cos_047 real ( real64 ) module elemental function taylor_series_cos_047_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_047_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 48th order Taylor series interface taylor_series_cos_048 real ( real64 ) module elemental function taylor_series_cos_048_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_048_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 49th order Taylor series interface taylor_series_cos_049 real ( real64 ) module elemental function taylor_series_cos_049_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_049_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 50th order Taylor series interface taylor_series_cos_050 real ( real64 ) module elemental function taylor_series_cos_050_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_050_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 51st order Taylor series interface taylor_series_cos_051 real ( real64 ) module elemental function taylor_series_cos_051_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_051_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 52nd order Taylor series interface taylor_series_cos_052 real ( real64 ) module elemental function taylor_series_cos_052_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_052_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 53rd order Taylor series interface taylor_series_cos_053 real ( real64 ) module elemental function taylor_series_cos_053_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_053_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 54th order Taylor series interface taylor_series_cos_054 real ( real64 ) module elemental function taylor_series_cos_054_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_054_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 55th order Taylor series interface taylor_series_cos_055 real ( real64 ) module elemental function taylor_series_cos_055_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_055_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 56th order Taylor series interface taylor_series_cos_056 real ( real64 ) module elemental function taylor_series_cos_056_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_056_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 57th order Taylor series interface taylor_series_cos_057 real ( real64 ) module elemental function taylor_series_cos_057_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_057_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 58th order Taylor series interface taylor_series_cos_058 real ( real64 ) module elemental function taylor_series_cos_058_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_058_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 59th order Taylor series interface taylor_series_cos_059 real ( real64 ) module elemental function taylor_series_cos_059_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_059_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 60th order Taylor series interface taylor_series_cos_060 real ( real64 ) module elemental function taylor_series_cos_060_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_060_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 61st order Taylor series interface taylor_series_cos_061 real ( real64 ) module elemental function taylor_series_cos_061_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_061_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 62nd order Taylor series interface taylor_series_cos_062 real ( real64 ) module elemental function taylor_series_cos_062_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_062_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 63rd order Taylor series interface taylor_series_cos_063 real ( real64 ) module elemental function taylor_series_cos_063_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_063_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 64th order Taylor series interface taylor_series_cos_064 real ( real64 ) module elemental function taylor_series_cos_064_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_064_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 65th order Taylor series interface taylor_series_cos_065 real ( real64 ) module elemental function taylor_series_cos_065_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_065_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 66th order Taylor series interface taylor_series_cos_066 real ( real64 ) module elemental function taylor_series_cos_066_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_066_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 67th order Taylor series interface taylor_series_cos_067 real ( real64 ) module elemental function taylor_series_cos_067_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_067_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 68th order Taylor series interface taylor_series_cos_068 real ( real64 ) module elemental function taylor_series_cos_068_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_068_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 69th order Taylor series interface taylor_series_cos_069 real ( real64 ) module elemental function taylor_series_cos_069_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_069_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 70th order Taylor series interface taylor_series_cos_070 real ( real64 ) module elemental function taylor_series_cos_070_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_070_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 71st order Taylor series interface taylor_series_cos_071 real ( real64 ) module elemental function taylor_series_cos_071_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_071_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 72nd order Taylor series interface taylor_series_cos_072 real ( real64 ) module elemental function taylor_series_cos_072_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_072_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 73rd order Taylor series interface taylor_series_cos_073 real ( real64 ) module elemental function taylor_series_cos_073_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_073_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 74th order Taylor series interface taylor_series_cos_074 real ( real64 ) module elemental function taylor_series_cos_074_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_074_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 75th order Taylor series interface taylor_series_cos_075 real ( real64 ) module elemental function taylor_series_cos_075_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_075_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 76th order Taylor series interface taylor_series_cos_076 real ( real64 ) module elemental function taylor_series_cos_076_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_076_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 77th order Taylor series interface taylor_series_cos_077 real ( real64 ) module elemental function taylor_series_cos_077_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_077_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 78th order Taylor series interface taylor_series_cos_078 real ( real64 ) module elemental function taylor_series_cos_078_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_078_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 79th order Taylor series interface taylor_series_cos_079 real ( real64 ) module elemental function taylor_series_cos_079_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_079_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 80th order Taylor series interface taylor_series_cos_080 real ( real64 ) module elemental function taylor_series_cos_080_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_080_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 81st order Taylor series interface taylor_series_cos_081 real ( real64 ) module elemental function taylor_series_cos_081_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_081_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 82nd order Taylor series interface taylor_series_cos_082 real ( real64 ) module elemental function taylor_series_cos_082_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_082_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 83rd order Taylor series interface taylor_series_cos_083 real ( real64 ) module elemental function taylor_series_cos_083_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_083_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 84th order Taylor series interface taylor_series_cos_084 real ( real64 ) module elemental function taylor_series_cos_084_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_084_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 85th order Taylor series interface taylor_series_cos_085 real ( real64 ) module elemental function taylor_series_cos_085_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_085_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 86th order Taylor series interface taylor_series_cos_086 real ( real64 ) module elemental function taylor_series_cos_086_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_086_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 87th order Taylor series interface taylor_series_cos_087 real ( real64 ) module elemental function taylor_series_cos_087_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_087_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 88th order Taylor series interface taylor_series_cos_088 real ( real64 ) module elemental function taylor_series_cos_088_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_088_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 89th order Taylor series interface taylor_series_cos_089 real ( real64 ) module elemental function taylor_series_cos_089_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_089_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 90th order Taylor series interface taylor_series_cos_090 real ( real64 ) module elemental function taylor_series_cos_090_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_090_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 91st order Taylor series interface taylor_series_cos_091 real ( real64 ) module elemental function taylor_series_cos_091_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_091_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 92nd order Taylor series interface taylor_series_cos_092 real ( real64 ) module elemental function taylor_series_cos_092_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_092_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 93rd order Taylor series interface taylor_series_cos_093 real ( real64 ) module elemental function taylor_series_cos_093_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_093_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 94th order Taylor series interface taylor_series_cos_094 real ( real64 ) module elemental function taylor_series_cos_094_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_094_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 95th order Taylor series interface taylor_series_cos_095 real ( real64 ) module elemental function taylor_series_cos_095_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_095_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 96th order Taylor series interface taylor_series_cos_096 real ( real64 ) module elemental function taylor_series_cos_096_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_096_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 97th order Taylor series interface taylor_series_cos_097 real ( real64 ) module elemental function taylor_series_cos_097_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_097_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 98th order Taylor series interface taylor_series_cos_098 real ( real64 ) module elemental function taylor_series_cos_098_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_098_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 99th order Taylor series interface taylor_series_cos_099 real ( real64 ) module elemental function taylor_series_cos_099_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_099_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 100th order Taylor series interface taylor_series_cos_100 real ( real64 ) module elemental function taylor_series_cos_100_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_100_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 101st order Taylor series interface taylor_series_cos_101 real ( real64 ) module elemental function taylor_series_cos_101_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_101_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 102nd order Taylor series interface taylor_series_cos_102 real ( real64 ) module elemental function taylor_series_cos_102_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_102_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 103rd order Taylor series interface taylor_series_cos_103 real ( real64 ) module elemental function taylor_series_cos_103_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_103_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 104th order Taylor series interface taylor_series_cos_104 real ( real64 ) module elemental function taylor_series_cos_104_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_104_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 105th order Taylor series interface taylor_series_cos_105 real ( real64 ) module elemental function taylor_series_cos_105_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_105_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 106th order Taylor series interface taylor_series_cos_106 real ( real64 ) module elemental function taylor_series_cos_106_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_106_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 107th order Taylor series interface taylor_series_cos_107 real ( real64 ) module elemental function taylor_series_cos_107_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_107_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 108th order Taylor series interface taylor_series_cos_108 real ( real64 ) module elemental function taylor_series_cos_108_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_108_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 109th order Taylor series interface taylor_series_cos_109 real ( real64 ) module elemental function taylor_series_cos_109_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_109_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 110th order Taylor series interface taylor_series_cos_110 real ( real64 ) module elemental function taylor_series_cos_110_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_110_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 111th order Taylor series interface taylor_series_cos_111 real ( real64 ) module elemental function taylor_series_cos_111_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_111_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 112th order Taylor series interface taylor_series_cos_112 real ( real64 ) module elemental function taylor_series_cos_112_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_112_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 113th order Taylor series interface taylor_series_cos_113 real ( real64 ) module elemental function taylor_series_cos_113_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_113_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 114th order Taylor series interface taylor_series_cos_114 real ( real64 ) module elemental function taylor_series_cos_114_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_114_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 115th order Taylor series interface taylor_series_cos_115 real ( real64 ) module elemental function taylor_series_cos_115_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_115_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 116th order Taylor series interface taylor_series_cos_116 real ( real64 ) module elemental function taylor_series_cos_116_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_116_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 117th order Taylor series interface taylor_series_cos_117 real ( real64 ) module elemental function taylor_series_cos_117_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_117_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 118th order Taylor series interface taylor_series_cos_118 real ( real64 ) module elemental function taylor_series_cos_118_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_118_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 119th order Taylor series interface taylor_series_cos_119 real ( real64 ) module elemental function taylor_series_cos_119_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_119_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 120th order Taylor series interface taylor_series_cos_120 real ( real64 ) module elemental function taylor_series_cos_120_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_120_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 121st order Taylor series interface taylor_series_cos_121 real ( real64 ) module elemental function taylor_series_cos_121_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_121_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 122nd order Taylor series interface taylor_series_cos_122 real ( real64 ) module elemental function taylor_series_cos_122_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_122_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 123rd order Taylor series interface taylor_series_cos_123 real ( real64 ) module elemental function taylor_series_cos_123_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_123_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 124th order Taylor series interface taylor_series_cos_124 real ( real64 ) module elemental function taylor_series_cos_124_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_124_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 125th order Taylor series interface taylor_series_cos_125 real ( real64 ) module elemental function taylor_series_cos_125_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_125_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 126th order Taylor series interface taylor_series_cos_126 real ( real64 ) module elemental function taylor_series_cos_126_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_126_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 127th order Taylor series interface taylor_series_cos_127 real ( real64 ) module elemental function taylor_series_cos_127_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_127_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 128th order Taylor series interface taylor_series_cos_128 real ( real64 ) module elemental function taylor_series_cos_128_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_128_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 129th order Taylor series interface taylor_series_cos_129 real ( real64 ) module elemental function taylor_series_cos_129_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_129_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 130th order Taylor series interface taylor_series_cos_130 real ( real64 ) module elemental function taylor_series_cos_130_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_130_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 131st order Taylor series interface taylor_series_cos_131 real ( real64 ) module elemental function taylor_series_cos_131_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_131_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 132nd order Taylor series interface taylor_series_cos_132 real ( real64 ) module elemental function taylor_series_cos_132_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_132_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 133rd order Taylor series interface taylor_series_cos_133 real ( real64 ) module elemental function taylor_series_cos_133_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_133_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 134th order Taylor series interface taylor_series_cos_134 real ( real64 ) module elemental function taylor_series_cos_134_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_134_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 135th order Taylor series interface taylor_series_cos_135 real ( real64 ) module elemental function taylor_series_cos_135_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_135_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 136th order Taylor series interface taylor_series_cos_136 real ( real64 ) module elemental function taylor_series_cos_136_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_136_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 137th order Taylor series interface taylor_series_cos_137 real ( real64 ) module elemental function taylor_series_cos_137_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_137_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 138th order Taylor series interface taylor_series_cos_138 real ( real64 ) module elemental function taylor_series_cos_138_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_138_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 139th order Taylor series interface taylor_series_cos_139 real ( real64 ) module elemental function taylor_series_cos_139_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_139_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 140th order Taylor series interface taylor_series_cos_140 real ( real64 ) module elemental function taylor_series_cos_140_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_140_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 141st order Taylor series interface taylor_series_cos_141 real ( real64 ) module elemental function taylor_series_cos_141_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_141_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 142nd order Taylor series interface taylor_series_cos_142 real ( real64 ) module elemental function taylor_series_cos_142_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_142_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 143rd order Taylor series interface taylor_series_cos_143 real ( real64 ) module elemental function taylor_series_cos_143_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_143_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 144th order Taylor series interface taylor_series_cos_144 real ( real64 ) module elemental function taylor_series_cos_144_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_144_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 145th order Taylor series interface taylor_series_cos_145 real ( real64 ) module elemental function taylor_series_cos_145_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_145_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 146th order Taylor series interface taylor_series_cos_146 real ( real64 ) module elemental function taylor_series_cos_146_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_146_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 147th order Taylor series interface taylor_series_cos_147 real ( real64 ) module elemental function taylor_series_cos_147_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_147_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 148th order Taylor series interface taylor_series_cos_148 real ( real64 ) module elemental function taylor_series_cos_148_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_148_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 149th order Taylor series interface taylor_series_cos_149 real ( real64 ) module elemental function taylor_series_cos_149_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_149_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 150th order Taylor series interface taylor_series_cos_150 real ( real64 ) module elemental function taylor_series_cos_150_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_150_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 151st order Taylor series interface taylor_series_cos_151 real ( real64 ) module elemental function taylor_series_cos_151_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_151_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 152nd order Taylor series interface taylor_series_cos_152 real ( real64 ) module elemental function taylor_series_cos_152_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_152_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 153rd order Taylor series interface taylor_series_cos_153 real ( real64 ) module elemental function taylor_series_cos_153_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_153_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 154th order Taylor series interface taylor_series_cos_154 real ( real64 ) module elemental function taylor_series_cos_154_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_154_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 155th order Taylor series interface taylor_series_cos_155 real ( real64 ) module elemental function taylor_series_cos_155_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_155_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 156th order Taylor series interface taylor_series_cos_156 real ( real64 ) module elemental function taylor_series_cos_156_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_156_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 157th order Taylor series interface taylor_series_cos_157 real ( real64 ) module elemental function taylor_series_cos_157_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_157_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 158th order Taylor series interface taylor_series_cos_158 real ( real64 ) module elemental function taylor_series_cos_158_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_158_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 159th order Taylor series interface taylor_series_cos_159 real ( real64 ) module elemental function taylor_series_cos_159_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_159_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 160th order Taylor series interface taylor_series_cos_160 real ( real64 ) module elemental function taylor_series_cos_160_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_160_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 161st order Taylor series interface taylor_series_cos_161 real ( real64 ) module elemental function taylor_series_cos_161_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_161_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 162nd order Taylor series interface taylor_series_cos_162 real ( real64 ) module elemental function taylor_series_cos_162_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_162_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 163rd order Taylor series interface taylor_series_cos_163 real ( real64 ) module elemental function taylor_series_cos_163_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_163_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 164th order Taylor series interface taylor_series_cos_164 real ( real64 ) module elemental function taylor_series_cos_164_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_164_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 165th order Taylor series interface taylor_series_cos_165 real ( real64 ) module elemental function taylor_series_cos_165_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_165_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 166th order Taylor series interface taylor_series_cos_166 real ( real64 ) module elemental function taylor_series_cos_166_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_166_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 167th order Taylor series interface taylor_series_cos_167 real ( real64 ) module elemental function taylor_series_cos_167_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_167_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 168th order Taylor series interface taylor_series_cos_168 real ( real64 ) module elemental function taylor_series_cos_168_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_168_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 169th order Taylor series interface taylor_series_cos_169 real ( real64 ) module elemental function taylor_series_cos_169_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_169_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 170th order Taylor series interface taylor_series_cos_170 real ( real64 ) module elemental function taylor_series_cos_170_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_170_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 171st order Taylor series interface taylor_series_cos_171 real ( real64 ) module elemental function taylor_series_cos_171_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_171_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 172nd order Taylor series interface taylor_series_cos_172 real ( real64 ) module elemental function taylor_series_cos_172_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_172_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 173rd order Taylor series interface taylor_series_cos_173 real ( real64 ) module elemental function taylor_series_cos_173_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_173_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 174th order Taylor series interface taylor_series_cos_174 real ( real64 ) module elemental function taylor_series_cos_174_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_174_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 175th order Taylor series interface taylor_series_cos_175 real ( real64 ) module elemental function taylor_series_cos_175_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_175_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `cos(x)` approximation by a 176th order Taylor series interface taylor_series_cos_176 real ( real64 ) module elemental function taylor_series_cos_176_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_cos_176_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 0th order Taylor series interface taylor_series_exp_000 real ( real32 ) module elemental function taylor_series_exp_000_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_exp_000_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_000_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 1st order Taylor series interface taylor_series_exp_001 real ( real32 ) module elemental function taylor_series_exp_001_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_exp_001_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_001_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 2nd order Taylor series interface taylor_series_exp_002 real ( real32 ) module elemental function taylor_series_exp_002_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_exp_002_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_002_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 3rd order Taylor series interface taylor_series_exp_003 real ( real32 ) module elemental function taylor_series_exp_003_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_exp_003_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_003_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 4th order Taylor series interface taylor_series_exp_004 real ( real32 ) module elemental function taylor_series_exp_004_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_exp_004_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_004_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 5th order Taylor series interface taylor_series_exp_005 real ( real32 ) module elemental function taylor_series_exp_005_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_exp_005_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_005_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 6th order Taylor series interface taylor_series_exp_006 real ( real32 ) module elemental function taylor_series_exp_006_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_exp_006_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_006_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 7th order Taylor series interface taylor_series_exp_007 real ( real32 ) module elemental function taylor_series_exp_007_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_exp_007_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_007_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 8th order Taylor series interface taylor_series_exp_008 real ( real32 ) module elemental function taylor_series_exp_008_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_exp_008_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_008_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 9th order Taylor series interface taylor_series_exp_009 real ( real32 ) module elemental function taylor_series_exp_009_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_exp_009_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_009_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 10th order Taylor series interface taylor_series_exp_010 real ( real32 ) module elemental function taylor_series_exp_010_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_exp_010_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_010_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 11th order Taylor series interface taylor_series_exp_011 real ( real32 ) module elemental function taylor_series_exp_011_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_exp_011_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_011_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 12th order Taylor series interface taylor_series_exp_012 real ( real32 ) module elemental function taylor_series_exp_012_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_exp_012_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_012_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 13th order Taylor series interface taylor_series_exp_013 real ( real32 ) module elemental function taylor_series_exp_013_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_exp_013_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_013_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 14th order Taylor series interface taylor_series_exp_014 real ( real32 ) module elemental function taylor_series_exp_014_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_exp_014_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_014_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 15th order Taylor series interface taylor_series_exp_015 real ( real32 ) module elemental function taylor_series_exp_015_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_exp_015_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_015_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 16th order Taylor series interface taylor_series_exp_016 real ( real32 ) module elemental function taylor_series_exp_016_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_exp_016_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_016_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 17th order Taylor series interface taylor_series_exp_017 real ( real32 ) module elemental function taylor_series_exp_017_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_exp_017_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_017_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 18th order Taylor series interface taylor_series_exp_018 real ( real32 ) module elemental function taylor_series_exp_018_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_exp_018_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_018_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 19th order Taylor series interface taylor_series_exp_019 real ( real32 ) module elemental function taylor_series_exp_019_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_exp_019_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_019_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 20th order Taylor series interface taylor_series_exp_020 real ( real32 ) module elemental function taylor_series_exp_020_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_exp_020_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_020_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 21st order Taylor series interface taylor_series_exp_021 real ( real32 ) module elemental function taylor_series_exp_021_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_exp_021_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_021_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 22nd order Taylor series interface taylor_series_exp_022 real ( real32 ) module elemental function taylor_series_exp_022_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_exp_022_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_022_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 23rd order Taylor series interface taylor_series_exp_023 real ( real32 ) module elemental function taylor_series_exp_023_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_exp_023_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_023_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 24th order Taylor series interface taylor_series_exp_024 real ( real32 ) module elemental function taylor_series_exp_024_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_exp_024_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_024_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 25th order Taylor series interface taylor_series_exp_025 real ( real32 ) module elemental function taylor_series_exp_025_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_exp_025_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_025_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 26th order Taylor series interface taylor_series_exp_026 real ( real32 ) module elemental function taylor_series_exp_026_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_exp_026_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_026_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 27th order Taylor series interface taylor_series_exp_027 real ( real32 ) module elemental function taylor_series_exp_027_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_exp_027_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_027_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 28th order Taylor series interface taylor_series_exp_028 real ( real32 ) module elemental function taylor_series_exp_028_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_exp_028_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_028_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 29th order Taylor series interface taylor_series_exp_029 real ( real32 ) module elemental function taylor_series_exp_029_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_exp_029_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_029_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 30th order Taylor series interface taylor_series_exp_030 real ( real32 ) module elemental function taylor_series_exp_030_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_exp_030_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_030_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 31st order Taylor series interface taylor_series_exp_031 real ( real32 ) module elemental function taylor_series_exp_031_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_exp_031_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_031_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 32nd order Taylor series interface taylor_series_exp_032 real ( real32 ) module elemental function taylor_series_exp_032_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_exp_032_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_032_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 33rd order Taylor series interface taylor_series_exp_033 real ( real32 ) module elemental function taylor_series_exp_033_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_exp_033_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_033_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 34th order Taylor series interface taylor_series_exp_034 real ( real32 ) module elemental function taylor_series_exp_034_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_exp_034_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_034_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 35th order Taylor series interface taylor_series_exp_035 real ( real32 ) module elemental function taylor_series_exp_035_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_exp_035_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_035_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 36th order Taylor series interface taylor_series_exp_036 real ( real32 ) module elemental function taylor_series_exp_036_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_exp_036_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_036_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 37th order Taylor series interface taylor_series_exp_037 real ( real32 ) module elemental function taylor_series_exp_037_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_exp_037_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_037_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 38th order Taylor series interface taylor_series_exp_038 real ( real32 ) module elemental function taylor_series_exp_038_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_exp_038_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_038_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 39th order Taylor series interface taylor_series_exp_039 real ( real64 ) module elemental function taylor_series_exp_039_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_039_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 40th order Taylor series interface taylor_series_exp_040 real ( real64 ) module elemental function taylor_series_exp_040_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_040_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 41st order Taylor series interface taylor_series_exp_041 real ( real64 ) module elemental function taylor_series_exp_041_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_041_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 42nd order Taylor series interface taylor_series_exp_042 real ( real64 ) module elemental function taylor_series_exp_042_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_042_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 43rd order Taylor series interface taylor_series_exp_043 real ( real64 ) module elemental function taylor_series_exp_043_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_043_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 44th order Taylor series interface taylor_series_exp_044 real ( real64 ) module elemental function taylor_series_exp_044_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_044_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 45th order Taylor series interface taylor_series_exp_045 real ( real64 ) module elemental function taylor_series_exp_045_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_045_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 46th order Taylor series interface taylor_series_exp_046 real ( real64 ) module elemental function taylor_series_exp_046_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_046_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 47th order Taylor series interface taylor_series_exp_047 real ( real64 ) module elemental function taylor_series_exp_047_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_047_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 48th order Taylor series interface taylor_series_exp_048 real ( real64 ) module elemental function taylor_series_exp_048_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_048_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 49th order Taylor series interface taylor_series_exp_049 real ( real64 ) module elemental function taylor_series_exp_049_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_049_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 50th order Taylor series interface taylor_series_exp_050 real ( real64 ) module elemental function taylor_series_exp_050_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_050_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 51st order Taylor series interface taylor_series_exp_051 real ( real64 ) module elemental function taylor_series_exp_051_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_051_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 52nd order Taylor series interface taylor_series_exp_052 real ( real64 ) module elemental function taylor_series_exp_052_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_052_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 53rd order Taylor series interface taylor_series_exp_053 real ( real64 ) module elemental function taylor_series_exp_053_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_053_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 54th order Taylor series interface taylor_series_exp_054 real ( real64 ) module elemental function taylor_series_exp_054_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_054_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 55th order Taylor series interface taylor_series_exp_055 real ( real64 ) module elemental function taylor_series_exp_055_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_055_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 56th order Taylor series interface taylor_series_exp_056 real ( real64 ) module elemental function taylor_series_exp_056_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_056_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 57th order Taylor series interface taylor_series_exp_057 real ( real64 ) module elemental function taylor_series_exp_057_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_057_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 58th order Taylor series interface taylor_series_exp_058 real ( real64 ) module elemental function taylor_series_exp_058_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_058_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 59th order Taylor series interface taylor_series_exp_059 real ( real64 ) module elemental function taylor_series_exp_059_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_059_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 60th order Taylor series interface taylor_series_exp_060 real ( real64 ) module elemental function taylor_series_exp_060_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_060_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 61st order Taylor series interface taylor_series_exp_061 real ( real64 ) module elemental function taylor_series_exp_061_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_061_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 62nd order Taylor series interface taylor_series_exp_062 real ( real64 ) module elemental function taylor_series_exp_062_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_062_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 63rd order Taylor series interface taylor_series_exp_063 real ( real64 ) module elemental function taylor_series_exp_063_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_063_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 64th order Taylor series interface taylor_series_exp_064 real ( real64 ) module elemental function taylor_series_exp_064_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_064_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 65th order Taylor series interface taylor_series_exp_065 real ( real64 ) module elemental function taylor_series_exp_065_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_065_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 66th order Taylor series interface taylor_series_exp_066 real ( real64 ) module elemental function taylor_series_exp_066_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_066_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 67th order Taylor series interface taylor_series_exp_067 real ( real64 ) module elemental function taylor_series_exp_067_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_067_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 68th order Taylor series interface taylor_series_exp_068 real ( real64 ) module elemental function taylor_series_exp_068_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_068_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 69th order Taylor series interface taylor_series_exp_069 real ( real64 ) module elemental function taylor_series_exp_069_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_069_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 70th order Taylor series interface taylor_series_exp_070 real ( real64 ) module elemental function taylor_series_exp_070_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_070_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 71st order Taylor series interface taylor_series_exp_071 real ( real64 ) module elemental function taylor_series_exp_071_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_071_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 72nd order Taylor series interface taylor_series_exp_072 real ( real64 ) module elemental function taylor_series_exp_072_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_072_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 73rd order Taylor series interface taylor_series_exp_073 real ( real64 ) module elemental function taylor_series_exp_073_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_073_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 74th order Taylor series interface taylor_series_exp_074 real ( real64 ) module elemental function taylor_series_exp_074_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_074_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 75th order Taylor series interface taylor_series_exp_075 real ( real64 ) module elemental function taylor_series_exp_075_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_075_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 76th order Taylor series interface taylor_series_exp_076 real ( real64 ) module elemental function taylor_series_exp_076_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_076_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 77th order Taylor series interface taylor_series_exp_077 real ( real64 ) module elemental function taylor_series_exp_077_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_077_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 78th order Taylor series interface taylor_series_exp_078 real ( real64 ) module elemental function taylor_series_exp_078_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_078_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 79th order Taylor series interface taylor_series_exp_079 real ( real64 ) module elemental function taylor_series_exp_079_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_079_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 80th order Taylor series interface taylor_series_exp_080 real ( real64 ) module elemental function taylor_series_exp_080_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_080_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 81st order Taylor series interface taylor_series_exp_081 real ( real64 ) module elemental function taylor_series_exp_081_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_081_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 82nd order Taylor series interface taylor_series_exp_082 real ( real64 ) module elemental function taylor_series_exp_082_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_082_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 83rd order Taylor series interface taylor_series_exp_083 real ( real64 ) module elemental function taylor_series_exp_083_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_083_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 84th order Taylor series interface taylor_series_exp_084 real ( real64 ) module elemental function taylor_series_exp_084_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_084_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 85th order Taylor series interface taylor_series_exp_085 real ( real64 ) module elemental function taylor_series_exp_085_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_085_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 86th order Taylor series interface taylor_series_exp_086 real ( real64 ) module elemental function taylor_series_exp_086_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_086_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 87th order Taylor series interface taylor_series_exp_087 real ( real64 ) module elemental function taylor_series_exp_087_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_087_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 88th order Taylor series interface taylor_series_exp_088 real ( real64 ) module elemental function taylor_series_exp_088_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_088_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 89th order Taylor series interface taylor_series_exp_089 real ( real64 ) module elemental function taylor_series_exp_089_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_089_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 90th order Taylor series interface taylor_series_exp_090 real ( real64 ) module elemental function taylor_series_exp_090_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_090_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 91st order Taylor series interface taylor_series_exp_091 real ( real64 ) module elemental function taylor_series_exp_091_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_091_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 92nd order Taylor series interface taylor_series_exp_092 real ( real64 ) module elemental function taylor_series_exp_092_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_092_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 93rd order Taylor series interface taylor_series_exp_093 real ( real64 ) module elemental function taylor_series_exp_093_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_093_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 94th order Taylor series interface taylor_series_exp_094 real ( real64 ) module elemental function taylor_series_exp_094_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_094_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 95th order Taylor series interface taylor_series_exp_095 real ( real64 ) module elemental function taylor_series_exp_095_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_095_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 96th order Taylor series interface taylor_series_exp_096 real ( real64 ) module elemental function taylor_series_exp_096_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_096_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 97th order Taylor series interface taylor_series_exp_097 real ( real64 ) module elemental function taylor_series_exp_097_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_097_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 98th order Taylor series interface taylor_series_exp_098 real ( real64 ) module elemental function taylor_series_exp_098_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_098_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 99th order Taylor series interface taylor_series_exp_099 real ( real64 ) module elemental function taylor_series_exp_099_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_099_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 100th order Taylor series interface taylor_series_exp_100 real ( real64 ) module elemental function taylor_series_exp_100_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_100_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 101st order Taylor series interface taylor_series_exp_101 real ( real64 ) module elemental function taylor_series_exp_101_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_101_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 102nd order Taylor series interface taylor_series_exp_102 real ( real64 ) module elemental function taylor_series_exp_102_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_102_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 103rd order Taylor series interface taylor_series_exp_103 real ( real64 ) module elemental function taylor_series_exp_103_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_103_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 104th order Taylor series interface taylor_series_exp_104 real ( real64 ) module elemental function taylor_series_exp_104_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_104_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 105th order Taylor series interface taylor_series_exp_105 real ( real64 ) module elemental function taylor_series_exp_105_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_105_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 106th order Taylor series interface taylor_series_exp_106 real ( real64 ) module elemental function taylor_series_exp_106_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_106_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 107th order Taylor series interface taylor_series_exp_107 real ( real64 ) module elemental function taylor_series_exp_107_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_107_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 108th order Taylor series interface taylor_series_exp_108 real ( real64 ) module elemental function taylor_series_exp_108_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_108_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 109th order Taylor series interface taylor_series_exp_109 real ( real64 ) module elemental function taylor_series_exp_109_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_109_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 110th order Taylor series interface taylor_series_exp_110 real ( real64 ) module elemental function taylor_series_exp_110_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_110_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 111th order Taylor series interface taylor_series_exp_111 real ( real64 ) module elemental function taylor_series_exp_111_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_111_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 112th order Taylor series interface taylor_series_exp_112 real ( real64 ) module elemental function taylor_series_exp_112_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_112_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 113th order Taylor series interface taylor_series_exp_113 real ( real64 ) module elemental function taylor_series_exp_113_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_113_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 114th order Taylor series interface taylor_series_exp_114 real ( real64 ) module elemental function taylor_series_exp_114_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_114_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 115th order Taylor series interface taylor_series_exp_115 real ( real64 ) module elemental function taylor_series_exp_115_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_115_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 116th order Taylor series interface taylor_series_exp_116 real ( real64 ) module elemental function taylor_series_exp_116_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_116_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 117th order Taylor series interface taylor_series_exp_117 real ( real64 ) module elemental function taylor_series_exp_117_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_117_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 118th order Taylor series interface taylor_series_exp_118 real ( real64 ) module elemental function taylor_series_exp_118_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_118_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 119th order Taylor series interface taylor_series_exp_119 real ( real64 ) module elemental function taylor_series_exp_119_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_119_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 120th order Taylor series interface taylor_series_exp_120 real ( real64 ) module elemental function taylor_series_exp_120_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_120_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 121st order Taylor series interface taylor_series_exp_121 real ( real64 ) module elemental function taylor_series_exp_121_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_121_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 122nd order Taylor series interface taylor_series_exp_122 real ( real64 ) module elemental function taylor_series_exp_122_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_122_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 123rd order Taylor series interface taylor_series_exp_123 real ( real64 ) module elemental function taylor_series_exp_123_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_123_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 124th order Taylor series interface taylor_series_exp_124 real ( real64 ) module elemental function taylor_series_exp_124_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_124_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 125th order Taylor series interface taylor_series_exp_125 real ( real64 ) module elemental function taylor_series_exp_125_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_125_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 126th order Taylor series interface taylor_series_exp_126 real ( real64 ) module elemental function taylor_series_exp_126_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_126_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 127th order Taylor series interface taylor_series_exp_127 real ( real64 ) module elemental function taylor_series_exp_127_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_127_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 128th order Taylor series interface taylor_series_exp_128 real ( real64 ) module elemental function taylor_series_exp_128_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_128_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 129th order Taylor series interface taylor_series_exp_129 real ( real64 ) module elemental function taylor_series_exp_129_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_129_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 130th order Taylor series interface taylor_series_exp_130 real ( real64 ) module elemental function taylor_series_exp_130_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_130_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 131st order Taylor series interface taylor_series_exp_131 real ( real64 ) module elemental function taylor_series_exp_131_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_131_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 132nd order Taylor series interface taylor_series_exp_132 real ( real64 ) module elemental function taylor_series_exp_132_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_132_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 133rd order Taylor series interface taylor_series_exp_133 real ( real64 ) module elemental function taylor_series_exp_133_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_133_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 134th order Taylor series interface taylor_series_exp_134 real ( real64 ) module elemental function taylor_series_exp_134_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_134_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 135th order Taylor series interface taylor_series_exp_135 real ( real64 ) module elemental function taylor_series_exp_135_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_135_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 136th order Taylor series interface taylor_series_exp_136 real ( real64 ) module elemental function taylor_series_exp_136_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_136_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 137th order Taylor series interface taylor_series_exp_137 real ( real64 ) module elemental function taylor_series_exp_137_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_137_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 138th order Taylor series interface taylor_series_exp_138 real ( real64 ) module elemental function taylor_series_exp_138_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_138_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 139th order Taylor series interface taylor_series_exp_139 real ( real64 ) module elemental function taylor_series_exp_139_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_139_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 140th order Taylor series interface taylor_series_exp_140 real ( real64 ) module elemental function taylor_series_exp_140_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_140_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 141st order Taylor series interface taylor_series_exp_141 real ( real64 ) module elemental function taylor_series_exp_141_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_141_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 142nd order Taylor series interface taylor_series_exp_142 real ( real64 ) module elemental function taylor_series_exp_142_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_142_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 143rd order Taylor series interface taylor_series_exp_143 real ( real64 ) module elemental function taylor_series_exp_143_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_143_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 144th order Taylor series interface taylor_series_exp_144 real ( real64 ) module elemental function taylor_series_exp_144_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_144_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 145th order Taylor series interface taylor_series_exp_145 real ( real64 ) module elemental function taylor_series_exp_145_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_145_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 146th order Taylor series interface taylor_series_exp_146 real ( real64 ) module elemental function taylor_series_exp_146_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_146_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 147th order Taylor series interface taylor_series_exp_147 real ( real64 ) module elemental function taylor_series_exp_147_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_147_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 148th order Taylor series interface taylor_series_exp_148 real ( real64 ) module elemental function taylor_series_exp_148_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_148_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 149th order Taylor series interface taylor_series_exp_149 real ( real64 ) module elemental function taylor_series_exp_149_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_149_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 150th order Taylor series interface taylor_series_exp_150 real ( real64 ) module elemental function taylor_series_exp_150_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_150_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 151st order Taylor series interface taylor_series_exp_151 real ( real64 ) module elemental function taylor_series_exp_151_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_151_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 152nd order Taylor series interface taylor_series_exp_152 real ( real64 ) module elemental function taylor_series_exp_152_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_152_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 153rd order Taylor series interface taylor_series_exp_153 real ( real64 ) module elemental function taylor_series_exp_153_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_153_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 154th order Taylor series interface taylor_series_exp_154 real ( real64 ) module elemental function taylor_series_exp_154_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_154_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 155th order Taylor series interface taylor_series_exp_155 real ( real64 ) module elemental function taylor_series_exp_155_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_155_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 156th order Taylor series interface taylor_series_exp_156 real ( real64 ) module elemental function taylor_series_exp_156_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_156_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 157th order Taylor series interface taylor_series_exp_157 real ( real64 ) module elemental function taylor_series_exp_157_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_157_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 158th order Taylor series interface taylor_series_exp_158 real ( real64 ) module elemental function taylor_series_exp_158_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_158_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 159th order Taylor series interface taylor_series_exp_159 real ( real64 ) module elemental function taylor_series_exp_159_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_159_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 160th order Taylor series interface taylor_series_exp_160 real ( real64 ) module elemental function taylor_series_exp_160_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_160_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 161st order Taylor series interface taylor_series_exp_161 real ( real64 ) module elemental function taylor_series_exp_161_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_161_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 162nd order Taylor series interface taylor_series_exp_162 real ( real64 ) module elemental function taylor_series_exp_162_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_162_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 163rd order Taylor series interface taylor_series_exp_163 real ( real64 ) module elemental function taylor_series_exp_163_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_163_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 164th order Taylor series interface taylor_series_exp_164 real ( real64 ) module elemental function taylor_series_exp_164_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_164_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 165th order Taylor series interface taylor_series_exp_165 real ( real64 ) module elemental function taylor_series_exp_165_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_165_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 166th order Taylor series interface taylor_series_exp_166 real ( real64 ) module elemental function taylor_series_exp_166_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_166_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 167th order Taylor series interface taylor_series_exp_167 real ( real64 ) module elemental function taylor_series_exp_167_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_167_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 168th order Taylor series interface taylor_series_exp_168 real ( real64 ) module elemental function taylor_series_exp_168_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_168_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 169th order Taylor series interface taylor_series_exp_169 real ( real64 ) module elemental function taylor_series_exp_169_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_169_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 170th order Taylor series interface taylor_series_exp_170 real ( real64 ) module elemental function taylor_series_exp_170_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_170_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 171st order Taylor series interface taylor_series_exp_171 real ( real64 ) module elemental function taylor_series_exp_171_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_171_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 172nd order Taylor series interface taylor_series_exp_172 real ( real64 ) module elemental function taylor_series_exp_172_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_172_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 173rd order Taylor series interface taylor_series_exp_173 real ( real64 ) module elemental function taylor_series_exp_173_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_173_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 174th order Taylor series interface taylor_series_exp_174 real ( real64 ) module elemental function taylor_series_exp_174_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_174_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 175th order Taylor series interface taylor_series_exp_175 real ( real64 ) module elemental function taylor_series_exp_175_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_175_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 176th order Taylor series interface taylor_series_exp_176 real ( real64 ) module elemental function taylor_series_exp_176_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_176_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `exp(x)` approximation by a 177th order Taylor series interface taylor_series_exp_177 real ( real64 ) module elemental function taylor_series_exp_177_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_exp_177_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 0th order Taylor series interface taylor_series_sin_000 real ( real32 ) module elemental function taylor_series_sin_000_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_sin_000_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_000_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 1st order Taylor series interface taylor_series_sin_001 real ( real32 ) module elemental function taylor_series_sin_001_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_sin_001_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_001_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 2nd order Taylor series interface taylor_series_sin_002 real ( real32 ) module elemental function taylor_series_sin_002_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_sin_002_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_002_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 3rd order Taylor series interface taylor_series_sin_003 real ( real32 ) module elemental function taylor_series_sin_003_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_sin_003_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_003_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 4th order Taylor series interface taylor_series_sin_004 real ( real32 ) module elemental function taylor_series_sin_004_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_sin_004_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_004_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 5th order Taylor series interface taylor_series_sin_005 real ( real32 ) module elemental function taylor_series_sin_005_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_sin_005_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_005_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 6th order Taylor series interface taylor_series_sin_006 real ( real32 ) module elemental function taylor_series_sin_006_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_sin_006_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_006_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 7th order Taylor series interface taylor_series_sin_007 real ( real32 ) module elemental function taylor_series_sin_007_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_sin_007_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_007_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 8th order Taylor series interface taylor_series_sin_008 real ( real32 ) module elemental function taylor_series_sin_008_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_sin_008_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_008_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 9th order Taylor series interface taylor_series_sin_009 real ( real32 ) module elemental function taylor_series_sin_009_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_sin_009_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_009_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 10th order Taylor series interface taylor_series_sin_010 real ( real32 ) module elemental function taylor_series_sin_010_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_sin_010_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_010_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 11th order Taylor series interface taylor_series_sin_011 real ( real32 ) module elemental function taylor_series_sin_011_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_sin_011_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_011_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 12th order Taylor series interface taylor_series_sin_012 real ( real32 ) module elemental function taylor_series_sin_012_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_sin_012_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_012_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 13th order Taylor series interface taylor_series_sin_013 real ( real32 ) module elemental function taylor_series_sin_013_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_sin_013_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_013_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 14th order Taylor series interface taylor_series_sin_014 real ( real32 ) module elemental function taylor_series_sin_014_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_sin_014_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_014_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 15th order Taylor series interface taylor_series_sin_015 real ( real32 ) module elemental function taylor_series_sin_015_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_sin_015_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_015_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 16th order Taylor series interface taylor_series_sin_016 real ( real32 ) module elemental function taylor_series_sin_016_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_sin_016_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_016_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 17th order Taylor series interface taylor_series_sin_017 real ( real32 ) module elemental function taylor_series_sin_017_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_sin_017_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_017_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 18th order Taylor series interface taylor_series_sin_018 real ( real32 ) module elemental function taylor_series_sin_018_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_sin_018_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_018_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 19th order Taylor series interface taylor_series_sin_019 real ( real32 ) module elemental function taylor_series_sin_019_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_sin_019_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_019_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 20th order Taylor series interface taylor_series_sin_020 real ( real32 ) module elemental function taylor_series_sin_020_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_sin_020_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_020_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 21st order Taylor series interface taylor_series_sin_021 real ( real32 ) module elemental function taylor_series_sin_021_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_sin_021_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_021_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 22nd order Taylor series interface taylor_series_sin_022 real ( real32 ) module elemental function taylor_series_sin_022_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_sin_022_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_022_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 23rd order Taylor series interface taylor_series_sin_023 real ( real32 ) module elemental function taylor_series_sin_023_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_sin_023_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_023_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 24th order Taylor series interface taylor_series_sin_024 real ( real32 ) module elemental function taylor_series_sin_024_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_sin_024_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_024_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 25th order Taylor series interface taylor_series_sin_025 real ( real32 ) module elemental function taylor_series_sin_025_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_sin_025_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_025_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 26th order Taylor series interface taylor_series_sin_026 real ( real32 ) module elemental function taylor_series_sin_026_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_sin_026_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_026_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 27th order Taylor series interface taylor_series_sin_027 real ( real32 ) module elemental function taylor_series_sin_027_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_sin_027_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_027_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 28th order Taylor series interface taylor_series_sin_028 real ( real32 ) module elemental function taylor_series_sin_028_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_sin_028_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_028_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 29th order Taylor series interface taylor_series_sin_029 real ( real32 ) module elemental function taylor_series_sin_029_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_sin_029_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_029_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 30th order Taylor series interface taylor_series_sin_030 real ( real32 ) module elemental function taylor_series_sin_030_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_sin_030_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_030_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 31st order Taylor series interface taylor_series_sin_031 real ( real32 ) module elemental function taylor_series_sin_031_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_sin_031_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_031_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 32nd order Taylor series interface taylor_series_sin_032 real ( real32 ) module elemental function taylor_series_sin_032_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_sin_032_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_032_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 33rd order Taylor series interface taylor_series_sin_033 real ( real32 ) module elemental function taylor_series_sin_033_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_sin_033_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_033_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 34th order Taylor series interface taylor_series_sin_034 real ( real32 ) module elemental function taylor_series_sin_034_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_sin_034_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_034_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 35th order Taylor series interface taylor_series_sin_035 real ( real32 ) module elemental function taylor_series_sin_035_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_sin_035_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_035_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 36th order Taylor series interface taylor_series_sin_036 real ( real32 ) module elemental function taylor_series_sin_036_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_sin_036_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_036_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 37th order Taylor series interface taylor_series_sin_037 real ( real32 ) module elemental function taylor_series_sin_037_real32 ( x ) result ( res ); real ( real32 ), intent ( in ) :: x ; end function real ( real64 ) module elemental function taylor_series_sin_037_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_037_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 38th order Taylor series interface taylor_series_sin_038 real ( real64 ) module elemental function taylor_series_sin_038_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_038_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 39th order Taylor series interface taylor_series_sin_039 real ( real64 ) module elemental function taylor_series_sin_039_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_039_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 40th order Taylor series interface taylor_series_sin_040 real ( real64 ) module elemental function taylor_series_sin_040_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_040_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 41st order Taylor series interface taylor_series_sin_041 real ( real64 ) module elemental function taylor_series_sin_041_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_041_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 42nd order Taylor series interface taylor_series_sin_042 real ( real64 ) module elemental function taylor_series_sin_042_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_042_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 43rd order Taylor series interface taylor_series_sin_043 real ( real64 ) module elemental function taylor_series_sin_043_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_043_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 44th order Taylor series interface taylor_series_sin_044 real ( real64 ) module elemental function taylor_series_sin_044_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_044_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 45th order Taylor series interface taylor_series_sin_045 real ( real64 ) module elemental function taylor_series_sin_045_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_045_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 46th order Taylor series interface taylor_series_sin_046 real ( real64 ) module elemental function taylor_series_sin_046_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_046_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 47th order Taylor series interface taylor_series_sin_047 real ( real64 ) module elemental function taylor_series_sin_047_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_047_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 48th order Taylor series interface taylor_series_sin_048 real ( real64 ) module elemental function taylor_series_sin_048_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_048_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 49th order Taylor series interface taylor_series_sin_049 real ( real64 ) module elemental function taylor_series_sin_049_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_049_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 50th order Taylor series interface taylor_series_sin_050 real ( real64 ) module elemental function taylor_series_sin_050_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_050_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 51st order Taylor series interface taylor_series_sin_051 real ( real64 ) module elemental function taylor_series_sin_051_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_051_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 52nd order Taylor series interface taylor_series_sin_052 real ( real64 ) module elemental function taylor_series_sin_052_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_052_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 53rd order Taylor series interface taylor_series_sin_053 real ( real64 ) module elemental function taylor_series_sin_053_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_053_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 54th order Taylor series interface taylor_series_sin_054 real ( real64 ) module elemental function taylor_series_sin_054_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_054_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 55th order Taylor series interface taylor_series_sin_055 real ( real64 ) module elemental function taylor_series_sin_055_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_055_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 56th order Taylor series interface taylor_series_sin_056 real ( real64 ) module elemental function taylor_series_sin_056_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_056_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 57th order Taylor series interface taylor_series_sin_057 real ( real64 ) module elemental function taylor_series_sin_057_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_057_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 58th order Taylor series interface taylor_series_sin_058 real ( real64 ) module elemental function taylor_series_sin_058_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_058_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 59th order Taylor series interface taylor_series_sin_059 real ( real64 ) module elemental function taylor_series_sin_059_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_059_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 60th order Taylor series interface taylor_series_sin_060 real ( real64 ) module elemental function taylor_series_sin_060_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_060_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 61st order Taylor series interface taylor_series_sin_061 real ( real64 ) module elemental function taylor_series_sin_061_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_061_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 62nd order Taylor series interface taylor_series_sin_062 real ( real64 ) module elemental function taylor_series_sin_062_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_062_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 63rd order Taylor series interface taylor_series_sin_063 real ( real64 ) module elemental function taylor_series_sin_063_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_063_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 64th order Taylor series interface taylor_series_sin_064 real ( real64 ) module elemental function taylor_series_sin_064_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_064_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 65th order Taylor series interface taylor_series_sin_065 real ( real64 ) module elemental function taylor_series_sin_065_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_065_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 66th order Taylor series interface taylor_series_sin_066 real ( real64 ) module elemental function taylor_series_sin_066_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_066_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 67th order Taylor series interface taylor_series_sin_067 real ( real64 ) module elemental function taylor_series_sin_067_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_067_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 68th order Taylor series interface taylor_series_sin_068 real ( real64 ) module elemental function taylor_series_sin_068_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_068_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 69th order Taylor series interface taylor_series_sin_069 real ( real64 ) module elemental function taylor_series_sin_069_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_069_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 70th order Taylor series interface taylor_series_sin_070 real ( real64 ) module elemental function taylor_series_sin_070_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_070_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 71st order Taylor series interface taylor_series_sin_071 real ( real64 ) module elemental function taylor_series_sin_071_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_071_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 72nd order Taylor series interface taylor_series_sin_072 real ( real64 ) module elemental function taylor_series_sin_072_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_072_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 73rd order Taylor series interface taylor_series_sin_073 real ( real64 ) module elemental function taylor_series_sin_073_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_073_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 74th order Taylor series interface taylor_series_sin_074 real ( real64 ) module elemental function taylor_series_sin_074_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_074_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 75th order Taylor series interface taylor_series_sin_075 real ( real64 ) module elemental function taylor_series_sin_075_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_075_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 76th order Taylor series interface taylor_series_sin_076 real ( real64 ) module elemental function taylor_series_sin_076_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_076_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 77th order Taylor series interface taylor_series_sin_077 real ( real64 ) module elemental function taylor_series_sin_077_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_077_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 78th order Taylor series interface taylor_series_sin_078 real ( real64 ) module elemental function taylor_series_sin_078_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_078_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 79th order Taylor series interface taylor_series_sin_079 real ( real64 ) module elemental function taylor_series_sin_079_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_079_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 80th order Taylor series interface taylor_series_sin_080 real ( real64 ) module elemental function taylor_series_sin_080_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_080_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 81st order Taylor series interface taylor_series_sin_081 real ( real64 ) module elemental function taylor_series_sin_081_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_081_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 82nd order Taylor series interface taylor_series_sin_082 real ( real64 ) module elemental function taylor_series_sin_082_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_082_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 83rd order Taylor series interface taylor_series_sin_083 real ( real64 ) module elemental function taylor_series_sin_083_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_083_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 84th order Taylor series interface taylor_series_sin_084 real ( real64 ) module elemental function taylor_series_sin_084_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_084_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 85th order Taylor series interface taylor_series_sin_085 real ( real64 ) module elemental function taylor_series_sin_085_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_085_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 86th order Taylor series interface taylor_series_sin_086 real ( real64 ) module elemental function taylor_series_sin_086_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_086_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 87th order Taylor series interface taylor_series_sin_087 real ( real64 ) module elemental function taylor_series_sin_087_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_087_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 88th order Taylor series interface taylor_series_sin_088 real ( real64 ) module elemental function taylor_series_sin_088_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_088_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 89th order Taylor series interface taylor_series_sin_089 real ( real64 ) module elemental function taylor_series_sin_089_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_089_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 90th order Taylor series interface taylor_series_sin_090 real ( real64 ) module elemental function taylor_series_sin_090_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_090_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 91st order Taylor series interface taylor_series_sin_091 real ( real64 ) module elemental function taylor_series_sin_091_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_091_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 92nd order Taylor series interface taylor_series_sin_092 real ( real64 ) module elemental function taylor_series_sin_092_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_092_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 93rd order Taylor series interface taylor_series_sin_093 real ( real64 ) module elemental function taylor_series_sin_093_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_093_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 94th order Taylor series interface taylor_series_sin_094 real ( real64 ) module elemental function taylor_series_sin_094_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_094_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 95th order Taylor series interface taylor_series_sin_095 real ( real64 ) module elemental function taylor_series_sin_095_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_095_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 96th order Taylor series interface taylor_series_sin_096 real ( real64 ) module elemental function taylor_series_sin_096_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_096_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 97th order Taylor series interface taylor_series_sin_097 real ( real64 ) module elemental function taylor_series_sin_097_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_097_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 98th order Taylor series interface taylor_series_sin_098 real ( real64 ) module elemental function taylor_series_sin_098_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_098_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 99th order Taylor series interface taylor_series_sin_099 real ( real64 ) module elemental function taylor_series_sin_099_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_099_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 100th order Taylor series interface taylor_series_sin_100 real ( real64 ) module elemental function taylor_series_sin_100_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_100_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 101st order Taylor series interface taylor_series_sin_101 real ( real64 ) module elemental function taylor_series_sin_101_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_101_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 102nd order Taylor series interface taylor_series_sin_102 real ( real64 ) module elemental function taylor_series_sin_102_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_102_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 103rd order Taylor series interface taylor_series_sin_103 real ( real64 ) module elemental function taylor_series_sin_103_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_103_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 104th order Taylor series interface taylor_series_sin_104 real ( real64 ) module elemental function taylor_series_sin_104_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_104_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 105th order Taylor series interface taylor_series_sin_105 real ( real64 ) module elemental function taylor_series_sin_105_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_105_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 106th order Taylor series interface taylor_series_sin_106 real ( real64 ) module elemental function taylor_series_sin_106_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_106_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 107th order Taylor series interface taylor_series_sin_107 real ( real64 ) module elemental function taylor_series_sin_107_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_107_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 108th order Taylor series interface taylor_series_sin_108 real ( real64 ) module elemental function taylor_series_sin_108_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_108_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 109th order Taylor series interface taylor_series_sin_109 real ( real64 ) module elemental function taylor_series_sin_109_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_109_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 110th order Taylor series interface taylor_series_sin_110 real ( real64 ) module elemental function taylor_series_sin_110_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_110_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 111th order Taylor series interface taylor_series_sin_111 real ( real64 ) module elemental function taylor_series_sin_111_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_111_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 112th order Taylor series interface taylor_series_sin_112 real ( real64 ) module elemental function taylor_series_sin_112_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_112_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 113th order Taylor series interface taylor_series_sin_113 real ( real64 ) module elemental function taylor_series_sin_113_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_113_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 114th order Taylor series interface taylor_series_sin_114 real ( real64 ) module elemental function taylor_series_sin_114_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_114_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 115th order Taylor series interface taylor_series_sin_115 real ( real64 ) module elemental function taylor_series_sin_115_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_115_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 116th order Taylor series interface taylor_series_sin_116 real ( real64 ) module elemental function taylor_series_sin_116_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_116_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 117th order Taylor series interface taylor_series_sin_117 real ( real64 ) module elemental function taylor_series_sin_117_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_117_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 118th order Taylor series interface taylor_series_sin_118 real ( real64 ) module elemental function taylor_series_sin_118_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_118_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 119th order Taylor series interface taylor_series_sin_119 real ( real64 ) module elemental function taylor_series_sin_119_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_119_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 120th order Taylor series interface taylor_series_sin_120 real ( real64 ) module elemental function taylor_series_sin_120_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_120_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 121st order Taylor series interface taylor_series_sin_121 real ( real64 ) module elemental function taylor_series_sin_121_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_121_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 122nd order Taylor series interface taylor_series_sin_122 real ( real64 ) module elemental function taylor_series_sin_122_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_122_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 123rd order Taylor series interface taylor_series_sin_123 real ( real64 ) module elemental function taylor_series_sin_123_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_123_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 124th order Taylor series interface taylor_series_sin_124 real ( real64 ) module elemental function taylor_series_sin_124_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_124_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 125th order Taylor series interface taylor_series_sin_125 real ( real64 ) module elemental function taylor_series_sin_125_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_125_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 126th order Taylor series interface taylor_series_sin_126 real ( real64 ) module elemental function taylor_series_sin_126_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_126_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 127th order Taylor series interface taylor_series_sin_127 real ( real64 ) module elemental function taylor_series_sin_127_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_127_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 128th order Taylor series interface taylor_series_sin_128 real ( real64 ) module elemental function taylor_series_sin_128_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_128_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 129th order Taylor series interface taylor_series_sin_129 real ( real64 ) module elemental function taylor_series_sin_129_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_129_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 130th order Taylor series interface taylor_series_sin_130 real ( real64 ) module elemental function taylor_series_sin_130_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_130_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 131st order Taylor series interface taylor_series_sin_131 real ( real64 ) module elemental function taylor_series_sin_131_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_131_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 132nd order Taylor series interface taylor_series_sin_132 real ( real64 ) module elemental function taylor_series_sin_132_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_132_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 133rd order Taylor series interface taylor_series_sin_133 real ( real64 ) module elemental function taylor_series_sin_133_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_133_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 134th order Taylor series interface taylor_series_sin_134 real ( real64 ) module elemental function taylor_series_sin_134_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_134_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 135th order Taylor series interface taylor_series_sin_135 real ( real64 ) module elemental function taylor_series_sin_135_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_135_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 136th order Taylor series interface taylor_series_sin_136 real ( real64 ) module elemental function taylor_series_sin_136_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_136_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 137th order Taylor series interface taylor_series_sin_137 real ( real64 ) module elemental function taylor_series_sin_137_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_137_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 138th order Taylor series interface taylor_series_sin_138 real ( real64 ) module elemental function taylor_series_sin_138_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_138_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 139th order Taylor series interface taylor_series_sin_139 real ( real64 ) module elemental function taylor_series_sin_139_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_139_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 140th order Taylor series interface taylor_series_sin_140 real ( real64 ) module elemental function taylor_series_sin_140_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_140_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 141st order Taylor series interface taylor_series_sin_141 real ( real64 ) module elemental function taylor_series_sin_141_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_141_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 142nd order Taylor series interface taylor_series_sin_142 real ( real64 ) module elemental function taylor_series_sin_142_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_142_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 143rd order Taylor series interface taylor_series_sin_143 real ( real64 ) module elemental function taylor_series_sin_143_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_143_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 144th order Taylor series interface taylor_series_sin_144 real ( real64 ) module elemental function taylor_series_sin_144_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_144_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 145th order Taylor series interface taylor_series_sin_145 real ( real64 ) module elemental function taylor_series_sin_145_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_145_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 146th order Taylor series interface taylor_series_sin_146 real ( real64 ) module elemental function taylor_series_sin_146_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_146_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 147th order Taylor series interface taylor_series_sin_147 real ( real64 ) module elemental function taylor_series_sin_147_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_147_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 148th order Taylor series interface taylor_series_sin_148 real ( real64 ) module elemental function taylor_series_sin_148_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_148_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 149th order Taylor series interface taylor_series_sin_149 real ( real64 ) module elemental function taylor_series_sin_149_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_149_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 150th order Taylor series interface taylor_series_sin_150 real ( real64 ) module elemental function taylor_series_sin_150_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_150_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 151st order Taylor series interface taylor_series_sin_151 real ( real64 ) module elemental function taylor_series_sin_151_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_151_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 152nd order Taylor series interface taylor_series_sin_152 real ( real64 ) module elemental function taylor_series_sin_152_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_152_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 153rd order Taylor series interface taylor_series_sin_153 real ( real64 ) module elemental function taylor_series_sin_153_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_153_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 154th order Taylor series interface taylor_series_sin_154 real ( real64 ) module elemental function taylor_series_sin_154_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_154_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 155th order Taylor series interface taylor_series_sin_155 real ( real64 ) module elemental function taylor_series_sin_155_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_155_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 156th order Taylor series interface taylor_series_sin_156 real ( real64 ) module elemental function taylor_series_sin_156_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_156_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 157th order Taylor series interface taylor_series_sin_157 real ( real64 ) module elemental function taylor_series_sin_157_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_157_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 158th order Taylor series interface taylor_series_sin_158 real ( real64 ) module elemental function taylor_series_sin_158_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_158_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 159th order Taylor series interface taylor_series_sin_159 real ( real64 ) module elemental function taylor_series_sin_159_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_159_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 160th order Taylor series interface taylor_series_sin_160 real ( real64 ) module elemental function taylor_series_sin_160_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_160_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 161st order Taylor series interface taylor_series_sin_161 real ( real64 ) module elemental function taylor_series_sin_161_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_161_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 162nd order Taylor series interface taylor_series_sin_162 real ( real64 ) module elemental function taylor_series_sin_162_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_162_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 163rd order Taylor series interface taylor_series_sin_163 real ( real64 ) module elemental function taylor_series_sin_163_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_163_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 164th order Taylor series interface taylor_series_sin_164 real ( real64 ) module elemental function taylor_series_sin_164_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_164_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 165th order Taylor series interface taylor_series_sin_165 real ( real64 ) module elemental function taylor_series_sin_165_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_165_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 166th order Taylor series interface taylor_series_sin_166 real ( real64 ) module elemental function taylor_series_sin_166_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_166_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 167th order Taylor series interface taylor_series_sin_167 real ( real64 ) module elemental function taylor_series_sin_167_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_167_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 168th order Taylor series interface taylor_series_sin_168 real ( real64 ) module elemental function taylor_series_sin_168_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_168_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 169th order Taylor series interface taylor_series_sin_169 real ( real64 ) module elemental function taylor_series_sin_169_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_169_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 170th order Taylor series interface taylor_series_sin_170 real ( real64 ) module elemental function taylor_series_sin_170_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_170_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 171st order Taylor series interface taylor_series_sin_171 real ( real64 ) module elemental function taylor_series_sin_171_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_171_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 172nd order Taylor series interface taylor_series_sin_172 real ( real64 ) module elemental function taylor_series_sin_172_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_172_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 173rd order Taylor series interface taylor_series_sin_173 real ( real64 ) module elemental function taylor_series_sin_173_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_173_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 174th order Taylor series interface taylor_series_sin_174 real ( real64 ) module elemental function taylor_series_sin_174_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_174_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 175th order Taylor series interface taylor_series_sin_175 real ( real64 ) module elemental function taylor_series_sin_175_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_175_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 176th order Taylor series interface taylor_series_sin_176 real ( real64 ) module elemental function taylor_series_sin_176_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_176_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface !> `sin(x)` approximation by a 177th order Taylor series interface taylor_series_sin_177 real ( real64 ) module elemental function taylor_series_sin_177_real64 ( x ) result ( res ); real ( real64 ), intent ( in ) :: x ; end function real ( real128 ) module elemental function taylor_series_sin_177_real128 ( x ) result ( res ); real ( real128 ), intent ( in ) :: x ; end function end interface end module taylor_series_fortran","tags":"","url":"sourcefile/main_module.f90.html"},{"title":"main_submodule_sin_real32.f90 – taylor_series_fortran","text":"Source Code !> Implementation of `taylor_series_sin_***` for `real32`. submodule ( taylor_series_fortran ) imp_taylor_series_sin_real32 use , non_intrinsic :: inv_factorial_real32 , only : & ! coefficient_001 => inv_factorial_001 , & ! inv_factorial_003 , & ! coefficient_005 => inv_factorial_005 , & ! inv_factorial_007 , & ! coefficient_009 => inv_factorial_009 , & ! inv_factorial_011 , & ! coefficient_013 => inv_factorial_013 , & ! inv_factorial_015 , & ! coefficient_017 => inv_factorial_017 , & ! inv_factorial_019 , & ! coefficient_021 => inv_factorial_021 , & ! inv_factorial_023 , & ! coefficient_025 => inv_factorial_025 , & ! inv_factorial_027 , & ! coefficient_029 => inv_factorial_029 , & ! inv_factorial_031 , & ! coefficient_033 => inv_factorial_033 , & ! inv_factorial_035 , & ! coefficient_037 => inv_factorial_037 implicit none real ( real32 ), parameter :: coefficient_000 = 0.0_real32 real ( real32 ), parameter :: coefficient_002 = 0.0_real32 real ( real32 ), parameter :: coefficient_003 = - inv_factorial_003 real ( real32 ), parameter :: coefficient_004 = 0.0_real32 real ( real32 ), parameter :: coefficient_006 = 0.0_real32 real ( real32 ), parameter :: coefficient_007 = - inv_factorial_007 real ( real32 ), parameter :: coefficient_008 = 0.0_real32 real ( real32 ), parameter :: coefficient_010 = 0.0_real32 real ( real32 ), parameter :: coefficient_011 = - inv_factorial_011 real ( real32 ), parameter :: coefficient_012 = 0.0_real32 real ( real32 ), parameter :: coefficient_014 = 0.0_real32 real ( real32 ), parameter :: coefficient_015 = - inv_factorial_015 real ( real32 ), parameter :: coefficient_016 = 0.0_real32 real ( real32 ), parameter :: coefficient_018 = 0.0_real32 real ( real32 ), parameter :: coefficient_019 = - inv_factorial_019 real ( real32 ), parameter :: coefficient_020 = 0.0_real32 real ( real32 ), parameter :: coefficient_022 = 0.0_real32 real ( real32 ), parameter :: coefficient_023 = - inv_factorial_023 real ( real32 ), parameter :: coefficient_024 = 0.0_real32 real ( real32 ), parameter :: coefficient_026 = 0.0_real32 real ( real32 ), parameter :: coefficient_027 = - inv_factorial_027 real ( real32 ), parameter :: coefficient_028 = 0.0_real32 real ( real32 ), parameter :: coefficient_030 = 0.0_real32 real ( real32 ), parameter :: coefficient_031 = - inv_factorial_031 real ( real32 ), parameter :: coefficient_032 = 0.0_real32 real ( real32 ), parameter :: coefficient_034 = 0.0_real32 real ( real32 ), parameter :: coefficient_035 = - inv_factorial_035 real ( real32 ), parameter :: coefficient_036 = 0.0_real32 contains module procedure taylor_series_sin_000_real32 res = horner_000 ( x = x , pre_step = 0.0_real32 ) end procedure taylor_series_sin_000_real32 module procedure taylor_series_sin_001_real32 res = horner_000 ( x = x , pre_step = coefficient_001 ) end procedure taylor_series_sin_001_real32 module procedure taylor_series_sin_002_real32 res = taylor_series_sin_001_real32 ( x ) end procedure taylor_series_sin_002_real32 module procedure taylor_series_sin_003_real32 res = horner_002 ( x = x , pre_step = coefficient_003 ) end procedure taylor_series_sin_003_real32 module procedure taylor_series_sin_004_real32 res = taylor_series_sin_003_real32 ( x ) end procedure taylor_series_sin_004_real32 module procedure taylor_series_sin_005_real32 res = horner_004 ( x = x , pre_step = coefficient_005 ) end procedure taylor_series_sin_005_real32 module procedure taylor_series_sin_006_real32 res = taylor_series_sin_005_real32 ( x ) end procedure taylor_series_sin_006_real32 module procedure taylor_series_sin_007_real32 res = horner_006 ( x = x , pre_step = coefficient_007 ) end procedure taylor_series_sin_007_real32 module procedure taylor_series_sin_008_real32 res = taylor_series_sin_007_real32 ( x ) end procedure taylor_series_sin_008_real32 module procedure taylor_series_sin_009_real32 res = horner_008 ( x = x , pre_step = coefficient_009 ) end procedure taylor_series_sin_009_real32 module procedure taylor_series_sin_010_real32 res = taylor_series_sin_009_real32 ( x ) end procedure taylor_series_sin_010_real32 module procedure taylor_series_sin_011_real32 res = horner_010 ( x = x , pre_step = coefficient_011 ) end procedure taylor_series_sin_011_real32 module procedure taylor_series_sin_012_real32 res = taylor_series_sin_011_real32 ( x ) end procedure taylor_series_sin_012_real32 module procedure taylor_series_sin_013_real32 res = horner_012 ( x = x , pre_step = coefficient_013 ) end procedure taylor_series_sin_013_real32 module procedure taylor_series_sin_014_real32 res = taylor_series_sin_013_real32 ( x ) end procedure taylor_series_sin_014_real32 module procedure taylor_series_sin_015_real32 res = horner_014 ( x = x , pre_step = coefficient_015 ) end procedure taylor_series_sin_015_real32 module procedure taylor_series_sin_016_real32 res = taylor_series_sin_015_real32 ( x ) end procedure taylor_series_sin_016_real32 module procedure taylor_series_sin_017_real32 res = horner_016 ( x = x , pre_step = coefficient_017 ) end procedure taylor_series_sin_017_real32 module procedure taylor_series_sin_018_real32 res = taylor_series_sin_017_real32 ( x ) end procedure taylor_series_sin_018_real32 module procedure taylor_series_sin_019_real32 res = horner_018 ( x = x , pre_step = coefficient_019 ) end procedure taylor_series_sin_019_real32 module procedure taylor_series_sin_020_real32 res = taylor_series_sin_019_real32 ( x ) end procedure taylor_series_sin_020_real32 module procedure taylor_series_sin_021_real32 res = horner_020 ( x = x , pre_step = coefficient_021 ) end procedure taylor_series_sin_021_real32 module procedure taylor_series_sin_022_real32 res = taylor_series_sin_021_real32 ( x ) end procedure taylor_series_sin_022_real32 module procedure taylor_series_sin_023_real32 res = horner_022 ( x = x , pre_step = coefficient_023 ) end procedure taylor_series_sin_023_real32 module procedure taylor_series_sin_024_real32 res = taylor_series_sin_023_real32 ( x ) end procedure taylor_series_sin_024_real32 module procedure taylor_series_sin_025_real32 res = horner_024 ( x = x , pre_step = coefficient_025 ) end procedure taylor_series_sin_025_real32 module procedure taylor_series_sin_026_real32 res = taylor_series_sin_025_real32 ( x ) end procedure taylor_series_sin_026_real32 module procedure taylor_series_sin_027_real32 res = horner_026 ( x = x , pre_step = coefficient_027 ) end procedure taylor_series_sin_027_real32 module procedure taylor_series_sin_028_real32 res = taylor_series_sin_027_real32 ( x ) end procedure taylor_series_sin_028_real32 module procedure taylor_series_sin_029_real32 res = horner_028 ( x = x , pre_step = coefficient_029 ) end procedure taylor_series_sin_029_real32 module procedure taylor_series_sin_030_real32 res = taylor_series_sin_029_real32 ( x ) end procedure taylor_series_sin_030_real32 module procedure taylor_series_sin_031_real32 res = horner_030 ( x = x , pre_step = coefficient_031 ) end procedure taylor_series_sin_031_real32 module procedure taylor_series_sin_032_real32 res = taylor_series_sin_031_real32 ( x ) end procedure taylor_series_sin_032_real32 module procedure taylor_series_sin_033_real32 res = horner_032 ( x = x , pre_step = coefficient_033 ) end procedure taylor_series_sin_033_real32 module procedure taylor_series_sin_034_real32 res = taylor_series_sin_033_real32 ( x ) end procedure taylor_series_sin_034_real32 module procedure taylor_series_sin_035_real32 res = horner_034 ( x = x , pre_step = coefficient_035 ) end procedure taylor_series_sin_035_real32 module procedure taylor_series_sin_036_real32 res = taylor_series_sin_035_real32 ( x ) end procedure taylor_series_sin_036_real32 module procedure taylor_series_sin_037_real32 res = horner_036 ( x = x , pre_step = coefficient_037 ) end procedure taylor_series_sin_037_real32 real ( real32 ) elemental function horner_000 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_000 = pre_step * x + coefficient_000 end function real ( real32 ) elemental function horner_001 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_001 = horner_000 ( x = x , pre_step = ( pre_step * x + coefficient_001 ) ) end function real ( real32 ) elemental function horner_002 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_002 = horner_001 ( x = x , pre_step = ( pre_step * x + coefficient_002 ) ) end function real ( real32 ) elemental function horner_003 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_003 = horner_002 ( x = x , pre_step = ( pre_step * x + coefficient_003 ) ) end function real ( real32 ) elemental function horner_004 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_004 = horner_003 ( x = x , pre_step = ( pre_step * x + coefficient_004 ) ) end function real ( real32 ) elemental function horner_005 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_005 = horner_004 ( x = x , pre_step = ( pre_step * x + coefficient_005 ) ) end function real ( real32 ) elemental function horner_006 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_006 = horner_005 ( x = x , pre_step = ( pre_step * x + coefficient_006 ) ) end function real ( real32 ) elemental function horner_007 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_007 = horner_006 ( x = x , pre_step = ( pre_step * x + coefficient_007 ) ) end function real ( real32 ) elemental function horner_008 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_008 = horner_007 ( x = x , pre_step = ( pre_step * x + coefficient_008 ) ) end function real ( real32 ) elemental function horner_009 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_009 = horner_008 ( x = x , pre_step = ( pre_step * x + coefficient_009 ) ) end function real ( real32 ) elemental function horner_010 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_010 = horner_009 ( x = x , pre_step = ( pre_step * x + coefficient_010 ) ) end function real ( real32 ) elemental function horner_011 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_011 = horner_010 ( x = x , pre_step = ( pre_step * x + coefficient_011 ) ) end function real ( real32 ) elemental function horner_012 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_012 = horner_011 ( x = x , pre_step = ( pre_step * x + coefficient_012 ) ) end function real ( real32 ) elemental function horner_013 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_013 = horner_012 ( x = x , pre_step = ( pre_step * x + coefficient_013 ) ) end function real ( real32 ) elemental function horner_014 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_014 = horner_013 ( x = x , pre_step = ( pre_step * x + coefficient_014 ) ) end function real ( real32 ) elemental function horner_015 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_015 = horner_014 ( x = x , pre_step = ( pre_step * x + coefficient_015 ) ) end function real ( real32 ) elemental function horner_016 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_016 = horner_015 ( x = x , pre_step = ( pre_step * x + coefficient_016 ) ) end function real ( real32 ) elemental function horner_017 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_017 = horner_016 ( x = x , pre_step = ( pre_step * x + coefficient_017 ) ) end function real ( real32 ) elemental function horner_018 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_018 = horner_017 ( x = x , pre_step = ( pre_step * x + coefficient_018 ) ) end function real ( real32 ) elemental function horner_019 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_019 = horner_018 ( x = x , pre_step = ( pre_step * x + coefficient_019 ) ) end function real ( real32 ) elemental function horner_020 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_020 = horner_019 ( x = x , pre_step = ( pre_step * x + coefficient_020 ) ) end function real ( real32 ) elemental function horner_021 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_021 = horner_020 ( x = x , pre_step = ( pre_step * x + coefficient_021 ) ) end function real ( real32 ) elemental function horner_022 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_022 = horner_021 ( x = x , pre_step = ( pre_step * x + coefficient_022 ) ) end function real ( real32 ) elemental function horner_023 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_023 = horner_022 ( x = x , pre_step = ( pre_step * x + coefficient_023 ) ) end function real ( real32 ) elemental function horner_024 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_024 = horner_023 ( x = x , pre_step = ( pre_step * x + coefficient_024 ) ) end function real ( real32 ) elemental function horner_025 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_025 = horner_024 ( x = x , pre_step = ( pre_step * x + coefficient_025 ) ) end function real ( real32 ) elemental function horner_026 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_026 = horner_025 ( x = x , pre_step = ( pre_step * x + coefficient_026 ) ) end function real ( real32 ) elemental function horner_027 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_027 = horner_026 ( x = x , pre_step = ( pre_step * x + coefficient_027 ) ) end function real ( real32 ) elemental function horner_028 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_028 = horner_027 ( x = x , pre_step = ( pre_step * x + coefficient_028 ) ) end function real ( real32 ) elemental function horner_029 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_029 = horner_028 ( x = x , pre_step = ( pre_step * x + coefficient_029 ) ) end function real ( real32 ) elemental function horner_030 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_030 = horner_029 ( x = x , pre_step = ( pre_step * x + coefficient_030 ) ) end function real ( real32 ) elemental function horner_031 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_031 = horner_030 ( x = x , pre_step = ( pre_step * x + coefficient_031 ) ) end function real ( real32 ) elemental function horner_032 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_032 = horner_031 ( x = x , pre_step = ( pre_step * x + coefficient_032 ) ) end function real ( real32 ) elemental function horner_033 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_033 = horner_032 ( x = x , pre_step = ( pre_step * x + coefficient_033 ) ) end function real ( real32 ) elemental function horner_034 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_034 = horner_033 ( x = x , pre_step = ( pre_step * x + coefficient_034 ) ) end function real ( real32 ) elemental function horner_035 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_035 = horner_034 ( x = x , pre_step = ( pre_step * x + coefficient_035 ) ) end function real ( real32 ) elemental function horner_036 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_036 = horner_035 ( x = x , pre_step = ( pre_step * x + coefficient_036 ) ) end function end submodule imp_taylor_series_sin_real32","tags":"","url":"sourcefile/main_submodule_sin_real32.f90.html"},{"title":"main_submodule_cos_real32.f90 – taylor_series_fortran","text":"Source Code !> Implementation of `taylor_series_cos_***` for `real32`. submodule ( taylor_series_fortran ) imp_taylor_series_cos_real32 use , non_intrinsic :: inv_factorial_real32 , only : & ! inv_factorial_002 , & ! coefficient_004 => inv_factorial_004 , & ! inv_factorial_006 , & ! coefficient_008 => inv_factorial_008 , & ! inv_factorial_010 , & ! coefficient_012 => inv_factorial_012 , & ! inv_factorial_014 , & ! coefficient_016 => inv_factorial_016 , & ! inv_factorial_018 , & ! coefficient_020 => inv_factorial_020 , & ! inv_factorial_022 , & ! coefficient_024 => inv_factorial_024 , & ! inv_factorial_026 , & ! coefficient_028 => inv_factorial_028 , & ! inv_factorial_030 , & ! coefficient_032 => inv_factorial_032 , & ! inv_factorial_034 , & ! coefficient_036 => inv_factorial_036 , & ! inv_factorial_038 implicit none real ( real32 ), parameter :: coefficient_000 = 1.0_real32 real ( real32 ), parameter :: coefficient_001 = 0.0_real32 real ( real32 ), parameter :: coefficient_002 = - inv_factorial_002 real ( real32 ), parameter :: coefficient_003 = 0.0_real32 real ( real32 ), parameter :: coefficient_005 = 0.0_real32 real ( real32 ), parameter :: coefficient_006 = - inv_factorial_006 real ( real32 ), parameter :: coefficient_007 = 0.0_real32 real ( real32 ), parameter :: coefficient_009 = 0.0_real32 real ( real32 ), parameter :: coefficient_010 = - inv_factorial_010 real ( real32 ), parameter :: coefficient_011 = 0.0_real32 real ( real32 ), parameter :: coefficient_013 = 0.0_real32 real ( real32 ), parameter :: coefficient_014 = - inv_factorial_014 real ( real32 ), parameter :: coefficient_015 = 0.0_real32 real ( real32 ), parameter :: coefficient_017 = 0.0_real32 real ( real32 ), parameter :: coefficient_018 = - inv_factorial_018 real ( real32 ), parameter :: coefficient_019 = 0.0_real32 real ( real32 ), parameter :: coefficient_021 = 0.0_real32 real ( real32 ), parameter :: coefficient_022 = - inv_factorial_022 real ( real32 ), parameter :: coefficient_023 = 0.0_real32 real ( real32 ), parameter :: coefficient_025 = 0.0_real32 real ( real32 ), parameter :: coefficient_026 = - inv_factorial_026 real ( real32 ), parameter :: coefficient_027 = 0.0_real32 real ( real32 ), parameter :: coefficient_029 = 0.0_real32 real ( real32 ), parameter :: coefficient_030 = - inv_factorial_030 real ( real32 ), parameter :: coefficient_031 = 0.0_real32 real ( real32 ), parameter :: coefficient_033 = 0.0_real32 real ( real32 ), parameter :: coefficient_034 = - inv_factorial_034 real ( real32 ), parameter :: coefficient_035 = 0.0_real32 real ( real32 ), parameter :: coefficient_037 = 0.0_real32 real ( real32 ), parameter :: coefficient_038 = - inv_factorial_038 contains module procedure taylor_series_cos_000_real32 res = horner_000 ( x = x , pre_step = 0.0_real32 ) end procedure taylor_series_cos_000_real32 module procedure taylor_series_cos_001_real32 res = taylor_series_cos_000_real32 ( x ) end procedure taylor_series_cos_001_real32 module procedure taylor_series_cos_002_real32 res = horner_001 ( x = x , pre_step = coefficient_002 ) end procedure taylor_series_cos_002_real32 module procedure taylor_series_cos_003_real32 res = taylor_series_cos_002_real32 ( x ) end procedure taylor_series_cos_003_real32 module procedure taylor_series_cos_004_real32 res = horner_003 ( x = x , pre_step = coefficient_004 ) end procedure taylor_series_cos_004_real32 module procedure taylor_series_cos_005_real32 res = taylor_series_cos_004_real32 ( x ) end procedure taylor_series_cos_005_real32 module procedure taylor_series_cos_006_real32 res = horner_005 ( x = x , pre_step = coefficient_006 ) end procedure taylor_series_cos_006_real32 module procedure taylor_series_cos_007_real32 res = taylor_series_cos_006_real32 ( x ) end procedure taylor_series_cos_007_real32 module procedure taylor_series_cos_008_real32 res = horner_007 ( x = x , pre_step = coefficient_008 ) end procedure taylor_series_cos_008_real32 module procedure taylor_series_cos_009_real32 res = taylor_series_cos_008_real32 ( x ) end procedure taylor_series_cos_009_real32 module procedure taylor_series_cos_010_real32 res = horner_009 ( x = x , pre_step = coefficient_010 ) end procedure taylor_series_cos_010_real32 module procedure taylor_series_cos_011_real32 res = taylor_series_cos_010_real32 ( x ) end procedure taylor_series_cos_011_real32 module procedure taylor_series_cos_012_real32 res = horner_011 ( x = x , pre_step = coefficient_012 ) end procedure taylor_series_cos_012_real32 module procedure taylor_series_cos_013_real32 res = taylor_series_cos_012_real32 ( x ) end procedure taylor_series_cos_013_real32 module procedure taylor_series_cos_014_real32 res = horner_013 ( x = x , pre_step = coefficient_014 ) end procedure taylor_series_cos_014_real32 module procedure taylor_series_cos_015_real32 res = taylor_series_cos_014_real32 ( x ) end procedure taylor_series_cos_015_real32 module procedure taylor_series_cos_016_real32 res = horner_015 ( x = x , pre_step = coefficient_016 ) end procedure taylor_series_cos_016_real32 module procedure taylor_series_cos_017_real32 res = taylor_series_cos_016_real32 ( x ) end procedure taylor_series_cos_017_real32 module procedure taylor_series_cos_018_real32 res = horner_017 ( x = x , pre_step = coefficient_018 ) end procedure taylor_series_cos_018_real32 module procedure taylor_series_cos_019_real32 res = taylor_series_cos_018_real32 ( x ) end procedure taylor_series_cos_019_real32 module procedure taylor_series_cos_020_real32 res = horner_019 ( x = x , pre_step = coefficient_020 ) end procedure taylor_series_cos_020_real32 module procedure taylor_series_cos_021_real32 res = taylor_series_cos_020_real32 ( x ) end procedure taylor_series_cos_021_real32 module procedure taylor_series_cos_022_real32 res = horner_021 ( x = x , pre_step = coefficient_022 ) end procedure taylor_series_cos_022_real32 module procedure taylor_series_cos_023_real32 res = taylor_series_cos_022_real32 ( x ) end procedure taylor_series_cos_023_real32 module procedure taylor_series_cos_024_real32 res = horner_023 ( x = x , pre_step = coefficient_024 ) end procedure taylor_series_cos_024_real32 module procedure taylor_series_cos_025_real32 res = taylor_series_cos_024_real32 ( x ) end procedure taylor_series_cos_025_real32 module procedure taylor_series_cos_026_real32 res = horner_025 ( x = x , pre_step = coefficient_026 ) end procedure taylor_series_cos_026_real32 module procedure taylor_series_cos_027_real32 res = taylor_series_cos_026_real32 ( x ) end procedure taylor_series_cos_027_real32 module procedure taylor_series_cos_028_real32 res = horner_027 ( x = x , pre_step = coefficient_028 ) end procedure taylor_series_cos_028_real32 module procedure taylor_series_cos_029_real32 res = taylor_series_cos_028_real32 ( x ) end procedure taylor_series_cos_029_real32 module procedure taylor_series_cos_030_real32 res = horner_029 ( x = x , pre_step = coefficient_030 ) end procedure taylor_series_cos_030_real32 module procedure taylor_series_cos_031_real32 res = taylor_series_cos_030_real32 ( x ) end procedure taylor_series_cos_031_real32 module procedure taylor_series_cos_032_real32 res = horner_031 ( x = x , pre_step = coefficient_032 ) end procedure taylor_series_cos_032_real32 module procedure taylor_series_cos_033_real32 res = taylor_series_cos_032_real32 ( x ) end procedure taylor_series_cos_033_real32 module procedure taylor_series_cos_034_real32 res = horner_033 ( x = x , pre_step = coefficient_034 ) end procedure taylor_series_cos_034_real32 module procedure taylor_series_cos_035_real32 res = taylor_series_cos_034_real32 ( x ) end procedure taylor_series_cos_035_real32 module procedure taylor_series_cos_036_real32 res = horner_035 ( x = x , pre_step = coefficient_036 ) end procedure taylor_series_cos_036_real32 module procedure taylor_series_cos_037_real32 res = taylor_series_cos_036_real32 ( x ) end procedure taylor_series_cos_037_real32 module procedure taylor_series_cos_038_real32 res = horner_037 ( x = x , pre_step = coefficient_038 ) end procedure taylor_series_cos_038_real32 real ( real32 ) elemental function horner_000 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_000 = pre_step * x + coefficient_000 end function real ( real32 ) elemental function horner_001 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_001 = horner_000 ( x = x , pre_step = ( pre_step * x + coefficient_001 ) ) end function real ( real32 ) elemental function horner_002 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_002 = horner_001 ( x = x , pre_step = ( pre_step * x + coefficient_002 ) ) end function real ( real32 ) elemental function horner_003 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_003 = horner_002 ( x = x , pre_step = ( pre_step * x + coefficient_003 ) ) end function real ( real32 ) elemental function horner_004 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_004 = horner_003 ( x = x , pre_step = ( pre_step * x + coefficient_004 ) ) end function real ( real32 ) elemental function horner_005 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_005 = horner_004 ( x = x , pre_step = ( pre_step * x + coefficient_005 ) ) end function real ( real32 ) elemental function horner_006 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_006 = horner_005 ( x = x , pre_step = ( pre_step * x + coefficient_006 ) ) end function real ( real32 ) elemental function horner_007 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_007 = horner_006 ( x = x , pre_step = ( pre_step * x + coefficient_007 ) ) end function real ( real32 ) elemental function horner_008 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_008 = horner_007 ( x = x , pre_step = ( pre_step * x + coefficient_008 ) ) end function real ( real32 ) elemental function horner_009 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_009 = horner_008 ( x = x , pre_step = ( pre_step * x + coefficient_009 ) ) end function real ( real32 ) elemental function horner_010 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_010 = horner_009 ( x = x , pre_step = ( pre_step * x + coefficient_010 ) ) end function real ( real32 ) elemental function horner_011 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_011 = horner_010 ( x = x , pre_step = ( pre_step * x + coefficient_011 ) ) end function real ( real32 ) elemental function horner_012 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_012 = horner_011 ( x = x , pre_step = ( pre_step * x + coefficient_012 ) ) end function real ( real32 ) elemental function horner_013 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_013 = horner_012 ( x = x , pre_step = ( pre_step * x + coefficient_013 ) ) end function real ( real32 ) elemental function horner_014 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_014 = horner_013 ( x = x , pre_step = ( pre_step * x + coefficient_014 ) ) end function real ( real32 ) elemental function horner_015 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_015 = horner_014 ( x = x , pre_step = ( pre_step * x + coefficient_015 ) ) end function real ( real32 ) elemental function horner_016 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_016 = horner_015 ( x = x , pre_step = ( pre_step * x + coefficient_016 ) ) end function real ( real32 ) elemental function horner_017 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_017 = horner_016 ( x = x , pre_step = ( pre_step * x + coefficient_017 ) ) end function real ( real32 ) elemental function horner_018 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_018 = horner_017 ( x = x , pre_step = ( pre_step * x + coefficient_018 ) ) end function real ( real32 ) elemental function horner_019 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_019 = horner_018 ( x = x , pre_step = ( pre_step * x + coefficient_019 ) ) end function real ( real32 ) elemental function horner_020 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_020 = horner_019 ( x = x , pre_step = ( pre_step * x + coefficient_020 ) ) end function real ( real32 ) elemental function horner_021 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_021 = horner_020 ( x = x , pre_step = ( pre_step * x + coefficient_021 ) ) end function real ( real32 ) elemental function horner_022 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_022 = horner_021 ( x = x , pre_step = ( pre_step * x + coefficient_022 ) ) end function real ( real32 ) elemental function horner_023 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_023 = horner_022 ( x = x , pre_step = ( pre_step * x + coefficient_023 ) ) end function real ( real32 ) elemental function horner_024 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_024 = horner_023 ( x = x , pre_step = ( pre_step * x + coefficient_024 ) ) end function real ( real32 ) elemental function horner_025 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_025 = horner_024 ( x = x , pre_step = ( pre_step * x + coefficient_025 ) ) end function real ( real32 ) elemental function horner_026 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_026 = horner_025 ( x = x , pre_step = ( pre_step * x + coefficient_026 ) ) end function real ( real32 ) elemental function horner_027 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_027 = horner_026 ( x = x , pre_step = ( pre_step * x + coefficient_027 ) ) end function real ( real32 ) elemental function horner_028 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_028 = horner_027 ( x = x , pre_step = ( pre_step * x + coefficient_028 ) ) end function real ( real32 ) elemental function horner_029 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_029 = horner_028 ( x = x , pre_step = ( pre_step * x + coefficient_029 ) ) end function real ( real32 ) elemental function horner_030 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_030 = horner_029 ( x = x , pre_step = ( pre_step * x + coefficient_030 ) ) end function real ( real32 ) elemental function horner_031 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_031 = horner_030 ( x = x , pre_step = ( pre_step * x + coefficient_031 ) ) end function real ( real32 ) elemental function horner_032 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_032 = horner_031 ( x = x , pre_step = ( pre_step * x + coefficient_032 ) ) end function real ( real32 ) elemental function horner_033 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_033 = horner_032 ( x = x , pre_step = ( pre_step * x + coefficient_033 ) ) end function real ( real32 ) elemental function horner_034 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_034 = horner_033 ( x = x , pre_step = ( pre_step * x + coefficient_034 ) ) end function real ( real32 ) elemental function horner_035 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_035 = horner_034 ( x = x , pre_step = ( pre_step * x + coefficient_035 ) ) end function real ( real32 ) elemental function horner_036 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_036 = horner_035 ( x = x , pre_step = ( pre_step * x + coefficient_036 ) ) end function real ( real32 ) elemental function horner_037 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_037 = horner_036 ( x = x , pre_step = ( pre_step * x + coefficient_037 ) ) end function end submodule imp_taylor_series_cos_real32","tags":"","url":"sourcefile/main_submodule_cos_real32.f90.html"},{"title":"main_submodule_exp_real32.f90 – taylor_series_fortran","text":"Source Code !> Implementation of `taylor_series_exp_***` for `real32`. submodule ( taylor_series_fortran ) imp_taylor_series_exp_real32 use , non_intrinsic :: inv_factorial_real32 , only : & ! coefficient_000 => inv_factorial_000 , & ! coefficient_001 => inv_factorial_001 , & ! coefficient_002 => inv_factorial_002 , & ! coefficient_003 => inv_factorial_003 , & ! coefficient_004 => inv_factorial_004 , & ! coefficient_005 => inv_factorial_005 , & ! coefficient_006 => inv_factorial_006 , & ! coefficient_007 => inv_factorial_007 , & ! coefficient_008 => inv_factorial_008 , & ! coefficient_009 => inv_factorial_009 , & ! coefficient_010 => inv_factorial_010 , & ! coefficient_011 => inv_factorial_011 , & ! coefficient_012 => inv_factorial_012 , & ! coefficient_013 => inv_factorial_013 , & ! coefficient_014 => inv_factorial_014 , & ! coefficient_015 => inv_factorial_015 , & ! coefficient_016 => inv_factorial_016 , & ! coefficient_017 => inv_factorial_017 , & ! coefficient_018 => inv_factorial_018 , & ! coefficient_019 => inv_factorial_019 , & ! coefficient_020 => inv_factorial_020 , & ! coefficient_021 => inv_factorial_021 , & ! coefficient_022 => inv_factorial_022 , & ! coefficient_023 => inv_factorial_023 , & ! coefficient_024 => inv_factorial_024 , & ! coefficient_025 => inv_factorial_025 , & ! coefficient_026 => inv_factorial_026 , & ! coefficient_027 => inv_factorial_027 , & ! coefficient_028 => inv_factorial_028 , & ! coefficient_029 => inv_factorial_029 , & ! coefficient_030 => inv_factorial_030 , & ! coefficient_031 => inv_factorial_031 , & ! coefficient_032 => inv_factorial_032 , & ! coefficient_033 => inv_factorial_033 , & ! coefficient_034 => inv_factorial_034 , & ! coefficient_035 => inv_factorial_035 , & ! coefficient_036 => inv_factorial_036 , & ! coefficient_037 => inv_factorial_037 , & ! coefficient_038 => inv_factorial_038 implicit none contains module procedure taylor_series_exp_000_real32 res = horner_000 ( x = x , pre_step = 0.0_real32 ) end procedure taylor_series_exp_000_real32 module procedure taylor_series_exp_001_real32 res = horner_000 ( x = x , pre_step = coefficient_001 ) end procedure taylor_series_exp_001_real32 module procedure taylor_series_exp_002_real32 res = horner_001 ( x = x , pre_step = coefficient_002 ) end procedure taylor_series_exp_002_real32 module procedure taylor_series_exp_003_real32 res = horner_002 ( x = x , pre_step = coefficient_003 ) end procedure taylor_series_exp_003_real32 module procedure taylor_series_exp_004_real32 res = horner_003 ( x = x , pre_step = coefficient_004 ) end procedure taylor_series_exp_004_real32 module procedure taylor_series_exp_005_real32 res = horner_004 ( x = x , pre_step = coefficient_005 ) end procedure taylor_series_exp_005_real32 module procedure taylor_series_exp_006_real32 res = horner_005 ( x = x , pre_step = coefficient_006 ) end procedure taylor_series_exp_006_real32 module procedure taylor_series_exp_007_real32 res = horner_006 ( x = x , pre_step = coefficient_007 ) end procedure taylor_series_exp_007_real32 module procedure taylor_series_exp_008_real32 res = horner_007 ( x = x , pre_step = coefficient_008 ) end procedure taylor_series_exp_008_real32 module procedure taylor_series_exp_009_real32 res = horner_008 ( x = x , pre_step = coefficient_009 ) end procedure taylor_series_exp_009_real32 module procedure taylor_series_exp_010_real32 res = horner_009 ( x = x , pre_step = coefficient_010 ) end procedure taylor_series_exp_010_real32 module procedure taylor_series_exp_011_real32 res = horner_010 ( x = x , pre_step = coefficient_011 ) end procedure taylor_series_exp_011_real32 module procedure taylor_series_exp_012_real32 res = horner_011 ( x = x , pre_step = coefficient_012 ) end procedure taylor_series_exp_012_real32 module procedure taylor_series_exp_013_real32 res = horner_012 ( x = x , pre_step = coefficient_013 ) end procedure taylor_series_exp_013_real32 module procedure taylor_series_exp_014_real32 res = horner_013 ( x = x , pre_step = coefficient_014 ) end procedure taylor_series_exp_014_real32 module procedure taylor_series_exp_015_real32 res = horner_014 ( x = x , pre_step = coefficient_015 ) end procedure taylor_series_exp_015_real32 module procedure taylor_series_exp_016_real32 res = horner_015 ( x = x , pre_step = coefficient_016 ) end procedure taylor_series_exp_016_real32 module procedure taylor_series_exp_017_real32 res = horner_016 ( x = x , pre_step = coefficient_017 ) end procedure taylor_series_exp_017_real32 module procedure taylor_series_exp_018_real32 res = horner_017 ( x = x , pre_step = coefficient_018 ) end procedure taylor_series_exp_018_real32 module procedure taylor_series_exp_019_real32 res = horner_018 ( x = x , pre_step = coefficient_019 ) end procedure taylor_series_exp_019_real32 module procedure taylor_series_exp_020_real32 res = horner_019 ( x = x , pre_step = coefficient_020 ) end procedure taylor_series_exp_020_real32 module procedure taylor_series_exp_021_real32 res = horner_020 ( x = x , pre_step = coefficient_021 ) end procedure taylor_series_exp_021_real32 module procedure taylor_series_exp_022_real32 res = horner_021 ( x = x , pre_step = coefficient_022 ) end procedure taylor_series_exp_022_real32 module procedure taylor_series_exp_023_real32 res = horner_022 ( x = x , pre_step = coefficient_023 ) end procedure taylor_series_exp_023_real32 module procedure taylor_series_exp_024_real32 res = horner_023 ( x = x , pre_step = coefficient_024 ) end procedure taylor_series_exp_024_real32 module procedure taylor_series_exp_025_real32 res = horner_024 ( x = x , pre_step = coefficient_025 ) end procedure taylor_series_exp_025_real32 module procedure taylor_series_exp_026_real32 res = horner_025 ( x = x , pre_step = coefficient_026 ) end procedure taylor_series_exp_026_real32 module procedure taylor_series_exp_027_real32 res = horner_026 ( x = x , pre_step = coefficient_027 ) end procedure taylor_series_exp_027_real32 module procedure taylor_series_exp_028_real32 res = horner_027 ( x = x , pre_step = coefficient_028 ) end procedure taylor_series_exp_028_real32 module procedure taylor_series_exp_029_real32 res = horner_028 ( x = x , pre_step = coefficient_029 ) end procedure taylor_series_exp_029_real32 module procedure taylor_series_exp_030_real32 res = horner_029 ( x = x , pre_step = coefficient_030 ) end procedure taylor_series_exp_030_real32 module procedure taylor_series_exp_031_real32 res = horner_030 ( x = x , pre_step = coefficient_031 ) end procedure taylor_series_exp_031_real32 module procedure taylor_series_exp_032_real32 res = horner_031 ( x = x , pre_step = coefficient_032 ) end procedure taylor_series_exp_032_real32 module procedure taylor_series_exp_033_real32 res = horner_032 ( x = x , pre_step = coefficient_033 ) end procedure taylor_series_exp_033_real32 module procedure taylor_series_exp_034_real32 res = horner_033 ( x = x , pre_step = coefficient_034 ) end procedure taylor_series_exp_034_real32 module procedure taylor_series_exp_035_real32 res = horner_034 ( x = x , pre_step = coefficient_035 ) end procedure taylor_series_exp_035_real32 module procedure taylor_series_exp_036_real32 res = horner_035 ( x = x , pre_step = coefficient_036 ) end procedure taylor_series_exp_036_real32 module procedure taylor_series_exp_037_real32 res = horner_036 ( x = x , pre_step = coefficient_037 ) end procedure taylor_series_exp_037_real32 module procedure taylor_series_exp_038_real32 res = horner_037 ( x = x , pre_step = coefficient_038 ) end procedure taylor_series_exp_038_real32 real ( real32 ) elemental function horner_000 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_000 = pre_step * x + coefficient_000 end function real ( real32 ) elemental function horner_001 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_001 = horner_000 ( x = x , pre_step = ( pre_step * x + coefficient_001 ) ) end function real ( real32 ) elemental function horner_002 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_002 = horner_001 ( x = x , pre_step = ( pre_step * x + coefficient_002 ) ) end function real ( real32 ) elemental function horner_003 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_003 = horner_002 ( x = x , pre_step = ( pre_step * x + coefficient_003 ) ) end function real ( real32 ) elemental function horner_004 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_004 = horner_003 ( x = x , pre_step = ( pre_step * x + coefficient_004 ) ) end function real ( real32 ) elemental function horner_005 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_005 = horner_004 ( x = x , pre_step = ( pre_step * x + coefficient_005 ) ) end function real ( real32 ) elemental function horner_006 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_006 = horner_005 ( x = x , pre_step = ( pre_step * x + coefficient_006 ) ) end function real ( real32 ) elemental function horner_007 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_007 = horner_006 ( x = x , pre_step = ( pre_step * x + coefficient_007 ) ) end function real ( real32 ) elemental function horner_008 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_008 = horner_007 ( x = x , pre_step = ( pre_step * x + coefficient_008 ) ) end function real ( real32 ) elemental function horner_009 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_009 = horner_008 ( x = x , pre_step = ( pre_step * x + coefficient_009 ) ) end function real ( real32 ) elemental function horner_010 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_010 = horner_009 ( x = x , pre_step = ( pre_step * x + coefficient_010 ) ) end function real ( real32 ) elemental function horner_011 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_011 = horner_010 ( x = x , pre_step = ( pre_step * x + coefficient_011 ) ) end function real ( real32 ) elemental function horner_012 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_012 = horner_011 ( x = x , pre_step = ( pre_step * x + coefficient_012 ) ) end function real ( real32 ) elemental function horner_013 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_013 = horner_012 ( x = x , pre_step = ( pre_step * x + coefficient_013 ) ) end function real ( real32 ) elemental function horner_014 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_014 = horner_013 ( x = x , pre_step = ( pre_step * x + coefficient_014 ) ) end function real ( real32 ) elemental function horner_015 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_015 = horner_014 ( x = x , pre_step = ( pre_step * x + coefficient_015 ) ) end function real ( real32 ) elemental function horner_016 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_016 = horner_015 ( x = x , pre_step = ( pre_step * x + coefficient_016 ) ) end function real ( real32 ) elemental function horner_017 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_017 = horner_016 ( x = x , pre_step = ( pre_step * x + coefficient_017 ) ) end function real ( real32 ) elemental function horner_018 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_018 = horner_017 ( x = x , pre_step = ( pre_step * x + coefficient_018 ) ) end function real ( real32 ) elemental function horner_019 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_019 = horner_018 ( x = x , pre_step = ( pre_step * x + coefficient_019 ) ) end function real ( real32 ) elemental function horner_020 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_020 = horner_019 ( x = x , pre_step = ( pre_step * x + coefficient_020 ) ) end function real ( real32 ) elemental function horner_021 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_021 = horner_020 ( x = x , pre_step = ( pre_step * x + coefficient_021 ) ) end function real ( real32 ) elemental function horner_022 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_022 = horner_021 ( x = x , pre_step = ( pre_step * x + coefficient_022 ) ) end function real ( real32 ) elemental function horner_023 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_023 = horner_022 ( x = x , pre_step = ( pre_step * x + coefficient_023 ) ) end function real ( real32 ) elemental function horner_024 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_024 = horner_023 ( x = x , pre_step = ( pre_step * x + coefficient_024 ) ) end function real ( real32 ) elemental function horner_025 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_025 = horner_024 ( x = x , pre_step = ( pre_step * x + coefficient_025 ) ) end function real ( real32 ) elemental function horner_026 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_026 = horner_025 ( x = x , pre_step = ( pre_step * x + coefficient_026 ) ) end function real ( real32 ) elemental function horner_027 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_027 = horner_026 ( x = x , pre_step = ( pre_step * x + coefficient_027 ) ) end function real ( real32 ) elemental function horner_028 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_028 = horner_027 ( x = x , pre_step = ( pre_step * x + coefficient_028 ) ) end function real ( real32 ) elemental function horner_029 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_029 = horner_028 ( x = x , pre_step = ( pre_step * x + coefficient_029 ) ) end function real ( real32 ) elemental function horner_030 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_030 = horner_029 ( x = x , pre_step = ( pre_step * x + coefficient_030 ) ) end function real ( real32 ) elemental function horner_031 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_031 = horner_030 ( x = x , pre_step = ( pre_step * x + coefficient_031 ) ) end function real ( real32 ) elemental function horner_032 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_032 = horner_031 ( x = x , pre_step = ( pre_step * x + coefficient_032 ) ) end function real ( real32 ) elemental function horner_033 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_033 = horner_032 ( x = x , pre_step = ( pre_step * x + coefficient_033 ) ) end function real ( real32 ) elemental function horner_034 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_034 = horner_033 ( x = x , pre_step = ( pre_step * x + coefficient_034 ) ) end function real ( real32 ) elemental function horner_035 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_035 = horner_034 ( x = x , pre_step = ( pre_step * x + coefficient_035 ) ) end function real ( real32 ) elemental function horner_036 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_036 = horner_035 ( x = x , pre_step = ( pre_step * x + coefficient_036 ) ) end function real ( real32 ) elemental function horner_037 ( x , pre_step ) real ( real32 ), intent ( in ) :: x , pre_step horner_037 = horner_036 ( x = x , pre_step = ( pre_step * x + coefficient_037 ) ) end function end submodule imp_taylor_series_exp_real32","tags":"","url":"sourcefile/main_submodule_exp_real32.f90.html"},{"title":"main_submodule_sin_real128.f90 – taylor_series_fortran","text":"Source Code !> Implementation of `taylor_series_sin_***` for `real128`. submodule ( taylor_series_fortran ) imp_taylor_series_sin_real128 use , non_intrinsic :: inv_factorial_real128 , only : & ! coefficient_001 => inv_factorial_001 , & ! inv_factorial_003 , & ! coefficient_005 => inv_factorial_005 , & ! inv_factorial_007 , & ! coefficient_009 => inv_factorial_009 , & ! inv_factorial_011 , & ! coefficient_013 => inv_factorial_013 , & ! inv_factorial_015 , & ! coefficient_017 => inv_factorial_017 , & ! inv_factorial_019 , & ! coefficient_021 => inv_factorial_021 , & ! inv_factorial_023 , & ! coefficient_025 => inv_factorial_025 , & ! inv_factorial_027 , & ! coefficient_029 => inv_factorial_029 , & ! inv_factorial_031 , & ! coefficient_033 => inv_factorial_033 , & ! inv_factorial_035 , & ! coefficient_037 => inv_factorial_037 , & ! inv_factorial_039 , & ! coefficient_041 => inv_factorial_041 , & ! inv_factorial_043 , & ! coefficient_045 => inv_factorial_045 , & ! inv_factorial_047 , & ! coefficient_049 => inv_factorial_049 , & ! inv_factorial_051 , & ! coefficient_053 => inv_factorial_053 , & ! inv_factorial_055 , & ! coefficient_057 => inv_factorial_057 , & ! inv_factorial_059 , & ! coefficient_061 => inv_factorial_061 , & ! inv_factorial_063 , & ! coefficient_065 => inv_factorial_065 , & ! inv_factorial_067 , & ! coefficient_069 => inv_factorial_069 , & ! inv_factorial_071 , & ! coefficient_073 => inv_factorial_073 , & ! inv_factorial_075 , & ! coefficient_077 => inv_factorial_077 , & ! inv_factorial_079 , & ! coefficient_081 => inv_factorial_081 , & ! inv_factorial_083 , & ! coefficient_085 => inv_factorial_085 , & ! inv_factorial_087 , & ! coefficient_089 => inv_factorial_089 , & ! inv_factorial_091 , & ! coefficient_093 => inv_factorial_093 , & ! inv_factorial_095 , & ! coefficient_097 => inv_factorial_097 , & ! inv_factorial_099 , & ! coefficient_101 => inv_factorial_101 , & ! inv_factorial_103 , & ! coefficient_105 => inv_factorial_105 , & ! inv_factorial_107 , & ! coefficient_109 => inv_factorial_109 , & ! inv_factorial_111 , & ! coefficient_113 => inv_factorial_113 , & ! inv_factorial_115 , & ! coefficient_117 => inv_factorial_117 , & ! inv_factorial_119 , & ! coefficient_121 => inv_factorial_121 , & ! inv_factorial_123 , & ! coefficient_125 => inv_factorial_125 , & ! inv_factorial_127 , & ! coefficient_129 => inv_factorial_129 , & ! inv_factorial_131 , & ! coefficient_133 => inv_factorial_133 , & ! inv_factorial_135 , & ! coefficient_137 => inv_factorial_137 , & ! inv_factorial_139 , & ! coefficient_141 => inv_factorial_141 , & ! inv_factorial_143 , & ! coefficient_145 => inv_factorial_145 , & ! inv_factorial_147 , & ! coefficient_149 => inv_factorial_149 , & ! inv_factorial_151 , & ! coefficient_153 => inv_factorial_153 , & ! inv_factorial_155 , & ! coefficient_157 => inv_factorial_157 , & ! inv_factorial_159 , & ! coefficient_161 => inv_factorial_161 , & ! inv_factorial_163 , & ! coefficient_165 => inv_factorial_165 , & ! inv_factorial_167 , & ! coefficient_169 => inv_factorial_169 , & ! inv_factorial_171 , & ! coefficient_173 => inv_factorial_173 , & ! inv_factorial_175 , & ! coefficient_177 => inv_factorial_177 implicit none real ( real128 ), parameter :: coefficient_000 = 0.0_real128 real ( real128 ), parameter :: coefficient_002 = 0.0_real128 real ( real128 ), parameter :: coefficient_003 = - inv_factorial_003 real ( real128 ), parameter :: coefficient_004 = 0.0_real128 real ( real128 ), parameter :: coefficient_006 = 0.0_real128 real ( real128 ), parameter :: coefficient_007 = - inv_factorial_007 real ( real128 ), parameter :: coefficient_008 = 0.0_real128 real ( real128 ), parameter :: coefficient_010 = 0.0_real128 real ( real128 ), parameter :: coefficient_011 = - inv_factorial_011 real ( real128 ), parameter :: coefficient_012 = 0.0_real128 real ( real128 ), parameter :: coefficient_014 = 0.0_real128 real ( real128 ), parameter :: coefficient_015 = - inv_factorial_015 real ( real128 ), parameter :: coefficient_016 = 0.0_real128 real ( real128 ), parameter :: coefficient_018 = 0.0_real128 real ( real128 ), parameter :: coefficient_019 = - inv_factorial_019 real ( real128 ), parameter :: coefficient_020 = 0.0_real128 real ( real128 ), parameter :: coefficient_022 = 0.0_real128 real ( real128 ), parameter :: coefficient_023 = - inv_factorial_023 real ( real128 ), parameter :: coefficient_024 = 0.0_real128 real ( real128 ), parameter :: coefficient_026 = 0.0_real128 real ( real128 ), parameter :: coefficient_027 = - inv_factorial_027 real ( real128 ), parameter :: coefficient_028 = 0.0_real128 real ( real128 ), parameter :: coefficient_030 = 0.0_real128 real ( real128 ), parameter :: coefficient_031 = - inv_factorial_031 real ( real128 ), parameter :: coefficient_032 = 0.0_real128 real ( real128 ), parameter :: coefficient_034 = 0.0_real128 real ( real128 ), parameter :: coefficient_035 = - inv_factorial_035 real ( real128 ), parameter :: coefficient_036 = 0.0_real128 real ( real128 ), parameter :: coefficient_038 = 0.0_real128 real ( real128 ), parameter :: coefficient_039 = - inv_factorial_039 real ( real128 ), parameter :: coefficient_040 = 0.0_real128 real ( real128 ), parameter :: coefficient_042 = 0.0_real128 real ( real128 ), parameter :: coefficient_043 = - inv_factorial_043 real ( real128 ), parameter :: coefficient_044 = 0.0_real128 real ( real128 ), parameter :: coefficient_046 = 0.0_real128 real ( real128 ), parameter :: coefficient_047 = - inv_factorial_047 real ( real128 ), parameter :: coefficient_048 = 0.0_real128 real ( real128 ), parameter :: coefficient_050 = 0.0_real128 real ( real128 ), parameter :: coefficient_051 = - inv_factorial_051 real ( real128 ), parameter :: coefficient_052 = 0.0_real128 real ( real128 ), parameter :: coefficient_054 = 0.0_real128 real ( real128 ), parameter :: coefficient_055 = - inv_factorial_055 real ( real128 ), parameter :: coefficient_056 = 0.0_real128 real ( real128 ), parameter :: coefficient_058 = 0.0_real128 real ( real128 ), parameter :: coefficient_059 = - inv_factorial_059 real ( real128 ), parameter :: coefficient_060 = 0.0_real128 real ( real128 ), parameter :: coefficient_062 = 0.0_real128 real ( real128 ), parameter :: coefficient_063 = - inv_factorial_063 real ( real128 ), parameter :: coefficient_064 = 0.0_real128 real ( real128 ), parameter :: coefficient_066 = 0.0_real128 real ( real128 ), parameter :: coefficient_067 = - inv_factorial_067 real ( real128 ), parameter :: coefficient_068 = 0.0_real128 real ( real128 ), parameter :: coefficient_070 = 0.0_real128 real ( real128 ), parameter :: coefficient_071 = - inv_factorial_071 real ( real128 ), parameter :: coefficient_072 = 0.0_real128 real ( real128 ), parameter :: coefficient_074 = 0.0_real128 real ( real128 ), parameter :: coefficient_075 = - inv_factorial_075 real ( real128 ), parameter :: coefficient_076 = 0.0_real128 real ( real128 ), parameter :: coefficient_078 = 0.0_real128 real ( real128 ), parameter :: coefficient_079 = - inv_factorial_079 real ( real128 ), parameter :: coefficient_080 = 0.0_real128 real ( real128 ), parameter :: coefficient_082 = 0.0_real128 real ( real128 ), parameter :: coefficient_083 = - inv_factorial_083 real ( real128 ), parameter :: coefficient_084 = 0.0_real128 real ( real128 ), parameter :: coefficient_086 = 0.0_real128 real ( real128 ), parameter :: coefficient_087 = - inv_factorial_087 real ( real128 ), parameter :: coefficient_088 = 0.0_real128 real ( real128 ), parameter :: coefficient_090 = 0.0_real128 real ( real128 ), parameter :: coefficient_091 = - inv_factorial_091 real ( real128 ), parameter :: coefficient_092 = 0.0_real128 real ( real128 ), parameter :: coefficient_094 = 0.0_real128 real ( real128 ), parameter :: coefficient_095 = - inv_factorial_095 real ( real128 ), parameter :: coefficient_096 = 0.0_real128 real ( real128 ), parameter :: coefficient_098 = 0.0_real128 real ( real128 ), parameter :: coefficient_099 = - inv_factorial_099 real ( real128 ), parameter :: coefficient_100 = 0.0_real128 real ( real128 ), parameter :: coefficient_102 = 0.0_real128 real ( real128 ), parameter :: coefficient_103 = - inv_factorial_103 real ( real128 ), parameter :: coefficient_104 = 0.0_real128 real ( real128 ), parameter :: coefficient_106 = 0.0_real128 real ( real128 ), parameter :: coefficient_107 = - inv_factorial_107 real ( real128 ), parameter :: coefficient_108 = 0.0_real128 real ( real128 ), parameter :: coefficient_110 = 0.0_real128 real ( real128 ), parameter :: coefficient_111 = - inv_factorial_111 real ( real128 ), parameter :: coefficient_112 = 0.0_real128 real ( real128 ), parameter :: coefficient_114 = 0.0_real128 real ( real128 ), parameter :: coefficient_115 = - inv_factorial_115 real ( real128 ), parameter :: coefficient_116 = 0.0_real128 real ( real128 ), parameter :: coefficient_118 = 0.0_real128 real ( real128 ), parameter :: coefficient_119 = - inv_factorial_119 real ( real128 ), parameter :: coefficient_120 = 0.0_real128 real ( real128 ), parameter :: coefficient_122 = 0.0_real128 real ( real128 ), parameter :: coefficient_123 = - inv_factorial_123 real ( real128 ), parameter :: coefficient_124 = 0.0_real128 real ( real128 ), parameter :: coefficient_126 = 0.0_real128 real ( real128 ), parameter :: coefficient_127 = - inv_factorial_127 real ( real128 ), parameter :: coefficient_128 = 0.0_real128 real ( real128 ), parameter :: coefficient_130 = 0.0_real128 real ( real128 ), parameter :: coefficient_131 = - inv_factorial_131 real ( real128 ), parameter :: coefficient_132 = 0.0_real128 real ( real128 ), parameter :: coefficient_134 = 0.0_real128 real ( real128 ), parameter :: coefficient_135 = - inv_factorial_135 real ( real128 ), parameter :: coefficient_136 = 0.0_real128 real ( real128 ), parameter :: coefficient_138 = 0.0_real128 real ( real128 ), parameter :: coefficient_139 = - inv_factorial_139 real ( real128 ), parameter :: coefficient_140 = 0.0_real128 real ( real128 ), parameter :: coefficient_142 = 0.0_real128 real ( real128 ), parameter :: coefficient_143 = - inv_factorial_143 real ( real128 ), parameter :: coefficient_144 = 0.0_real128 real ( real128 ), parameter :: coefficient_146 = 0.0_real128 real ( real128 ), parameter :: coefficient_147 = - inv_factorial_147 real ( real128 ), parameter :: coefficient_148 = 0.0_real128 real ( real128 ), parameter :: coefficient_150 = 0.0_real128 real ( real128 ), parameter :: coefficient_151 = - inv_factorial_151 real ( real128 ), parameter :: coefficient_152 = 0.0_real128 real ( real128 ), parameter :: coefficient_154 = 0.0_real128 real ( real128 ), parameter :: coefficient_155 = - inv_factorial_155 real ( real128 ), parameter :: coefficient_156 = 0.0_real128 real ( real128 ), parameter :: coefficient_158 = 0.0_real128 real ( real128 ), parameter :: coefficient_159 = - inv_factorial_159 real ( real128 ), parameter :: coefficient_160 = 0.0_real128 real ( real128 ), parameter :: coefficient_162 = 0.0_real128 real ( real128 ), parameter :: coefficient_163 = - inv_factorial_163 real ( real128 ), parameter :: coefficient_164 = 0.0_real128 real ( real128 ), parameter :: coefficient_166 = 0.0_real128 real ( real128 ), parameter :: coefficient_167 = - inv_factorial_167 real ( real128 ), parameter :: coefficient_168 = 0.0_real128 real ( real128 ), parameter :: coefficient_170 = 0.0_real128 real ( real128 ), parameter :: coefficient_171 = - inv_factorial_171 real ( real128 ), parameter :: coefficient_172 = 0.0_real128 real ( real128 ), parameter :: coefficient_174 = 0.0_real128 real ( real128 ), parameter :: coefficient_175 = - inv_factorial_175 real ( real128 ), parameter :: coefficient_176 = 0.0_real128 contains module procedure taylor_series_sin_000_real128 res = horner_000 ( x = x , pre_step = 0.0_real128 ) end procedure taylor_series_sin_000_real128 module procedure taylor_series_sin_001_real128 res = horner_000 ( x = x , pre_step = coefficient_001 ) end procedure taylor_series_sin_001_real128 module procedure taylor_series_sin_002_real128 res = taylor_series_sin_001_real128 ( x ) end procedure taylor_series_sin_002_real128 module procedure taylor_series_sin_003_real128 res = horner_002 ( x = x , pre_step = coefficient_003 ) end procedure taylor_series_sin_003_real128 module procedure taylor_series_sin_004_real128 res = taylor_series_sin_003_real128 ( x ) end procedure taylor_series_sin_004_real128 module procedure taylor_series_sin_005_real128 res = horner_004 ( x = x , pre_step = coefficient_005 ) end procedure taylor_series_sin_005_real128 module procedure taylor_series_sin_006_real128 res = taylor_series_sin_005_real128 ( x ) end procedure taylor_series_sin_006_real128 module procedure taylor_series_sin_007_real128 res = horner_006 ( x = x , pre_step = coefficient_007 ) end procedure taylor_series_sin_007_real128 module procedure taylor_series_sin_008_real128 res = taylor_series_sin_007_real128 ( x ) end procedure taylor_series_sin_008_real128 module procedure taylor_series_sin_009_real128 res = horner_008 ( x = x , pre_step = coefficient_009 ) end procedure taylor_series_sin_009_real128 module procedure taylor_series_sin_010_real128 res = taylor_series_sin_009_real128 ( x ) end procedure taylor_series_sin_010_real128 module procedure taylor_series_sin_011_real128 res = horner_010 ( x = x , pre_step = coefficient_011 ) end procedure taylor_series_sin_011_real128 module procedure taylor_series_sin_012_real128 res = taylor_series_sin_011_real128 ( x ) end procedure taylor_series_sin_012_real128 module procedure taylor_series_sin_013_real128 res = horner_012 ( x = x , pre_step = coefficient_013 ) end procedure taylor_series_sin_013_real128 module procedure taylor_series_sin_014_real128 res = taylor_series_sin_013_real128 ( x ) end procedure taylor_series_sin_014_real128 module procedure taylor_series_sin_015_real128 res = horner_014 ( x = x , pre_step = coefficient_015 ) end procedure taylor_series_sin_015_real128 module procedure taylor_series_sin_016_real128 res = taylor_series_sin_015_real128 ( x ) end procedure taylor_series_sin_016_real128 module procedure taylor_series_sin_017_real128 res = horner_016 ( x = x , pre_step = coefficient_017 ) end procedure taylor_series_sin_017_real128 module procedure taylor_series_sin_018_real128 res = taylor_series_sin_017_real128 ( x ) end procedure taylor_series_sin_018_real128 module procedure taylor_series_sin_019_real128 res = horner_018 ( x = x , pre_step = coefficient_019 ) end procedure taylor_series_sin_019_real128 module procedure taylor_series_sin_020_real128 res = taylor_series_sin_019_real128 ( x ) end procedure taylor_series_sin_020_real128 module procedure taylor_series_sin_021_real128 res = horner_020 ( x = x , pre_step = coefficient_021 ) end procedure taylor_series_sin_021_real128 module procedure taylor_series_sin_022_real128 res = taylor_series_sin_021_real128 ( x ) end procedure taylor_series_sin_022_real128 module procedure taylor_series_sin_023_real128 res = horner_022 ( x = x , pre_step = coefficient_023 ) end procedure taylor_series_sin_023_real128 module procedure taylor_series_sin_024_real128 res = taylor_series_sin_023_real128 ( x ) end procedure taylor_series_sin_024_real128 module procedure taylor_series_sin_025_real128 res = horner_024 ( x = x , pre_step = coefficient_025 ) end procedure taylor_series_sin_025_real128 module procedure taylor_series_sin_026_real128 res = taylor_series_sin_025_real128 ( x ) end procedure taylor_series_sin_026_real128 module procedure taylor_series_sin_027_real128 res = horner_026 ( x = x , pre_step = coefficient_027 ) end procedure taylor_series_sin_027_real128 module procedure taylor_series_sin_028_real128 res = taylor_series_sin_027_real128 ( x ) end procedure taylor_series_sin_028_real128 module procedure taylor_series_sin_029_real128 res = horner_028 ( x = x , pre_step = coefficient_029 ) end procedure taylor_series_sin_029_real128 module procedure taylor_series_sin_030_real128 res = taylor_series_sin_029_real128 ( x ) end procedure taylor_series_sin_030_real128 module procedure taylor_series_sin_031_real128 res = horner_030 ( x = x , pre_step = coefficient_031 ) end procedure taylor_series_sin_031_real128 module procedure taylor_series_sin_032_real128 res = taylor_series_sin_031_real128 ( x ) end procedure taylor_series_sin_032_real128 module procedure taylor_series_sin_033_real128 res = horner_032 ( x = x , pre_step = coefficient_033 ) end procedure taylor_series_sin_033_real128 module procedure taylor_series_sin_034_real128 res = taylor_series_sin_033_real128 ( x ) end procedure taylor_series_sin_034_real128 module procedure taylor_series_sin_035_real128 res = horner_034 ( x = x , pre_step = coefficient_035 ) end procedure taylor_series_sin_035_real128 module procedure taylor_series_sin_036_real128 res = taylor_series_sin_035_real128 ( x ) end procedure taylor_series_sin_036_real128 module procedure taylor_series_sin_037_real128 res = horner_036 ( x = x , pre_step = coefficient_037 ) end procedure taylor_series_sin_037_real128 module procedure taylor_series_sin_038_real128 res = taylor_series_sin_037_real128 ( x ) end procedure taylor_series_sin_038_real128 module procedure taylor_series_sin_039_real128 res = horner_038 ( x = x , pre_step = coefficient_039 ) end procedure taylor_series_sin_039_real128 module procedure taylor_series_sin_040_real128 res = taylor_series_sin_039_real128 ( x ) end procedure taylor_series_sin_040_real128 module procedure taylor_series_sin_041_real128 res = horner_040 ( x = x , pre_step = coefficient_041 ) end procedure taylor_series_sin_041_real128 module procedure taylor_series_sin_042_real128 res = taylor_series_sin_041_real128 ( x ) end procedure taylor_series_sin_042_real128 module procedure taylor_series_sin_043_real128 res = horner_042 ( x = x , pre_step = coefficient_043 ) end procedure taylor_series_sin_043_real128 module procedure taylor_series_sin_044_real128 res = taylor_series_sin_043_real128 ( x ) end procedure taylor_series_sin_044_real128 module procedure taylor_series_sin_045_real128 res = horner_044 ( x = x , pre_step = coefficient_045 ) end procedure taylor_series_sin_045_real128 module procedure taylor_series_sin_046_real128 res = taylor_series_sin_045_real128 ( x ) end procedure taylor_series_sin_046_real128 module procedure taylor_series_sin_047_real128 res = horner_046 ( x = x , pre_step = coefficient_047 ) end procedure taylor_series_sin_047_real128 module procedure taylor_series_sin_048_real128 res = taylor_series_sin_047_real128 ( x ) end procedure taylor_series_sin_048_real128 module procedure taylor_series_sin_049_real128 res = horner_048 ( x = x , pre_step = coefficient_049 ) end procedure taylor_series_sin_049_real128 module procedure taylor_series_sin_050_real128 res = taylor_series_sin_049_real128 ( x ) end procedure taylor_series_sin_050_real128 module procedure taylor_series_sin_051_real128 res = horner_050 ( x = x , pre_step = coefficient_051 ) end procedure taylor_series_sin_051_real128 module procedure taylor_series_sin_052_real128 res = taylor_series_sin_051_real128 ( x ) end procedure taylor_series_sin_052_real128 module procedure taylor_series_sin_053_real128 res = horner_052 ( x = x , pre_step = coefficient_053 ) end procedure taylor_series_sin_053_real128 module procedure taylor_series_sin_054_real128 res = taylor_series_sin_053_real128 ( x ) end procedure taylor_series_sin_054_real128 module procedure taylor_series_sin_055_real128 res = horner_054 ( x = x , pre_step = coefficient_055 ) end procedure taylor_series_sin_055_real128 module procedure taylor_series_sin_056_real128 res = taylor_series_sin_055_real128 ( x ) end procedure taylor_series_sin_056_real128 module procedure taylor_series_sin_057_real128 res = horner_056 ( x = x , pre_step = coefficient_057 ) end procedure taylor_series_sin_057_real128 module procedure taylor_series_sin_058_real128 res = taylor_series_sin_057_real128 ( x ) end procedure taylor_series_sin_058_real128 module procedure taylor_series_sin_059_real128 res = horner_058 ( x = x , pre_step = coefficient_059 ) end procedure taylor_series_sin_059_real128 module procedure taylor_series_sin_060_real128 res = taylor_series_sin_059_real128 ( x ) end procedure taylor_series_sin_060_real128 module procedure taylor_series_sin_061_real128 res = horner_060 ( x = x , pre_step = coefficient_061 ) end procedure taylor_series_sin_061_real128 module procedure taylor_series_sin_062_real128 res = taylor_series_sin_061_real128 ( x ) end procedure taylor_series_sin_062_real128 module procedure taylor_series_sin_063_real128 res = horner_062 ( x = x , pre_step = coefficient_063 ) end procedure taylor_series_sin_063_real128 module procedure taylor_series_sin_064_real128 res = taylor_series_sin_063_real128 ( x ) end procedure taylor_series_sin_064_real128 module procedure taylor_series_sin_065_real128 res = horner_064 ( x = x , pre_step = coefficient_065 ) end procedure taylor_series_sin_065_real128 module procedure taylor_series_sin_066_real128 res = taylor_series_sin_065_real128 ( x ) end procedure taylor_series_sin_066_real128 module procedure taylor_series_sin_067_real128 res = horner_066 ( x = x , pre_step = coefficient_067 ) end procedure taylor_series_sin_067_real128 module procedure taylor_series_sin_068_real128 res = taylor_series_sin_067_real128 ( x ) end procedure taylor_series_sin_068_real128 module procedure taylor_series_sin_069_real128 res = horner_068 ( x = x , pre_step = coefficient_069 ) end procedure taylor_series_sin_069_real128 module procedure taylor_series_sin_070_real128 res = taylor_series_sin_069_real128 ( x ) end procedure taylor_series_sin_070_real128 module procedure taylor_series_sin_071_real128 res = horner_070 ( x = x , pre_step = coefficient_071 ) end procedure taylor_series_sin_071_real128 module procedure taylor_series_sin_072_real128 res = taylor_series_sin_071_real128 ( x ) end procedure taylor_series_sin_072_real128 module procedure taylor_series_sin_073_real128 res = horner_072 ( x = x , pre_step = coefficient_073 ) end procedure taylor_series_sin_073_real128 module procedure taylor_series_sin_074_real128 res = taylor_series_sin_073_real128 ( x ) end procedure taylor_series_sin_074_real128 module procedure taylor_series_sin_075_real128 res = horner_074 ( x = x , pre_step = coefficient_075 ) end procedure taylor_series_sin_075_real128 module procedure taylor_series_sin_076_real128 res = taylor_series_sin_075_real128 ( x ) end procedure taylor_series_sin_076_real128 module procedure taylor_series_sin_077_real128 res = horner_076 ( x = x , pre_step = coefficient_077 ) end procedure taylor_series_sin_077_real128 module procedure taylor_series_sin_078_real128 res = taylor_series_sin_077_real128 ( x ) end procedure taylor_series_sin_078_real128 module procedure taylor_series_sin_079_real128 res = horner_078 ( x = x , pre_step = coefficient_079 ) end procedure taylor_series_sin_079_real128 module procedure taylor_series_sin_080_real128 res = taylor_series_sin_079_real128 ( x ) end procedure taylor_series_sin_080_real128 module procedure taylor_series_sin_081_real128 res = horner_080 ( x = x , pre_step = coefficient_081 ) end procedure taylor_series_sin_081_real128 module procedure taylor_series_sin_082_real128 res = taylor_series_sin_081_real128 ( x ) end procedure taylor_series_sin_082_real128 module procedure taylor_series_sin_083_real128 res = horner_082 ( x = x , pre_step = coefficient_083 ) end procedure taylor_series_sin_083_real128 module procedure taylor_series_sin_084_real128 res = taylor_series_sin_083_real128 ( x ) end procedure taylor_series_sin_084_real128 module procedure taylor_series_sin_085_real128 res = horner_084 ( x = x , pre_step = coefficient_085 ) end procedure taylor_series_sin_085_real128 module procedure taylor_series_sin_086_real128 res = taylor_series_sin_085_real128 ( x ) end procedure taylor_series_sin_086_real128 module procedure taylor_series_sin_087_real128 res = horner_086 ( x = x , pre_step = coefficient_087 ) end procedure taylor_series_sin_087_real128 module procedure taylor_series_sin_088_real128 res = taylor_series_sin_087_real128 ( x ) end procedure taylor_series_sin_088_real128 module procedure taylor_series_sin_089_real128 res = horner_088 ( x = x , pre_step = coefficient_089 ) end procedure taylor_series_sin_089_real128 module procedure taylor_series_sin_090_real128 res = taylor_series_sin_089_real128 ( x ) end procedure taylor_series_sin_090_real128 module procedure taylor_series_sin_091_real128 res = horner_090 ( x = x , pre_step = coefficient_091 ) end procedure taylor_series_sin_091_real128 module procedure taylor_series_sin_092_real128 res = taylor_series_sin_091_real128 ( x ) end procedure taylor_series_sin_092_real128 module procedure taylor_series_sin_093_real128 res = horner_092 ( x = x , pre_step = coefficient_093 ) end procedure taylor_series_sin_093_real128 module procedure taylor_series_sin_094_real128 res = taylor_series_sin_093_real128 ( x ) end procedure taylor_series_sin_094_real128 module procedure taylor_series_sin_095_real128 res = horner_094 ( x = x , pre_step = coefficient_095 ) end procedure taylor_series_sin_095_real128 module procedure taylor_series_sin_096_real128 res = taylor_series_sin_095_real128 ( x ) end procedure taylor_series_sin_096_real128 module procedure taylor_series_sin_097_real128 res = horner_096 ( x = x , pre_step = coefficient_097 ) end procedure taylor_series_sin_097_real128 module procedure taylor_series_sin_098_real128 res = taylor_series_sin_097_real128 ( x ) end procedure taylor_series_sin_098_real128 module procedure taylor_series_sin_099_real128 res = horner_098 ( x = x , pre_step = coefficient_099 ) end procedure taylor_series_sin_099_real128 module procedure taylor_series_sin_100_real128 res = taylor_series_sin_099_real128 ( x ) end procedure taylor_series_sin_100_real128 module procedure taylor_series_sin_101_real128 res = horner_100 ( x = x , pre_step = coefficient_101 ) end procedure taylor_series_sin_101_real128 module procedure taylor_series_sin_102_real128 res = taylor_series_sin_101_real128 ( x ) end procedure taylor_series_sin_102_real128 module procedure taylor_series_sin_103_real128 res = horner_102 ( x = x , pre_step = coefficient_103 ) end procedure taylor_series_sin_103_real128 module procedure taylor_series_sin_104_real128 res = taylor_series_sin_103_real128 ( x ) end procedure taylor_series_sin_104_real128 module procedure taylor_series_sin_105_real128 res = horner_104 ( x = x , pre_step = coefficient_105 ) end procedure taylor_series_sin_105_real128 module procedure taylor_series_sin_106_real128 res = taylor_series_sin_105_real128 ( x ) end procedure taylor_series_sin_106_real128 module procedure taylor_series_sin_107_real128 res = horner_106 ( x = x , pre_step = coefficient_107 ) end procedure taylor_series_sin_107_real128 module procedure taylor_series_sin_108_real128 res = taylor_series_sin_107_real128 ( x ) end procedure taylor_series_sin_108_real128 module procedure taylor_series_sin_109_real128 res = horner_108 ( x = x , pre_step = coefficient_109 ) end procedure taylor_series_sin_109_real128 module procedure taylor_series_sin_110_real128 res = taylor_series_sin_109_real128 ( x ) end procedure taylor_series_sin_110_real128 module procedure taylor_series_sin_111_real128 res = horner_110 ( x = x , pre_step = coefficient_111 ) end procedure taylor_series_sin_111_real128 module procedure taylor_series_sin_112_real128 res = taylor_series_sin_111_real128 ( x ) end procedure taylor_series_sin_112_real128 module procedure taylor_series_sin_113_real128 res = horner_112 ( x = x , pre_step = coefficient_113 ) end procedure taylor_series_sin_113_real128 module procedure taylor_series_sin_114_real128 res = taylor_series_sin_113_real128 ( x ) end procedure taylor_series_sin_114_real128 module procedure taylor_series_sin_115_real128 res = horner_114 ( x = x , pre_step = coefficient_115 ) end procedure taylor_series_sin_115_real128 module procedure taylor_series_sin_116_real128 res = taylor_series_sin_115_real128 ( x ) end procedure taylor_series_sin_116_real128 module procedure taylor_series_sin_117_real128 res = horner_116 ( x = x , pre_step = coefficient_117 ) end procedure taylor_series_sin_117_real128 module procedure taylor_series_sin_118_real128 res = taylor_series_sin_117_real128 ( x ) end procedure taylor_series_sin_118_real128 module procedure taylor_series_sin_119_real128 res = horner_118 ( x = x , pre_step = coefficient_119 ) end procedure taylor_series_sin_119_real128 module procedure taylor_series_sin_120_real128 res = taylor_series_sin_119_real128 ( x ) end procedure taylor_series_sin_120_real128 module procedure taylor_series_sin_121_real128 res = horner_120 ( x = x , pre_step = coefficient_121 ) end procedure taylor_series_sin_121_real128 module procedure taylor_series_sin_122_real128 res = taylor_series_sin_121_real128 ( x ) end procedure taylor_series_sin_122_real128 module procedure taylor_series_sin_123_real128 res = horner_122 ( x = x , pre_step = coefficient_123 ) end procedure taylor_series_sin_123_real128 module procedure taylor_series_sin_124_real128 res = taylor_series_sin_123_real128 ( x ) end procedure taylor_series_sin_124_real128 module procedure taylor_series_sin_125_real128 res = horner_124 ( x = x , pre_step = coefficient_125 ) end procedure taylor_series_sin_125_real128 module procedure taylor_series_sin_126_real128 res = taylor_series_sin_125_real128 ( x ) end procedure taylor_series_sin_126_real128 module procedure taylor_series_sin_127_real128 res = horner_126 ( x = x , pre_step = coefficient_127 ) end procedure taylor_series_sin_127_real128 module procedure taylor_series_sin_128_real128 res = taylor_series_sin_127_real128 ( x ) end procedure taylor_series_sin_128_real128 module procedure taylor_series_sin_129_real128 res = horner_128 ( x = x , pre_step = coefficient_129 ) end procedure taylor_series_sin_129_real128 module procedure taylor_series_sin_130_real128 res = taylor_series_sin_129_real128 ( x ) end procedure taylor_series_sin_130_real128 module procedure taylor_series_sin_131_real128 res = horner_130 ( x = x , pre_step = coefficient_131 ) end procedure taylor_series_sin_131_real128 module procedure taylor_series_sin_132_real128 res = taylor_series_sin_131_real128 ( x ) end procedure taylor_series_sin_132_real128 module procedure taylor_series_sin_133_real128 res = horner_132 ( x = x , pre_step = coefficient_133 ) end procedure taylor_series_sin_133_real128 module procedure taylor_series_sin_134_real128 res = taylor_series_sin_133_real128 ( x ) end procedure taylor_series_sin_134_real128 module procedure taylor_series_sin_135_real128 res = horner_134 ( x = x , pre_step = coefficient_135 ) end procedure taylor_series_sin_135_real128 module procedure taylor_series_sin_136_real128 res = taylor_series_sin_135_real128 ( x ) end procedure taylor_series_sin_136_real128 module procedure taylor_series_sin_137_real128 res = horner_136 ( x = x , pre_step = coefficient_137 ) end procedure taylor_series_sin_137_real128 module procedure taylor_series_sin_138_real128 res = taylor_series_sin_137_real128 ( x ) end procedure taylor_series_sin_138_real128 module procedure taylor_series_sin_139_real128 res = horner_138 ( x = x , pre_step = coefficient_139 ) end procedure taylor_series_sin_139_real128 module procedure taylor_series_sin_140_real128 res = taylor_series_sin_139_real128 ( x ) end procedure taylor_series_sin_140_real128 module procedure taylor_series_sin_141_real128 res = horner_140 ( x = x , pre_step = coefficient_141 ) end procedure taylor_series_sin_141_real128 module procedure taylor_series_sin_142_real128 res = taylor_series_sin_141_real128 ( x ) end procedure taylor_series_sin_142_real128 module procedure taylor_series_sin_143_real128 res = horner_142 ( x = x , pre_step = coefficient_143 ) end procedure taylor_series_sin_143_real128 module procedure taylor_series_sin_144_real128 res = taylor_series_sin_143_real128 ( x ) end procedure taylor_series_sin_144_real128 module procedure taylor_series_sin_145_real128 res = horner_144 ( x = x , pre_step = coefficient_145 ) end procedure taylor_series_sin_145_real128 module procedure taylor_series_sin_146_real128 res = taylor_series_sin_145_real128 ( x ) end procedure taylor_series_sin_146_real128 module procedure taylor_series_sin_147_real128 res = horner_146 ( x = x , pre_step = coefficient_147 ) end procedure taylor_series_sin_147_real128 module procedure taylor_series_sin_148_real128 res = taylor_series_sin_147_real128 ( x ) end procedure taylor_series_sin_148_real128 module procedure taylor_series_sin_149_real128 res = horner_148 ( x = x , pre_step = coefficient_149 ) end procedure taylor_series_sin_149_real128 module procedure taylor_series_sin_150_real128 res = taylor_series_sin_149_real128 ( x ) end procedure taylor_series_sin_150_real128 module procedure taylor_series_sin_151_real128 res = horner_150 ( x = x , pre_step = coefficient_151 ) end procedure taylor_series_sin_151_real128 module procedure taylor_series_sin_152_real128 res = taylor_series_sin_151_real128 ( x ) end procedure taylor_series_sin_152_real128 module procedure taylor_series_sin_153_real128 res = horner_152 ( x = x , pre_step = coefficient_153 ) end procedure taylor_series_sin_153_real128 module procedure taylor_series_sin_154_real128 res = taylor_series_sin_153_real128 ( x ) end procedure taylor_series_sin_154_real128 module procedure taylor_series_sin_155_real128 res = horner_154 ( x = x , pre_step = coefficient_155 ) end procedure taylor_series_sin_155_real128 module procedure taylor_series_sin_156_real128 res = taylor_series_sin_155_real128 ( x ) end procedure taylor_series_sin_156_real128 module procedure taylor_series_sin_157_real128 res = horner_156 ( x = x , pre_step = coefficient_157 ) end procedure taylor_series_sin_157_real128 module procedure taylor_series_sin_158_real128 res = taylor_series_sin_157_real128 ( x ) end procedure taylor_series_sin_158_real128 module procedure taylor_series_sin_159_real128 res = horner_158 ( x = x , pre_step = coefficient_159 ) end procedure taylor_series_sin_159_real128 module procedure taylor_series_sin_160_real128 res = taylor_series_sin_159_real128 ( x ) end procedure taylor_series_sin_160_real128 module procedure taylor_series_sin_161_real128 res = horner_160 ( x = x , pre_step = coefficient_161 ) end procedure taylor_series_sin_161_real128 module procedure taylor_series_sin_162_real128 res = taylor_series_sin_161_real128 ( x ) end procedure taylor_series_sin_162_real128 module procedure taylor_series_sin_163_real128 res = horner_162 ( x = x , pre_step = coefficient_163 ) end procedure taylor_series_sin_163_real128 module procedure taylor_series_sin_164_real128 res = taylor_series_sin_163_real128 ( x ) end procedure taylor_series_sin_164_real128 module procedure taylor_series_sin_165_real128 res = horner_164 ( x = x , pre_step = coefficient_165 ) end procedure taylor_series_sin_165_real128 module procedure taylor_series_sin_166_real128 res = taylor_series_sin_165_real128 ( x ) end procedure taylor_series_sin_166_real128 module procedure taylor_series_sin_167_real128 res = horner_166 ( x = x , pre_step = coefficient_167 ) end procedure taylor_series_sin_167_real128 module procedure taylor_series_sin_168_real128 res = taylor_series_sin_167_real128 ( x ) end procedure taylor_series_sin_168_real128 module procedure taylor_series_sin_169_real128 res = horner_168 ( x = x , pre_step = coefficient_169 ) end procedure taylor_series_sin_169_real128 module procedure taylor_series_sin_170_real128 res = taylor_series_sin_169_real128 ( x ) end procedure taylor_series_sin_170_real128 module procedure taylor_series_sin_171_real128 res = horner_170 ( x = x , pre_step = coefficient_171 ) end procedure taylor_series_sin_171_real128 module procedure taylor_series_sin_172_real128 res = taylor_series_sin_171_real128 ( x ) end procedure taylor_series_sin_172_real128 module procedure taylor_series_sin_173_real128 res = horner_172 ( x = x , pre_step = coefficient_173 ) end procedure taylor_series_sin_173_real128 module procedure taylor_series_sin_174_real128 res = taylor_series_sin_173_real128 ( x ) end procedure taylor_series_sin_174_real128 module procedure taylor_series_sin_175_real128 res = horner_174 ( x = x , pre_step = coefficient_175 ) end procedure taylor_series_sin_175_real128 module procedure taylor_series_sin_176_real128 res = taylor_series_sin_175_real128 ( x ) end procedure taylor_series_sin_176_real128 module procedure taylor_series_sin_177_real128 res = horner_176 ( x = x , pre_step = coefficient_177 ) end procedure taylor_series_sin_177_real128 real ( real128 ) elemental function horner_000 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_000 = pre_step * x + coefficient_000 end function real ( real128 ) elemental function horner_001 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_001 = horner_000 ( x = x , pre_step = ( pre_step * x + coefficient_001 ) ) end function real ( real128 ) elemental function horner_002 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_002 = horner_001 ( x = x , pre_step = ( pre_step * x + coefficient_002 ) ) end function real ( real128 ) elemental function horner_003 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_003 = horner_002 ( x = x , pre_step = ( pre_step * x + coefficient_003 ) ) end function real ( real128 ) elemental function horner_004 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_004 = horner_003 ( x = x , pre_step = ( pre_step * x + coefficient_004 ) ) end function real ( real128 ) elemental function horner_005 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_005 = horner_004 ( x = x , pre_step = ( pre_step * x + coefficient_005 ) ) end function real ( real128 ) elemental function horner_006 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_006 = horner_005 ( x = x , pre_step = ( pre_step * x + coefficient_006 ) ) end function real ( real128 ) elemental function horner_007 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_007 = horner_006 ( x = x , pre_step = ( pre_step * x + coefficient_007 ) ) end function real ( real128 ) elemental function horner_008 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_008 = horner_007 ( x = x , pre_step = ( pre_step * x + coefficient_008 ) ) end function real ( real128 ) elemental function horner_009 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_009 = horner_008 ( x = x , pre_step = ( pre_step * x + coefficient_009 ) ) end function real ( real128 ) elemental function horner_010 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_010 = horner_009 ( x = x , pre_step = ( pre_step * x + coefficient_010 ) ) end function real ( real128 ) elemental function horner_011 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_011 = horner_010 ( x = x , pre_step = ( pre_step * x + coefficient_011 ) ) end function real ( real128 ) elemental function horner_012 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_012 = horner_011 ( x = x , pre_step = ( pre_step * x + coefficient_012 ) ) end function real ( real128 ) elemental function horner_013 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_013 = horner_012 ( x = x , pre_step = ( pre_step * x + coefficient_013 ) ) end function real ( real128 ) elemental function horner_014 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_014 = horner_013 ( x = x , pre_step = ( pre_step * x + coefficient_014 ) ) end function real ( real128 ) elemental function horner_015 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_015 = horner_014 ( x = x , pre_step = ( pre_step * x + coefficient_015 ) ) end function real ( real128 ) elemental function horner_016 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_016 = horner_015 ( x = x , pre_step = ( pre_step * x + coefficient_016 ) ) end function real ( real128 ) elemental function horner_017 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_017 = horner_016 ( x = x , pre_step = ( pre_step * x + coefficient_017 ) ) end function real ( real128 ) elemental function horner_018 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_018 = horner_017 ( x = x , pre_step = ( pre_step * x + coefficient_018 ) ) end function real ( real128 ) elemental function horner_019 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_019 = horner_018 ( x = x , pre_step = ( pre_step * x + coefficient_019 ) ) end function real ( real128 ) elemental function horner_020 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_020 = horner_019 ( x = x , pre_step = ( pre_step * x + coefficient_020 ) ) end function real ( real128 ) elemental function horner_021 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_021 = horner_020 ( x = x , pre_step = ( pre_step * x + coefficient_021 ) ) end function real ( real128 ) elemental function horner_022 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_022 = horner_021 ( x = x , pre_step = ( pre_step * x + coefficient_022 ) ) end function real ( real128 ) elemental function horner_023 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_023 = horner_022 ( x = x , pre_step = ( pre_step * x + coefficient_023 ) ) end function real ( real128 ) elemental function horner_024 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_024 = horner_023 ( x = x , pre_step = ( pre_step * x + coefficient_024 ) ) end function real ( real128 ) elemental function horner_025 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_025 = horner_024 ( x = x , pre_step = ( pre_step * x + coefficient_025 ) ) end function real ( real128 ) elemental function horner_026 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_026 = horner_025 ( x = x , pre_step = ( pre_step * x + coefficient_026 ) ) end function real ( real128 ) elemental function horner_027 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_027 = horner_026 ( x = x , pre_step = ( pre_step * x + coefficient_027 ) ) end function real ( real128 ) elemental function horner_028 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_028 = horner_027 ( x = x , pre_step = ( pre_step * x + coefficient_028 ) ) end function real ( real128 ) elemental function horner_029 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_029 = horner_028 ( x = x , pre_step = ( pre_step * x + coefficient_029 ) ) end function real ( real128 ) elemental function horner_030 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_030 = horner_029 ( x = x , pre_step = ( pre_step * x + coefficient_030 ) ) end function real ( real128 ) elemental function horner_031 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_031 = horner_030 ( x = x , pre_step = ( pre_step * x + coefficient_031 ) ) end function real ( real128 ) elemental function horner_032 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_032 = horner_031 ( x = x , pre_step = ( pre_step * x + coefficient_032 ) ) end function real ( real128 ) elemental function horner_033 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_033 = horner_032 ( x = x , pre_step = ( pre_step * x + coefficient_033 ) ) end function real ( real128 ) elemental function horner_034 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_034 = horner_033 ( x = x , pre_step = ( pre_step * x + coefficient_034 ) ) end function real ( real128 ) elemental function horner_035 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_035 = horner_034 ( x = x , pre_step = ( pre_step * x + coefficient_035 ) ) end function real ( real128 ) elemental function horner_036 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_036 = horner_035 ( x = x , pre_step = ( pre_step * x + coefficient_036 ) ) end function real ( real128 ) elemental function horner_037 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_037 = horner_036 ( x = x , pre_step = ( pre_step * x + coefficient_037 ) ) end function real ( real128 ) elemental function horner_038 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_038 = horner_037 ( x = x , pre_step = ( pre_step * x + coefficient_038 ) ) end function real ( real128 ) elemental function horner_039 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_039 = horner_038 ( x = x , pre_step = ( pre_step * x + coefficient_039 ) ) end function real ( real128 ) elemental function horner_040 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_040 = horner_039 ( x = x , pre_step = ( pre_step * x + coefficient_040 ) ) end function real ( real128 ) elemental function horner_041 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_041 = horner_040 ( x = x , pre_step = ( pre_step * x + coefficient_041 ) ) end function real ( real128 ) elemental function horner_042 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_042 = horner_041 ( x = x , pre_step = ( pre_step * x + coefficient_042 ) ) end function real ( real128 ) elemental function horner_043 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_043 = horner_042 ( x = x , pre_step = ( pre_step * x + coefficient_043 ) ) end function real ( real128 ) elemental function horner_044 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_044 = horner_043 ( x = x , pre_step = ( pre_step * x + coefficient_044 ) ) end function real ( real128 ) elemental function horner_045 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_045 = horner_044 ( x = x , pre_step = ( pre_step * x + coefficient_045 ) ) end function real ( real128 ) elemental function horner_046 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_046 = horner_045 ( x = x , pre_step = ( pre_step * x + coefficient_046 ) ) end function real ( real128 ) elemental function horner_047 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_047 = horner_046 ( x = x , pre_step = ( pre_step * x + coefficient_047 ) ) end function real ( real128 ) elemental function horner_048 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_048 = horner_047 ( x = x , pre_step = ( pre_step * x + coefficient_048 ) ) end function real ( real128 ) elemental function horner_049 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_049 = horner_048 ( x = x , pre_step = ( pre_step * x + coefficient_049 ) ) end function real ( real128 ) elemental function horner_050 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_050 = horner_049 ( x = x , pre_step = ( pre_step * x + coefficient_050 ) ) end function real ( real128 ) elemental function horner_051 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_051 = horner_050 ( x = x , pre_step = ( pre_step * x + coefficient_051 ) ) end function real ( real128 ) elemental function horner_052 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_052 = horner_051 ( x = x , pre_step = ( pre_step * x + coefficient_052 ) ) end function real ( real128 ) elemental function horner_053 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_053 = horner_052 ( x = x , pre_step = ( pre_step * x + coefficient_053 ) ) end function real ( real128 ) elemental function horner_054 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_054 = horner_053 ( x = x , pre_step = ( pre_step * x + coefficient_054 ) ) end function real ( real128 ) elemental function horner_055 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_055 = horner_054 ( x = x , pre_step = ( pre_step * x + coefficient_055 ) ) end function real ( real128 ) elemental function horner_056 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_056 = horner_055 ( x = x , pre_step = ( pre_step * x + coefficient_056 ) ) end function real ( real128 ) elemental function horner_057 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_057 = horner_056 ( x = x , pre_step = ( pre_step * x + coefficient_057 ) ) end function real ( real128 ) elemental function horner_058 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_058 = horner_057 ( x = x , pre_step = ( pre_step * x + coefficient_058 ) ) end function real ( real128 ) elemental function horner_059 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_059 = horner_058 ( x = x , pre_step = ( pre_step * x + coefficient_059 ) ) end function real ( real128 ) elemental function horner_060 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_060 = horner_059 ( x = x , pre_step = ( pre_step * x + coefficient_060 ) ) end function real ( real128 ) elemental function horner_061 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_061 = horner_060 ( x = x , pre_step = ( pre_step * x + coefficient_061 ) ) end function real ( real128 ) elemental function horner_062 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_062 = horner_061 ( x = x , pre_step = ( pre_step * x + coefficient_062 ) ) end function real ( real128 ) elemental function horner_063 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_063 = horner_062 ( x = x , pre_step = ( pre_step * x + coefficient_063 ) ) end function real ( real128 ) elemental function horner_064 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_064 = horner_063 ( x = x , pre_step = ( pre_step * x + coefficient_064 ) ) end function real ( real128 ) elemental function horner_065 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_065 = horner_064 ( x = x , pre_step = ( pre_step * x + coefficient_065 ) ) end function real ( real128 ) elemental function horner_066 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_066 = horner_065 ( x = x , pre_step = ( pre_step * x + coefficient_066 ) ) end function real ( real128 ) elemental function horner_067 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_067 = horner_066 ( x = x , pre_step = ( pre_step * x + coefficient_067 ) ) end function real ( real128 ) elemental function horner_068 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_068 = horner_067 ( x = x , pre_step = ( pre_step * x + coefficient_068 ) ) end function real ( real128 ) elemental function horner_069 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_069 = horner_068 ( x = x , pre_step = ( pre_step * x + coefficient_069 ) ) end function real ( real128 ) elemental function horner_070 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_070 = horner_069 ( x = x , pre_step = ( pre_step * x + coefficient_070 ) ) end function real ( real128 ) elemental function horner_071 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_071 = horner_070 ( x = x , pre_step = ( pre_step * x + coefficient_071 ) ) end function real ( real128 ) elemental function horner_072 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_072 = horner_071 ( x = x , pre_step = ( pre_step * x + coefficient_072 ) ) end function real ( real128 ) elemental function horner_073 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_073 = horner_072 ( x = x , pre_step = ( pre_step * x + coefficient_073 ) ) end function real ( real128 ) elemental function horner_074 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_074 = horner_073 ( x = x , pre_step = ( pre_step * x + coefficient_074 ) ) end function real ( real128 ) elemental function horner_075 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_075 = horner_074 ( x = x , pre_step = ( pre_step * x + coefficient_075 ) ) end function real ( real128 ) elemental function horner_076 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_076 = horner_075 ( x = x , pre_step = ( pre_step * x + coefficient_076 ) ) end function real ( real128 ) elemental function horner_077 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_077 = horner_076 ( x = x , pre_step = ( pre_step * x + coefficient_077 ) ) end function real ( real128 ) elemental function horner_078 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_078 = horner_077 ( x = x , pre_step = ( pre_step * x + coefficient_078 ) ) end function real ( real128 ) elemental function horner_079 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_079 = horner_078 ( x = x , pre_step = ( pre_step * x + coefficient_079 ) ) end function real ( real128 ) elemental function horner_080 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_080 = horner_079 ( x = x , pre_step = ( pre_step * x + coefficient_080 ) ) end function real ( real128 ) elemental function horner_081 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_081 = horner_080 ( x = x , pre_step = ( pre_step * x + coefficient_081 ) ) end function real ( real128 ) elemental function horner_082 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_082 = horner_081 ( x = x , pre_step = ( pre_step * x + coefficient_082 ) ) end function real ( real128 ) elemental function horner_083 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_083 = horner_082 ( x = x , pre_step = ( pre_step * x + coefficient_083 ) ) end function real ( real128 ) elemental function horner_084 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_084 = horner_083 ( x = x , pre_step = ( pre_step * x + coefficient_084 ) ) end function real ( real128 ) elemental function horner_085 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_085 = horner_084 ( x = x , pre_step = ( pre_step * x + coefficient_085 ) ) end function real ( real128 ) elemental function horner_086 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_086 = horner_085 ( x = x , pre_step = ( pre_step * x + coefficient_086 ) ) end function real ( real128 ) elemental function horner_087 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_087 = horner_086 ( x = x , pre_step = ( pre_step * x + coefficient_087 ) ) end function real ( real128 ) elemental function horner_088 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_088 = horner_087 ( x = x , pre_step = ( pre_step * x + coefficient_088 ) ) end function real ( real128 ) elemental function horner_089 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_089 = horner_088 ( x = x , pre_step = ( pre_step * x + coefficient_089 ) ) end function real ( real128 ) elemental function horner_090 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_090 = horner_089 ( x = x , pre_step = ( pre_step * x + coefficient_090 ) ) end function real ( real128 ) elemental function horner_091 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_091 = horner_090 ( x = x , pre_step = ( pre_step * x + coefficient_091 ) ) end function real ( real128 ) elemental function horner_092 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_092 = horner_091 ( x = x , pre_step = ( pre_step * x + coefficient_092 ) ) end function real ( real128 ) elemental function horner_093 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_093 = horner_092 ( x = x , pre_step = ( pre_step * x + coefficient_093 ) ) end function real ( real128 ) elemental function horner_094 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_094 = horner_093 ( x = x , pre_step = ( pre_step * x + coefficient_094 ) ) end function real ( real128 ) elemental function horner_095 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_095 = horner_094 ( x = x , pre_step = ( pre_step * x + coefficient_095 ) ) end function real ( real128 ) elemental function horner_096 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_096 = horner_095 ( x = x , pre_step = ( pre_step * x + coefficient_096 ) ) end function real ( real128 ) elemental function horner_097 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_097 = horner_096 ( x = x , pre_step = ( pre_step * x + coefficient_097 ) ) end function real ( real128 ) elemental function horner_098 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_098 = horner_097 ( x = x , pre_step = ( pre_step * x + coefficient_098 ) ) end function real ( real128 ) elemental function horner_099 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_099 = horner_098 ( x = x , pre_step = ( pre_step * x + coefficient_099 ) ) end function real ( real128 ) elemental function horner_100 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_100 = horner_099 ( x = x , pre_step = ( pre_step * x + coefficient_100 ) ) end function real ( real128 ) elemental function horner_101 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_101 = horner_100 ( x = x , pre_step = ( pre_step * x + coefficient_101 ) ) end function real ( real128 ) elemental function horner_102 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_102 = horner_101 ( x = x , pre_step = ( pre_step * x + coefficient_102 ) ) end function real ( real128 ) elemental function horner_103 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_103 = horner_102 ( x = x , pre_step = ( pre_step * x + coefficient_103 ) ) end function real ( real128 ) elemental function horner_104 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_104 = horner_103 ( x = x , pre_step = ( pre_step * x + coefficient_104 ) ) end function real ( real128 ) elemental function horner_105 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_105 = horner_104 ( x = x , pre_step = ( pre_step * x + coefficient_105 ) ) end function real ( real128 ) elemental function horner_106 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_106 = horner_105 ( x = x , pre_step = ( pre_step * x + coefficient_106 ) ) end function real ( real128 ) elemental function horner_107 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_107 = horner_106 ( x = x , pre_step = ( pre_step * x + coefficient_107 ) ) end function real ( real128 ) elemental function horner_108 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_108 = horner_107 ( x = x , pre_step = ( pre_step * x + coefficient_108 ) ) end function real ( real128 ) elemental function horner_109 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_109 = horner_108 ( x = x , pre_step = ( pre_step * x + coefficient_109 ) ) end function real ( real128 ) elemental function horner_110 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_110 = horner_109 ( x = x , pre_step = ( pre_step * x + coefficient_110 ) ) end function real ( real128 ) elemental function horner_111 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_111 = horner_110 ( x = x , pre_step = ( pre_step * x + coefficient_111 ) ) end function real ( real128 ) elemental function horner_112 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_112 = horner_111 ( x = x , pre_step = ( pre_step * x + coefficient_112 ) ) end function real ( real128 ) elemental function horner_113 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_113 = horner_112 ( x = x , pre_step = ( pre_step * x + coefficient_113 ) ) end function real ( real128 ) elemental function horner_114 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_114 = horner_113 ( x = x , pre_step = ( pre_step * x + coefficient_114 ) ) end function real ( real128 ) elemental function horner_115 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_115 = horner_114 ( x = x , pre_step = ( pre_step * x + coefficient_115 ) ) end function real ( real128 ) elemental function horner_116 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_116 = horner_115 ( x = x , pre_step = ( pre_step * x + coefficient_116 ) ) end function real ( real128 ) elemental function horner_117 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_117 = horner_116 ( x = x , pre_step = ( pre_step * x + coefficient_117 ) ) end function real ( real128 ) elemental function horner_118 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_118 = horner_117 ( x = x , pre_step = ( pre_step * x + coefficient_118 ) ) end function real ( real128 ) elemental function horner_119 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_119 = horner_118 ( x = x , pre_step = ( pre_step * x + coefficient_119 ) ) end function real ( real128 ) elemental function horner_120 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_120 = horner_119 ( x = x , pre_step = ( pre_step * x + coefficient_120 ) ) end function real ( real128 ) elemental function horner_121 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_121 = horner_120 ( x = x , pre_step = ( pre_step * x + coefficient_121 ) ) end function real ( real128 ) elemental function horner_122 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_122 = horner_121 ( x = x , pre_step = ( pre_step * x + coefficient_122 ) ) end function real ( real128 ) elemental function horner_123 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_123 = horner_122 ( x = x , pre_step = ( pre_step * x + coefficient_123 ) ) end function real ( real128 ) elemental function horner_124 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_124 = horner_123 ( x = x , pre_step = ( pre_step * x + coefficient_124 ) ) end function real ( real128 ) elemental function horner_125 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_125 = horner_124 ( x = x , pre_step = ( pre_step * x + coefficient_125 ) ) end function real ( real128 ) elemental function horner_126 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_126 = horner_125 ( x = x , pre_step = ( pre_step * x + coefficient_126 ) ) end function real ( real128 ) elemental function horner_127 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_127 = horner_126 ( x = x , pre_step = ( pre_step * x + coefficient_127 ) ) end function real ( real128 ) elemental function horner_128 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_128 = horner_127 ( x = x , pre_step = ( pre_step * x + coefficient_128 ) ) end function real ( real128 ) elemental function horner_129 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_129 = horner_128 ( x = x , pre_step = ( pre_step * x + coefficient_129 ) ) end function real ( real128 ) elemental function horner_130 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_130 = horner_129 ( x = x , pre_step = ( pre_step * x + coefficient_130 ) ) end function real ( real128 ) elemental function horner_131 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_131 = horner_130 ( x = x , pre_step = ( pre_step * x + coefficient_131 ) ) end function real ( real128 ) elemental function horner_132 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_132 = horner_131 ( x = x , pre_step = ( pre_step * x + coefficient_132 ) ) end function real ( real128 ) elemental function horner_133 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_133 = horner_132 ( x = x , pre_step = ( pre_step * x + coefficient_133 ) ) end function real ( real128 ) elemental function horner_134 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_134 = horner_133 ( x = x , pre_step = ( pre_step * x + coefficient_134 ) ) end function real ( real128 ) elemental function horner_135 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_135 = horner_134 ( x = x , pre_step = ( pre_step * x + coefficient_135 ) ) end function real ( real128 ) elemental function horner_136 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_136 = horner_135 ( x = x , pre_step = ( pre_step * x + coefficient_136 ) ) end function real ( real128 ) elemental function horner_137 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_137 = horner_136 ( x = x , pre_step = ( pre_step * x + coefficient_137 ) ) end function real ( real128 ) elemental function horner_138 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_138 = horner_137 ( x = x , pre_step = ( pre_step * x + coefficient_138 ) ) end function real ( real128 ) elemental function horner_139 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_139 = horner_138 ( x = x , pre_step = ( pre_step * x + coefficient_139 ) ) end function real ( real128 ) elemental function horner_140 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_140 = horner_139 ( x = x , pre_step = ( pre_step * x + coefficient_140 ) ) end function real ( real128 ) elemental function horner_141 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_141 = horner_140 ( x = x , pre_step = ( pre_step * x + coefficient_141 ) ) end function real ( real128 ) elemental function horner_142 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_142 = horner_141 ( x = x , pre_step = ( pre_step * x + coefficient_142 ) ) end function real ( real128 ) elemental function horner_143 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_143 = horner_142 ( x = x , pre_step = ( pre_step * x + coefficient_143 ) ) end function real ( real128 ) elemental function horner_144 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_144 = horner_143 ( x = x , pre_step = ( pre_step * x + coefficient_144 ) ) end function real ( real128 ) elemental function horner_145 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_145 = horner_144 ( x = x , pre_step = ( pre_step * x + coefficient_145 ) ) end function real ( real128 ) elemental function horner_146 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_146 = horner_145 ( x = x , pre_step = ( pre_step * x + coefficient_146 ) ) end function real ( real128 ) elemental function horner_147 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_147 = horner_146 ( x = x , pre_step = ( pre_step * x + coefficient_147 ) ) end function real ( real128 ) elemental function horner_148 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_148 = horner_147 ( x = x , pre_step = ( pre_step * x + coefficient_148 ) ) end function real ( real128 ) elemental function horner_149 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_149 = horner_148 ( x = x , pre_step = ( pre_step * x + coefficient_149 ) ) end function real ( real128 ) elemental function horner_150 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_150 = horner_149 ( x = x , pre_step = ( pre_step * x + coefficient_150 ) ) end function real ( real128 ) elemental function horner_151 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_151 = horner_150 ( x = x , pre_step = ( pre_step * x + coefficient_151 ) ) end function real ( real128 ) elemental function horner_152 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_152 = horner_151 ( x = x , pre_step = ( pre_step * x + coefficient_152 ) ) end function real ( real128 ) elemental function horner_153 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_153 = horner_152 ( x = x , pre_step = ( pre_step * x + coefficient_153 ) ) end function real ( real128 ) elemental function horner_154 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_154 = horner_153 ( x = x , pre_step = ( pre_step * x + coefficient_154 ) ) end function real ( real128 ) elemental function horner_155 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_155 = horner_154 ( x = x , pre_step = ( pre_step * x + coefficient_155 ) ) end function real ( real128 ) elemental function horner_156 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_156 = horner_155 ( x = x , pre_step = ( pre_step * x + coefficient_156 ) ) end function real ( real128 ) elemental function horner_157 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_157 = horner_156 ( x = x , pre_step = ( pre_step * x + coefficient_157 ) ) end function real ( real128 ) elemental function horner_158 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_158 = horner_157 ( x = x , pre_step = ( pre_step * x + coefficient_158 ) ) end function real ( real128 ) elemental function horner_159 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_159 = horner_158 ( x = x , pre_step = ( pre_step * x + coefficient_159 ) ) end function real ( real128 ) elemental function horner_160 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_160 = horner_159 ( x = x , pre_step = ( pre_step * x + coefficient_160 ) ) end function real ( real128 ) elemental function horner_161 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_161 = horner_160 ( x = x , pre_step = ( pre_step * x + coefficient_161 ) ) end function real ( real128 ) elemental function horner_162 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_162 = horner_161 ( x = x , pre_step = ( pre_step * x + coefficient_162 ) ) end function real ( real128 ) elemental function horner_163 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_163 = horner_162 ( x = x , pre_step = ( pre_step * x + coefficient_163 ) ) end function real ( real128 ) elemental function horner_164 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_164 = horner_163 ( x = x , pre_step = ( pre_step * x + coefficient_164 ) ) end function real ( real128 ) elemental function horner_165 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_165 = horner_164 ( x = x , pre_step = ( pre_step * x + coefficient_165 ) ) end function real ( real128 ) elemental function horner_166 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_166 = horner_165 ( x = x , pre_step = ( pre_step * x + coefficient_166 ) ) end function real ( real128 ) elemental function horner_167 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_167 = horner_166 ( x = x , pre_step = ( pre_step * x + coefficient_167 ) ) end function real ( real128 ) elemental function horner_168 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_168 = horner_167 ( x = x , pre_step = ( pre_step * x + coefficient_168 ) ) end function real ( real128 ) elemental function horner_169 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_169 = horner_168 ( x = x , pre_step = ( pre_step * x + coefficient_169 ) ) end function real ( real128 ) elemental function horner_170 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_170 = horner_169 ( x = x , pre_step = ( pre_step * x + coefficient_170 ) ) end function real ( real128 ) elemental function horner_171 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_171 = horner_170 ( x = x , pre_step = ( pre_step * x + coefficient_171 ) ) end function real ( real128 ) elemental function horner_172 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_172 = horner_171 ( x = x , pre_step = ( pre_step * x + coefficient_172 ) ) end function real ( real128 ) elemental function horner_173 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_173 = horner_172 ( x = x , pre_step = ( pre_step * x + coefficient_173 ) ) end function real ( real128 ) elemental function horner_174 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_174 = horner_173 ( x = x , pre_step = ( pre_step * x + coefficient_174 ) ) end function real ( real128 ) elemental function horner_175 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_175 = horner_174 ( x = x , pre_step = ( pre_step * x + coefficient_175 ) ) end function real ( real128 ) elemental function horner_176 ( x , pre_step ) real ( real128 ), intent ( in ) :: x , pre_step horner_176 = horner_175 ( x = x , pre_step = ( pre_step * x + coefficient_176 ) ) end function end submodule imp_taylor_series_sin_real128","tags":"","url":"sourcefile/main_submodule_sin_real128.f90.html"},{"title":"inv_factorial_real32.f90 – taylor_series_fortran","text":"Source Code module inv_factorial_real32 use , intrinsic :: iso_fortran_env , only : real32 implicit none private real ( real32 ), parameter , public :: inv_factorial_000 = 1.0_real32 real ( real32 ), parameter , public :: inv_factorial_001 = inv_factorial_000 / 1 real ( real32 ), parameter , public :: inv_factorial_002 = inv_factorial_001 / 2 real ( real32 ), parameter , public :: inv_factorial_003 = inv_factorial_002 / 3 real ( real32 ), parameter , public :: inv_factorial_004 = inv_factorial_003 / 4 real ( real32 ), parameter , public :: inv_factorial_005 = inv_factorial_004 / 5 real ( real32 ), parameter , public :: inv_factorial_006 = inv_factorial_005 / 6 real ( real32 ), parameter , public :: inv_factorial_007 = inv_factorial_006 / 7 real ( real32 ), parameter , public :: inv_factorial_008 = inv_factorial_007 / 8 real ( real32 ), parameter , public :: inv_factorial_009 = inv_factorial_008 / 9 real ( real32 ), parameter , public :: inv_factorial_010 = inv_factorial_009 / 10 real ( real32 ), parameter , public :: inv_factorial_011 = inv_factorial_010 / 11 real ( real32 ), parameter , public :: inv_factorial_012 = inv_factorial_011 / 12 real ( real32 ), parameter , public :: inv_factorial_013 = inv_factorial_012 / 13 real ( real32 ), parameter , public :: inv_factorial_014 = inv_factorial_013 / 14 real ( real32 ), parameter , public :: inv_factorial_015 = inv_factorial_014 / 15 real ( real32 ), parameter , public :: inv_factorial_016 = inv_factorial_015 / 16 real ( real32 ), parameter , public :: inv_factorial_017 = inv_factorial_016 / 17 real ( real32 ), parameter , public :: inv_factorial_018 = inv_factorial_017 / 18 real ( real32 ), parameter , public :: inv_factorial_019 = inv_factorial_018 / 19 real ( real32 ), parameter , public :: inv_factorial_020 = inv_factorial_019 / 20 real ( real32 ), parameter , public :: inv_factorial_021 = inv_factorial_020 / 21 real ( real32 ), parameter , public :: inv_factorial_022 = inv_factorial_021 / 22 real ( real32 ), parameter , public :: inv_factorial_023 = inv_factorial_022 / 23 real ( real32 ), parameter , public :: inv_factorial_024 = inv_factorial_023 / 24 real ( real32 ), parameter , public :: inv_factorial_025 = inv_factorial_024 / 25 real ( real32 ), parameter , public :: inv_factorial_026 = inv_factorial_025 / 26 real ( real32 ), parameter , public :: inv_factorial_027 = inv_factorial_026 / 27 real ( real32 ), parameter , public :: inv_factorial_028 = inv_factorial_027 / 28 real ( real32 ), parameter , public :: inv_factorial_029 = inv_factorial_028 / 29 real ( real32 ), parameter , public :: inv_factorial_030 = inv_factorial_029 / 30 real ( real32 ), parameter , public :: inv_factorial_031 = inv_factorial_030 / 31 real ( real32 ), parameter , public :: inv_factorial_032 = inv_factorial_031 / 32 real ( real32 ), parameter , public :: inv_factorial_033 = inv_factorial_032 / 33 real ( real32 ), parameter , public :: inv_factorial_034 = inv_factorial_033 / 34 real ( real32 ), parameter , public :: inv_factorial_035 = inv_factorial_034 / 35 real ( real32 ), parameter , public :: inv_factorial_036 = inv_factorial_035 / 36 real ( real32 ), parameter , public :: inv_factorial_037 = inv_factorial_036 / 37 real ( real32 ), parameter , public :: inv_factorial_038 = inv_factorial_037 / 38 end module inv_factorial_real32","tags":"","url":"sourcefile/inv_factorial_real32.f90.html"}]}